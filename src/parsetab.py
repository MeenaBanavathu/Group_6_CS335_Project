
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "translation_unitADD_EQ AND AND_EQ BOOL BREAK CHAR CHARACTER CIN CLASS CONTINUE COUT DEC DIV_EQ ELSE EQUAL FALSE FOR GE ID IF IN INC INT INTEGER LE MOD_EQ MUL_EQ NE OR OR_EQ OUT PTR RETURN STRING STRUCT SUB_EQ TRUE VOID WHILE XOR_EQprimary_expression : ID\n    | INTEGER\n    | STRING\n    | TRUE\n    | FALSE\n    | CHARACTER\n    | '(' expression ')' postfix_expression : primary_expression\n    | postfix_expression '[' expression ']'\n    | postfix_expression '(' ')'\n    | postfix_expression '(' argument_expression_list ')'\n    | postfix_expression '.' ID\n    | postfix_expression PTR ID\n    | postfix_expression INC\n    | postfix_expression DECargument_expression_list : assignment_expression\n    | argument_expression_list ',' assignment_expressionunary_expression : postfix_expression\n    | INC unary_expression\n    | DEC unary_expression\n    | unary_operator cast_expressionunary_operator : '&'\n    | '*'\n    | '+'\n    | '-'\n    | '~'\n    | '!'cast_expression : unary_expression\n    | '(' type_name ')' cast_expressionmultiplicative_expression : cast_expression\n    | multiplicative_expression '*' cast_expression\n    | multiplicative_expression '/' cast_expression\n    | multiplicative_expression '%' cast_expressionadditive_expression : multiplicative_expression\n    | additive_expression '+' multiplicative_expression\n    | additive_expression '-' multiplicative_expressionrelational_expression : additive_expression\n    | relational_expression '<' additive_expression\n    | relational_expression '>' additive_expression\n    | relational_expression LE additive_expression\n    | relational_expression GE additive_expressionequality_expression : relational_expression\n    | equality_expression EQUAL relational_expression\n    | equality_expression NE relational_expressionand_expression : equality_expression\n    | and_expression '&' equality_expressionexclusive_or_expression : and_expression\n    | exclusive_or_expression '^' and_expressioninclusive_or_expression : exclusive_or_expression\n    | inclusive_or_expression '|' exclusive_or_expressionlogical_and_expression : inclusive_or_expression\n    | logical_and_expression AND inclusive_or_expressionlogical_or_expression : logical_and_expression\n    | logical_or_expression OR logical_and_expressionconditional_expression : logical_or_expression\n    | logical_or_expression '?' expression ':' conditional_expressionassignment_expression : conditional_expression\n    | unary_expression assignment_operator assignment_expressionassignment_operator : '='\n    | MUL_EQ\n    | DIV_EQ\n    | MOD_EQ\n    | ADD_EQ\n    | SUB_EQ\n    | AND_EQ\n    | XOR_EQ\n    | OR_EQexpression : assignment_expression\n    | expression ',' assignment_expressionconstant_expression : conditional_expressiondeclaration : declaration_specifiers ';'\n    | declaration_specifiers init_declarator_list ';'declaration_specifiers : \n    | type_specifier\n    | type_specifier declaration_specifiersinit_declarator_list : init_declarator\n    | init_declarator_list ',' init_declaratorinit_declarator : declarator\n    | declarator '=' initializertype_specifier : VOID\n    | CHAR\n    | INT\n    | BOOL\n    | struct_specifier\n    | class_definitionclass_definition : CLASS ID '{' class_member_list '}'class_member_list : class_member\n    | class_member_list class_memberclass_member : function_definition\n    | declarationstruct_specifier : STRUCT ID '{' struct_declaration_list '}'struct_declaration_list : struct_declaration\n    | struct_declaration_list struct_declarationstruct_declaration : specifier_qualifier_list struct_declarator_list ';' specifier_qualifier_list : type_specifier specifier_qualifier_list\n    | type_specifierstruct_declarator_list : struct_declarator\n    | struct_declarator_list ',' struct_declaratorstruct_declarator : declarator\n    | ':' constant_expression\n    | declarator ':' constant_expressiondeclarator : pointer direct_declarator\n    | direct_declaratordirect_declarator : ID\n    | '(' declarator ')'\n    | direct_declarator '[' constant_expression ']'\n    | direct_declarator '[' ']'\n    | direct_declarator '(' parameter_list ')'\n    | direct_declarator '(' identifier_list ')'\n    | direct_declarator '(' ')'pointer : '*'\n    | '*' pointerparameter_list : parameter_declaration\n    | parameter_list ',' parameter_declarationparameter_declaration : declaration_specifiers declarator\n    | declaration_specifiers abstract_declarator\n    | declaration_specifiersidentifier_list : ID\n    | identifier_list ',' IDtype_name : specifier_qualifier_list\n    | specifier_qualifier_list abstract_declaratorabstract_declarator : pointer\n    | direct_abstract_declarator\n    | pointer direct_abstract_declaratordirect_abstract_declarator : '(' abstract_declarator ')'\n    | '[' ']'\n    | '[' constant_expression ']'\n    | direct_abstract_declarator '[' ']'\n    | direct_abstract_declarator '[' constant_expression ']'\n    | '(' ')'\n    | '(' parameter_list ')'\n    | direct_abstract_declarator '(' ')'\n    | direct_abstract_declarator '(' parameter_list ')'initializer : assignment_expression\n    | '{' initializer_list '}'\n    | '{' initializer_list ',' '}'initializer_list : initializer\n    | initializer_list ',' initializerstatement : input_statement\n    | output_statement\n    | compound_statement\n    | expression_statement\n    | selection_statement\n    | iteration_statement\n    | jump_statementcompound_statement : '{' statement_list '}'\n    | '{' declaration_list '}'\n    | '{' declaration_list statement_list '}'declaration_list : declaration\n    | declaration_list declarationstatement_list : statement\n    | statement_list statementexpression_statement : ';'\n    | expression ';'selection_statement : IF '(' expression ')' statement\n    | IF '(' expression ')' statement ELSE statementiteration_statement : WHILE '(' expression ')' statement\n    | FOR '(' expression_statement expression_statement expression ')' statementjump_statement : CONTINUE ';'\n    | BREAK ';'\n    | RETURN ';'\n    | RETURN expression ';'translation_unit : external_declaration\n    | translation_unit external_declarationexternal_declaration : function_definition\n    | declarationfunction_definition : declaration_specifiers declarator declaration_list compound_statement\n    | declaration_specifiers declarator compound_statement\n    | declarator declaration_list compound_statement\n    | declarator compound_statementinput_statement : CIN IN ID ';'output_statement : COUT output_list ';'output_list : OUT primary_expression\n    | output_list OUT primary_expression"
    
_lr_action_items = {';':([0,1,2,3,4,5,6,7,9,10,11,12,13,14,15,17,21,22,23,24,25,26,27,28,29,30,31,32,39,40,42,44,45,46,47,48,49,50,51,52,53,54,55,56,58,60,65,66,67,68,69,70,71,72,76,77,78,85,86,87,88,89,90,91,92,93,94,95,96,97,99,100,101,104,109,111,112,113,114,116,117,118,119,120,122,124,132,133,134,135,136,153,154,155,157,158,174,175,177,188,189,190,191,194,195,196,198,199,201,208,209,210,212,214,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,244,246,247,248,250,251,252,254,255,256,257,258,261,262,274,275,277,278,280,284,285,286,287,288,289,],[-73,-73,-163,-165,-166,23,-73,-73,-103,-80,-81,-82,-83,-84,-85,-104,-164,-73,-71,42,-76,-73,-170,-149,56,23,-75,-102,-73,-168,-72,-169,-150,56,56,-151,-139,-140,-141,-142,-143,-144,-145,-153,-1,124,133,134,135,-68,-57,-28,-55,-18,-30,-53,-8,-51,-2,-3,-4,-5,-6,-49,-47,-45,-42,-37,-34,-78,-107,-70,-28,-110,-105,-73,-167,-79,-134,-77,-146,-152,-147,56,196,-154,56,-159,-160,-161,209,-14,-15,-19,-20,-21,-106,-108,-109,-73,-87,-89,-90,-148,254,-172,-173,-69,-7,56,-162,-58,-54,-10,-12,-13,-52,-50,-48,-46,-43,-44,-38,-39,-40,-41,-35,-36,-31,-32,-33,-91,271,-97,-99,-86,-88,-135,-171,-174,56,-29,56,-9,-11,-100,-136,-155,-157,-56,-98,-101,56,56,-156,-158,]),'*':([0,1,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,21,22,23,26,27,28,29,30,31,32,33,34,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,62,67,70,72,73,74,75,76,78,79,80,81,82,83,84,86,87,88,89,90,96,99,101,102,104,108,109,111,112,115,117,118,119,120,124,125,126,129,130,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,183,184,187,188,189,190,191,194,196,201,202,205,206,208,209,214,217,218,229,230,231,232,233,237,238,244,249,250,251,253,254,256,257,258,259,260,261,262,263,272,273,277,278,286,287,288,289,],[16,16,-163,-165,-166,16,-73,-73,-103,-80,-81,-82,-83,-84,-85,16,-104,16,-164,-73,-71,-73,-170,-149,80,16,-75,-102,80,-73,-73,-168,80,-72,16,-169,-150,80,80,-151,-139,-140,-141,-142,-143,-144,-145,-153,-1,80,80,-28,-18,80,80,80,-30,-8,-22,-23,-24,-25,-26,-27,-2,-3,-4,-5,-6,171,-107,-28,80,-110,16,-105,16,-167,80,-146,-152,-147,80,-154,80,80,16,-96,80,80,-159,-160,-161,80,-59,-60,-61,-62,-63,-64,-65,-66,-67,80,80,80,80,-14,-15,-19,80,-20,-21,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-106,-108,-73,-109,16,80,16,16,-87,-89,-90,-148,-172,-7,80,16,-95,80,-162,-10,-12,-13,171,171,-31,-32,-33,80,-73,-91,80,-86,-88,80,-171,80,-29,80,80,80,-9,-11,80,16,80,-155,-157,80,80,-156,-158,]),'ID':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,26,27,28,29,30,31,32,33,34,35,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,62,67,73,74,75,79,80,81,82,83,84,99,102,104,108,109,111,112,115,117,118,119,120,121,123,124,125,126,130,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,181,183,184,187,188,189,190,191,194,196,197,202,205,206,208,209,237,238,244,249,250,251,253,254,256,258,259,260,263,272,273,277,278,286,287,288,289,],[17,17,-163,-165,-166,17,-73,-73,17,-103,-80,-81,-82,-83,-84,-85,-111,-104,17,37,38,-164,-73,-71,-73,-170,-149,58,17,-75,-102,58,107,-112,-73,-168,58,-72,17,-169,-150,58,58,-151,-139,-140,-141,-142,-143,-144,-145,-153,58,58,58,58,58,-22,-23,-24,-25,-26,-27,-107,58,-110,17,-105,17,-167,58,-146,-152,-147,58,195,58,-154,58,58,-96,58,58,-159,-160,-161,58,-59,-60,-61,-62,-63,-64,-65,-66,-67,58,58,58,58,217,218,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-106,-108,-73,-109,235,17,17,58,17,17,-87,-89,-90,-148,-172,58,58,-73,-95,58,-162,58,-73,-91,58,-86,-88,58,-171,58,58,58,58,58,17,58,-155,-157,58,58,-156,-158,]),'(':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,21,22,23,26,27,28,29,30,31,32,33,34,35,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,61,62,63,64,67,72,73,74,75,78,79,80,81,82,83,84,86,87,88,89,90,99,102,104,108,109,111,112,115,117,118,119,120,123,124,125,126,129,130,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,153,154,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,181,182,183,184,187,188,189,190,191,194,196,197,201,202,204,205,206,208,209,214,217,218,236,237,238,239,242,244,249,250,251,253,254,256,258,259,260,261,262,263,264,266,268,269,270,272,273,277,278,282,283,286,287,288,289,],[18,18,-163,-165,-166,18,-73,-73,18,34,-80,-81,-82,-83,-84,-85,-111,-104,18,-164,-73,-71,-73,-170,-149,62,18,-75,34,102,-73,-112,-73,-168,62,-72,18,-169,-150,62,62,-151,-139,-140,-141,-142,-143,-144,-145,-153,-1,126,62,131,132,62,150,156,156,102,-8,-22,-23,-24,-25,-26,-27,-2,-3,-4,-5,-6,-107,62,-110,183,-105,18,-167,62,-146,-152,-147,62,156,-154,62,62,205,-96,62,62,-159,-160,-161,62,-59,-60,-61,-62,-63,-64,-65,-66,-67,62,102,62,62,-14,-15,62,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,-106,-108,-73,-109,183,238,183,102,18,18,-87,-89,-90,-148,-172,156,-7,102,205,205,-95,62,-162,-10,-12,-13,238,102,-73,-130,-126,-91,102,-86,-88,62,-171,62,62,62,102,-9,-11,62,-128,-132,-125,-131,-127,18,102,-155,-157,-129,-133,62,62,-156,-158,]),'VOID':([0,1,2,3,4,6,7,9,10,11,12,13,14,15,17,21,22,23,26,27,28,29,32,34,39,40,42,44,45,47,62,99,102,104,109,110,111,112,117,119,130,174,175,176,177,183,185,186,188,189,190,191,194,205,238,244,245,250,251,271,],[10,10,-163,-165,-166,10,10,-103,-80,-81,-82,-83,-84,-85,-104,-164,10,-71,10,-170,-149,10,-102,10,10,-168,-72,-169,-150,10,10,-107,10,-110,-105,10,10,-167,-146,-147,10,-106,-108,10,-109,10,10,-92,10,-87,-89,-90,-148,10,10,-91,-93,-86,-88,-94,]),'CHAR':([0,1,2,3,4,6,7,9,10,11,12,13,14,15,17,21,22,23,26,27,28,29,32,34,39,40,42,44,45,47,62,99,102,104,109,110,111,112,117,119,130,174,175,176,177,183,185,186,188,189,190,191,194,205,238,244,245,250,251,271,],[11,11,-163,-165,-166,11,11,-103,-80,-81,-82,-83,-84,-85,-104,-164,11,-71,11,-170,-149,11,-102,11,11,-168,-72,-169,-150,11,11,-107,11,-110,-105,11,11,-167,-146,-147,11,-106,-108,11,-109,11,11,-92,11,-87,-89,-90,-148,11,11,-91,-93,-86,-88,-94,]),'INT':([0,1,2,3,4,6,7,9,10,11,12,13,14,15,17,21,22,23,26,27,28,29,32,34,39,40,42,44,45,47,62,99,102,104,109,110,111,112,117,119,130,174,175,176,177,183,185,186,188,189,190,191,194,205,238,244,245,250,251,271,],[12,12,-163,-165,-166,12,12,-103,-80,-81,-82,-83,-84,-85,-104,-164,12,-71,12,-170,-149,12,-102,12,12,-168,-72,-169,-150,12,12,-107,12,-110,-105,12,12,-167,-146,-147,12,-106,-108,12,-109,12,12,-92,12,-87,-89,-90,-148,12,12,-91,-93,-86,-88,-94,]),'BOOL':([0,1,2,3,4,6,7,9,10,11,12,13,14,15,17,21,22,23,26,27,28,29,32,34,39,40,42,44,45,47,62,99,102,104,109,110,111,112,117,119,130,174,175,176,177,183,185,186,188,189,190,191,194,205,238,244,245,250,251,271,],[13,13,-163,-165,-166,13,13,-103,-80,-81,-82,-83,-84,-85,-104,-164,13,-71,13,-170,-149,13,-102,13,13,-168,-72,-169,-150,13,13,-107,13,-110,-105,13,13,-167,-146,-147,13,-106,-108,13,-109,13,13,-92,13,-87,-89,-90,-148,13,13,-91,-93,-86,-88,-94,]),'STRUCT':([0,1,2,3,4,6,7,9,10,11,12,13,14,15,17,21,22,23,26,27,28,29,32,34,39,40,42,44,45,47,62,99,102,104,109,110,111,112,117,119,130,174,175,176,177,183,185,186,188,189,190,191,194,205,238,244,245,250,251,271,],[19,19,-163,-165,-166,19,19,-103,-80,-81,-82,-83,-84,-85,-104,-164,19,-71,19,-170,-149,19,-102,19,19,-168,-72,-169,-150,19,19,-107,19,-110,-105,19,19,-167,-146,-147,19,-106,-108,19,-109,19,19,-92,19,-87,-89,-90,-148,19,19,-91,-93,-86,-88,-94,]),'CLASS':([0,1,2,3,4,6,7,9,10,11,12,13,14,15,17,21,22,23,26,27,28,29,32,34,39,40,42,44,45,47,62,99,102,104,109,110,111,112,117,119,130,174,175,176,177,183,185,186,188,189,190,191,194,205,238,244,245,250,251,271,],[20,20,-163,-165,-166,20,20,-103,-80,-81,-82,-83,-84,-85,-104,-164,20,-71,20,-170,-149,20,-102,20,20,-168,-72,-169,-150,20,20,-107,20,-110,-105,20,20,-167,-146,-147,20,-106,-108,20,-109,20,20,-92,20,-87,-89,-90,-148,20,20,-91,-93,-86,-88,-94,]),'$end':([1,2,3,4,21,23,27,40,42,44,112,117,119,194,],[0,-163,-165,-166,-164,-71,-170,-168,-72,-169,-167,-146,-147,-148,]),'{':([6,9,17,22,23,26,28,29,32,37,38,39,41,42,45,46,47,48,49,50,51,52,53,54,55,56,99,104,109,115,117,118,119,120,124,133,134,135,174,175,177,194,196,209,253,254,256,258,277,278,286,287,288,289,],[29,-103,-104,29,-71,29,-149,29,-102,110,111,29,115,-72,-150,29,29,-151,-139,-140,-141,-142,-143,-144,-145,-153,-107,-110,-105,115,-146,-152,-147,29,-154,-159,-160,-161,-106,-108,-109,-148,-172,-162,115,-171,29,29,-155,-157,29,29,-156,-158,]),'[':([7,9,10,11,12,13,14,15,16,17,31,32,34,35,58,72,78,86,87,88,89,90,99,104,108,109,129,130,153,154,174,175,176,177,181,182,183,201,204,205,206,214,217,218,236,238,239,242,244,250,261,262,264,266,268,269,270,282,283,],[-73,33,-80,-81,-82,-83,-84,-85,-111,-104,-75,33,-73,-112,-1,149,-8,-2,-3,-4,-5,-6,-107,-110,184,-105,184,-96,-14,-15,-106,-108,-73,-109,184,237,184,-7,184,184,-95,-10,-12,-13,237,-73,-130,-126,-91,-86,-9,-11,-128,-132,-125,-131,-127,-129,-133,]),')':([7,9,10,11,12,13,14,15,16,17,31,32,34,35,36,58,68,69,70,71,72,76,77,78,85,86,87,88,89,90,91,92,93,94,95,96,99,101,103,104,105,106,107,108,109,127,128,129,130,150,153,154,155,157,158,174,175,176,177,179,180,181,182,183,199,200,201,203,204,205,206,207,210,212,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,238,239,240,241,242,244,250,257,261,262,264,266,267,268,269,270,279,280,281,282,283,],[-73,-103,-80,-81,-82,-83,-84,-85,-111,-104,-75,-102,104,-112,109,-1,-68,-57,-28,-55,-18,-30,-53,-8,-51,-2,-3,-4,-5,-6,-49,-47,-45,-42,-37,-34,-107,-28,175,-110,177,-113,-118,-117,-105,201,202,-120,-96,214,-14,-15,-19,-20,-21,-106,-108,-73,-109,-115,-116,-122,-123,239,-69,256,-7,-121,-122,239,-95,258,-58,-54,-10,262,-16,-12,-13,-52,-50,-48,-46,-43,-44,-38,-39,-40,-41,-35,-36,-31,-32,-33,-114,-119,-124,266,-130,268,269,-126,-91,-86,-29,-9,-11,-128,-132,283,-125,-131,-127,287,-56,-17,-129,-133,]),',':([7,9,10,11,12,13,14,15,16,17,22,24,25,31,32,34,35,58,60,68,69,70,71,72,76,77,78,85,86,87,88,89,90,91,92,93,94,95,96,97,99,100,101,103,104,105,106,107,108,109,113,114,116,127,136,153,154,155,157,158,174,175,176,177,179,180,181,182,183,192,193,199,200,201,205,207,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,238,239,241,242,244,246,247,248,250,252,257,261,262,264,266,267,268,269,270,274,275,276,279,280,281,282,283,284,285,],[-73,-103,-80,-81,-82,-83,-84,-85,-111,-104,-78,43,-76,-75,-102,-73,-112,-1,125,-68,-57,-28,-55,-18,-30,-53,-8,-51,-2,-3,-4,-5,-6,-49,-47,-45,-42,-37,-34,-78,-107,-70,-28,176,-110,178,-113,-118,-117,-105,-79,-134,-77,125,125,-14,-15,-19,-20,-21,-106,-108,-73,-109,-115,-116,-122,-123,-73,253,-137,-69,125,-7,-73,125,-58,125,-54,125,-10,263,-16,-12,-13,-52,-50,-48,-46,-43,-44,-38,-39,-40,-41,-35,-36,-31,-32,-33,-114,-119,-124,-73,-130,176,-126,-91,272,-97,-99,-86,-135,-29,-9,-11,-128,-132,176,-125,-131,-127,-100,-136,-138,125,-56,-17,-129,-133,-98,-101,]),'=':([9,17,22,32,58,70,72,78,86,87,88,89,90,97,99,101,104,109,153,154,155,157,158,174,175,177,201,214,217,218,257,261,262,],[-103,-104,41,-102,-1,138,-18,-8,-2,-3,-4,-5,-6,41,-107,-28,-110,-105,-14,-15,-19,-20,-21,-106,-108,-109,-7,-10,-12,-13,-29,-9,-11,]),':':([9,10,11,12,13,14,15,17,32,58,68,69,70,71,72,76,77,78,85,86,87,88,89,90,91,92,93,94,95,96,99,101,104,109,130,153,154,155,157,158,174,175,177,187,199,201,206,210,211,212,214,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,244,248,250,257,261,262,272,280,],[-103,-80,-81,-82,-83,-84,-85,-104,-102,-1,-68,-57,-28,-55,-18,-30,-53,-8,-51,-2,-3,-4,-5,-6,-49,-47,-45,-42,-37,-34,-107,-28,-110,-105,-96,-14,-15,-19,-20,-21,-106,-108,-109,249,-69,-7,-95,-58,260,-54,-10,-12,-13,-52,-50,-48,-46,-43,-44,-38,-39,-40,-41,-35,-36,-31,-32,-33,-91,273,-86,-29,-9,-11,249,-56,]),'}':([23,27,28,40,42,44,45,46,47,48,49,50,51,52,53,54,55,56,58,69,70,71,72,76,77,78,85,86,87,88,89,90,91,92,93,94,95,96,101,112,114,117,118,119,120,124,133,134,135,153,154,155,157,158,185,186,188,189,190,191,192,193,194,196,201,209,210,212,214,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,245,251,252,253,254,257,261,262,271,275,276,277,278,280,288,289,],[-71,-170,-149,-168,-72,-169,-150,117,119,-151,-139,-140,-141,-142,-143,-144,-145,-153,-1,-57,-28,-55,-18,-30,-53,-8,-51,-2,-3,-4,-5,-6,-49,-47,-45,-42,-37,-34,-28,-167,-134,-146,-152,-147,194,-154,-159,-160,-161,-14,-15,-19,-20,-21,244,-92,250,-87,-89,-90,252,-137,-148,-172,-7,-162,-58,-54,-10,-12,-13,-52,-50,-48,-46,-43,-44,-38,-39,-40,-41,-35,-36,-31,-32,-33,-93,-88,-135,275,-171,-29,-9,-11,-94,-136,-138,-155,-157,-56,-156,-158,]),'CIN':([23,28,29,42,45,46,47,48,49,50,51,52,53,54,55,56,117,118,119,120,124,133,134,135,194,196,209,254,256,258,277,278,286,287,288,289,],[-71,-149,57,-72,-150,57,57,-151,-139,-140,-141,-142,-143,-144,-145,-153,-146,-152,-147,57,-154,-159,-160,-161,-148,-172,-162,-171,57,57,-155,-157,57,57,-156,-158,]),'COUT':([23,28,29,42,45,46,47,48,49,50,51,52,53,54,55,56,117,118,119,120,124,133,134,135,194,196,209,254,256,258,277,278,286,287,288,289,],[-71,-149,59,-72,-150,59,59,-151,-139,-140,-141,-142,-143,-144,-145,-153,-146,-152,-147,59,-154,-159,-160,-161,-148,-172,-162,-171,59,59,-155,-157,59,59,-156,-158,]),'IF':([23,28,29,42,45,46,47,48,49,50,51,52,53,54,55,56,117,118,119,120,124,133,134,135,194,196,209,254,256,258,277,278,286,287,288,289,],[-71,-149,61,-72,-150,61,61,-151,-139,-140,-141,-142,-143,-144,-145,-153,-146,-152,-147,61,-154,-159,-160,-161,-148,-172,-162,-171,61,61,-155,-157,61,61,-156,-158,]),'WHILE':([23,28,29,42,45,46,47,48,49,50,51,52,53,54,55,56,117,118,119,120,124,133,134,135,194,196,209,254,256,258,277,278,286,287,288,289,],[-71,-149,63,-72,-150,63,63,-151,-139,-140,-141,-142,-143,-144,-145,-153,-146,-152,-147,63,-154,-159,-160,-161,-148,-172,-162,-171,63,63,-155,-157,63,63,-156,-158,]),'FOR':([23,28,29,42,45,46,47,48,49,50,51,52,53,54,55,56,117,118,119,120,124,133,134,135,194,196,209,254,256,258,277,278,286,287,288,289,],[-71,-149,64,-72,-150,64,64,-151,-139,-140,-141,-142,-143,-144,-145,-153,-146,-152,-147,64,-154,-159,-160,-161,-148,-172,-162,-171,64,64,-155,-157,64,64,-156,-158,]),'CONTINUE':([23,28,29,42,45,46,47,48,49,50,51,52,53,54,55,56,117,118,119,120,124,133,134,135,194,196,209,254,256,258,277,278,286,287,288,289,],[-71,-149,65,-72,-150,65,65,-151,-139,-140,-141,-142,-143,-144,-145,-153,-146,-152,-147,65,-154,-159,-160,-161,-148,-172,-162,-171,65,65,-155,-157,65,65,-156,-158,]),'BREAK':([23,28,29,42,45,46,47,48,49,50,51,52,53,54,55,56,117,118,119,120,124,133,134,135,194,196,209,254,256,258,277,278,286,287,288,289,],[-71,-149,66,-72,-150,66,66,-151,-139,-140,-141,-142,-143,-144,-145,-153,-146,-152,-147,66,-154,-159,-160,-161,-148,-172,-162,-171,66,66,-155,-157,66,66,-156,-158,]),'RETURN':([23,28,29,42,45,46,47,48,49,50,51,52,53,54,55,56,117,118,119,120,124,133,134,135,194,196,209,254,256,258,277,278,286,287,288,289,],[-71,-149,67,-72,-150,67,67,-151,-139,-140,-141,-142,-143,-144,-145,-153,-146,-152,-147,67,-154,-159,-160,-161,-148,-172,-162,-171,67,67,-155,-157,67,67,-156,-158,]),'INC':([23,28,29,33,41,42,45,46,47,48,49,50,51,52,53,54,55,56,58,62,67,72,73,74,75,78,79,80,81,82,83,84,86,87,88,89,90,102,115,117,118,119,120,124,125,126,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,153,154,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,184,194,196,201,202,208,209,214,217,218,237,249,253,254,256,258,259,260,261,262,263,273,277,278,286,287,288,289,],[-71,-149,73,73,73,-72,-150,73,73,-151,-139,-140,-141,-142,-143,-144,-145,-153,-1,73,73,153,73,73,73,-8,-22,-23,-24,-25,-26,-27,-2,-3,-4,-5,-6,73,73,-146,-152,-147,73,-154,73,73,73,73,-159,-160,-161,73,-59,-60,-61,-62,-63,-64,-65,-66,-67,73,73,73,73,-14,-15,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-148,-172,-7,73,73,-162,-10,-12,-13,73,73,73,-171,73,73,73,73,-9,-11,73,73,-155,-157,73,73,-156,-158,]),'DEC':([23,28,29,33,41,42,45,46,47,48,49,50,51,52,53,54,55,56,58,62,67,72,73,74,75,78,79,80,81,82,83,84,86,87,88,89,90,102,115,117,118,119,120,124,125,126,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,153,154,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,184,194,196,201,202,208,209,214,217,218,237,249,253,254,256,258,259,260,261,262,263,273,277,278,286,287,288,289,],[-71,-149,74,74,74,-72,-150,74,74,-151,-139,-140,-141,-142,-143,-144,-145,-153,-1,74,74,154,74,74,74,-8,-22,-23,-24,-25,-26,-27,-2,-3,-4,-5,-6,74,74,-146,-152,-147,74,-154,74,74,74,74,-159,-160,-161,74,-59,-60,-61,-62,-63,-64,-65,-66,-67,74,74,74,74,-14,-15,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-148,-172,-7,74,74,-162,-10,-12,-13,74,74,74,-171,74,74,74,74,-9,-11,74,74,-155,-157,74,74,-156,-158,]),'&':([23,28,29,33,41,42,45,46,47,48,49,50,51,52,53,54,55,56,58,62,67,70,72,73,74,75,76,78,79,80,81,82,83,84,86,87,88,89,90,92,93,94,95,96,101,102,115,117,118,119,120,124,125,126,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,184,194,196,201,202,208,209,214,217,218,221,222,223,224,225,226,227,228,229,230,231,232,233,237,249,253,254,256,257,258,259,260,261,262,263,273,277,278,286,287,288,289,],[-71,-149,79,79,79,-72,-150,79,79,-151,-139,-140,-141,-142,-143,-144,-145,-153,-1,79,79,-28,-18,79,79,79,-30,-8,-22,-23,-24,-25,-26,-27,-2,-3,-4,-5,-6,162,-45,-42,-37,-34,-28,79,79,-146,-152,-147,79,-154,79,79,79,79,-159,-160,-161,79,-59,-60,-61,-62,-63,-64,-65,-66,-67,79,79,79,79,-14,-15,-19,79,-20,-21,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-148,-172,-7,79,79,-162,-10,-12,-13,162,-46,-43,-44,-38,-39,-40,-41,-35,-36,-31,-32,-33,79,79,79,-171,79,-29,79,79,79,-9,-11,79,79,-155,-157,79,79,-156,-158,]),'+':([23,28,29,33,41,42,45,46,47,48,49,50,51,52,53,54,55,56,58,62,67,70,72,73,74,75,76,78,79,80,81,82,83,84,86,87,88,89,90,95,96,101,102,115,117,118,119,120,124,125,126,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,184,194,196,201,202,208,209,214,217,218,225,226,227,228,229,230,231,232,233,237,249,253,254,256,257,258,259,260,261,262,263,273,277,278,286,287,288,289,],[-71,-149,81,81,81,-72,-150,81,81,-151,-139,-140,-141,-142,-143,-144,-145,-153,-1,81,81,-28,-18,81,81,81,-30,-8,-22,-23,-24,-25,-26,-27,-2,-3,-4,-5,-6,169,-34,-28,81,81,-146,-152,-147,81,-154,81,81,81,81,-159,-160,-161,81,-59,-60,-61,-62,-63,-64,-65,-66,-67,81,81,81,81,-14,-15,-19,81,-20,-21,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-148,-172,-7,81,81,-162,-10,-12,-13,169,169,169,169,-35,-36,-31,-32,-33,81,81,81,-171,81,-29,81,81,81,-9,-11,81,81,-155,-157,81,81,-156,-158,]),'-':([23,28,29,33,41,42,45,46,47,48,49,50,51,52,53,54,55,56,58,62,67,70,72,73,74,75,76,78,79,80,81,82,83,84,86,87,88,89,90,95,96,101,102,115,117,118,119,120,124,125,126,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,184,194,196,201,202,208,209,214,217,218,225,226,227,228,229,230,231,232,233,237,249,253,254,256,257,258,259,260,261,262,263,273,277,278,286,287,288,289,],[-71,-149,82,82,82,-72,-150,82,82,-151,-139,-140,-141,-142,-143,-144,-145,-153,-1,82,82,-28,-18,82,82,82,-30,-8,-22,-23,-24,-25,-26,-27,-2,-3,-4,-5,-6,170,-34,-28,82,82,-146,-152,-147,82,-154,82,82,82,82,-159,-160,-161,82,-59,-60,-61,-62,-63,-64,-65,-66,-67,82,82,82,82,-14,-15,-19,82,-20,-21,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,-148,-172,-7,82,82,-162,-10,-12,-13,170,170,170,170,-35,-36,-31,-32,-33,82,82,82,-171,82,-29,82,82,82,-9,-11,82,82,-155,-157,82,82,-156,-158,]),'~':([23,28,29,33,41,42,45,46,47,48,49,50,51,52,53,54,55,56,62,67,73,74,75,79,80,81,82,83,84,102,115,117,118,119,120,124,125,126,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,184,194,196,202,208,209,237,249,253,254,256,258,259,260,263,273,277,278,286,287,288,289,],[-71,-149,83,83,83,-72,-150,83,83,-151,-139,-140,-141,-142,-143,-144,-145,-153,83,83,83,83,83,-22,-23,-24,-25,-26,-27,83,83,-146,-152,-147,83,-154,83,83,83,83,-159,-160,-161,83,-59,-60,-61,-62,-63,-64,-65,-66,-67,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,-148,-172,83,83,-162,83,83,83,-171,83,83,83,83,83,83,-155,-157,83,83,-156,-158,]),'!':([23,28,29,33,41,42,45,46,47,48,49,50,51,52,53,54,55,56,62,67,73,74,75,79,80,81,82,83,84,102,115,117,118,119,120,124,125,126,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,184,194,196,202,208,209,237,249,253,254,256,258,259,260,263,273,277,278,286,287,288,289,],[-71,-149,84,84,84,-72,-150,84,84,-151,-139,-140,-141,-142,-143,-144,-145,-153,84,84,84,84,84,-22,-23,-24,-25,-26,-27,84,84,-146,-152,-147,84,-154,84,84,84,84,-159,-160,-161,84,-59,-60,-61,-62,-63,-64,-65,-66,-67,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,-148,-172,84,84,-162,84,84,84,-171,84,84,84,84,84,84,-155,-157,84,84,-156,-158,]),'INTEGER':([23,28,29,33,41,42,45,46,47,48,49,50,51,52,53,54,55,56,62,67,73,74,75,79,80,81,82,83,84,102,115,117,118,119,120,123,124,125,126,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,184,194,196,197,202,208,209,237,249,253,254,256,258,259,260,263,273,277,278,286,287,288,289,],[-71,-149,86,86,86,-72,-150,86,86,-151,-139,-140,-141,-142,-143,-144,-145,-153,86,86,86,86,86,-22,-23,-24,-25,-26,-27,86,86,-146,-152,-147,86,86,-154,86,86,86,86,-159,-160,-161,86,-59,-60,-61,-62,-63,-64,-65,-66,-67,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,-148,-172,86,86,86,-162,86,86,86,-171,86,86,86,86,86,86,-155,-157,86,86,-156,-158,]),'STRING':([23,28,29,33,41,42,45,46,47,48,49,50,51,52,53,54,55,56,62,67,73,74,75,79,80,81,82,83,84,102,115,117,118,119,120,123,124,125,126,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,184,194,196,197,202,208,209,237,249,253,254,256,258,259,260,263,273,277,278,286,287,288,289,],[-71,-149,87,87,87,-72,-150,87,87,-151,-139,-140,-141,-142,-143,-144,-145,-153,87,87,87,87,87,-22,-23,-24,-25,-26,-27,87,87,-146,-152,-147,87,87,-154,87,87,87,87,-159,-160,-161,87,-59,-60,-61,-62,-63,-64,-65,-66,-67,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,-148,-172,87,87,87,-162,87,87,87,-171,87,87,87,87,87,87,-155,-157,87,87,-156,-158,]),'TRUE':([23,28,29,33,41,42,45,46,47,48,49,50,51,52,53,54,55,56,62,67,73,74,75,79,80,81,82,83,84,102,115,117,118,119,120,123,124,125,126,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,184,194,196,197,202,208,209,237,249,253,254,256,258,259,260,263,273,277,278,286,287,288,289,],[-71,-149,88,88,88,-72,-150,88,88,-151,-139,-140,-141,-142,-143,-144,-145,-153,88,88,88,88,88,-22,-23,-24,-25,-26,-27,88,88,-146,-152,-147,88,88,-154,88,88,88,88,-159,-160,-161,88,-59,-60,-61,-62,-63,-64,-65,-66,-67,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,-148,-172,88,88,88,-162,88,88,88,-171,88,88,88,88,88,88,-155,-157,88,88,-156,-158,]),'FALSE':([23,28,29,33,41,42,45,46,47,48,49,50,51,52,53,54,55,56,62,67,73,74,75,79,80,81,82,83,84,102,115,117,118,119,120,123,124,125,126,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,184,194,196,197,202,208,209,237,249,253,254,256,258,259,260,263,273,277,278,286,287,288,289,],[-71,-149,89,89,89,-72,-150,89,89,-151,-139,-140,-141,-142,-143,-144,-145,-153,89,89,89,89,89,-22,-23,-24,-25,-26,-27,89,89,-146,-152,-147,89,89,-154,89,89,89,89,-159,-160,-161,89,-59,-60,-61,-62,-63,-64,-65,-66,-67,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,-148,-172,89,89,89,-162,89,89,89,-171,89,89,89,89,89,89,-155,-157,89,89,-156,-158,]),'CHARACTER':([23,28,29,33,41,42,45,46,47,48,49,50,51,52,53,54,55,56,62,67,73,74,75,79,80,81,82,83,84,102,115,117,118,119,120,123,124,125,126,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,184,194,196,197,202,208,209,237,249,253,254,256,258,259,260,263,273,277,278,286,287,288,289,],[-71,-149,90,90,90,-72,-150,90,90,-151,-139,-140,-141,-142,-143,-144,-145,-153,90,90,90,90,90,-22,-23,-24,-25,-26,-27,90,90,-146,-152,-147,90,90,-154,90,90,90,90,-159,-160,-161,90,-59,-60,-61,-62,-63,-64,-65,-66,-67,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,-148,-172,90,90,90,-162,90,90,90,-171,90,90,90,90,90,90,-155,-157,90,90,-156,-158,]),']':([33,58,68,69,70,71,72,76,77,78,85,86,87,88,89,90,91,92,93,94,95,96,98,100,101,153,154,155,157,158,184,199,201,210,212,213,214,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,237,243,257,261,262,265,280,],[99,-1,-68,-57,-28,-55,-18,-30,-53,-8,-51,-2,-3,-4,-5,-6,-49,-47,-45,-42,-37,-34,174,-70,-28,-14,-15,-19,-20,-21,242,-69,-7,-58,-54,261,-10,-12,-13,-52,-50,-48,-46,-43,-44,-38,-39,-40,-41,-35,-36,-31,-32,-33,264,270,-29,-9,-11,282,-56,]),'ELSE':([49,50,51,52,53,54,55,56,117,119,124,133,134,135,194,196,209,254,277,278,288,289,],[-139,-140,-141,-142,-143,-144,-145,-153,-146,-147,-154,-159,-160,-161,-148,-172,-162,-171,286,-157,-156,-158,]),'IN':([57,],[121,]),'.':([58,72,78,86,87,88,89,90,153,154,201,214,217,218,261,262,],[-1,151,-8,-2,-3,-4,-5,-6,-14,-15,-7,-10,-12,-13,-9,-11,]),'PTR':([58,72,78,86,87,88,89,90,153,154,201,214,217,218,261,262,],[-1,152,-8,-2,-3,-4,-5,-6,-14,-15,-7,-10,-12,-13,-9,-11,]),'MUL_EQ':([58,70,72,78,86,87,88,89,90,101,153,154,155,157,158,201,214,217,218,257,261,262,],[-1,139,-18,-8,-2,-3,-4,-5,-6,-28,-14,-15,-19,-20,-21,-7,-10,-12,-13,-29,-9,-11,]),'DIV_EQ':([58,70,72,78,86,87,88,89,90,101,153,154,155,157,158,201,214,217,218,257,261,262,],[-1,140,-18,-8,-2,-3,-4,-5,-6,-28,-14,-15,-19,-20,-21,-7,-10,-12,-13,-29,-9,-11,]),'MOD_EQ':([58,70,72,78,86,87,88,89,90,101,153,154,155,157,158,201,214,217,218,257,261,262,],[-1,141,-18,-8,-2,-3,-4,-5,-6,-28,-14,-15,-19,-20,-21,-7,-10,-12,-13,-29,-9,-11,]),'ADD_EQ':([58,70,72,78,86,87,88,89,90,101,153,154,155,157,158,201,214,217,218,257,261,262,],[-1,142,-18,-8,-2,-3,-4,-5,-6,-28,-14,-15,-19,-20,-21,-7,-10,-12,-13,-29,-9,-11,]),'SUB_EQ':([58,70,72,78,86,87,88,89,90,101,153,154,155,157,158,201,214,217,218,257,261,262,],[-1,143,-18,-8,-2,-3,-4,-5,-6,-28,-14,-15,-19,-20,-21,-7,-10,-12,-13,-29,-9,-11,]),'AND_EQ':([58,70,72,78,86,87,88,89,90,101,153,154,155,157,158,201,214,217,218,257,261,262,],[-1,144,-18,-8,-2,-3,-4,-5,-6,-28,-14,-15,-19,-20,-21,-7,-10,-12,-13,-29,-9,-11,]),'XOR_EQ':([58,70,72,78,86,87,88,89,90,101,153,154,155,157,158,201,214,217,218,257,261,262,],[-1,145,-18,-8,-2,-3,-4,-5,-6,-28,-14,-15,-19,-20,-21,-7,-10,-12,-13,-29,-9,-11,]),'OR_EQ':([58,70,72,78,86,87,88,89,90,101,153,154,155,157,158,201,214,217,218,257,261,262,],[-1,146,-18,-8,-2,-3,-4,-5,-6,-28,-14,-15,-19,-20,-21,-7,-10,-12,-13,-29,-9,-11,]),'/':([58,70,72,76,78,86,87,88,89,90,96,101,153,154,155,157,158,201,214,217,218,229,230,231,232,233,257,261,262,],[-1,-28,-18,-30,-8,-2,-3,-4,-5,-6,172,-28,-14,-15,-19,-20,-21,-7,-10,-12,-13,172,172,-31,-32,-33,-29,-9,-11,]),'%':([58,70,72,76,78,86,87,88,89,90,96,101,153,154,155,157,158,201,214,217,218,229,230,231,232,233,257,261,262,],[-1,-28,-18,-30,-8,-2,-3,-4,-5,-6,173,-28,-14,-15,-19,-20,-21,-7,-10,-12,-13,173,173,-31,-32,-33,-29,-9,-11,]),'<':([58,70,72,76,78,86,87,88,89,90,94,95,96,101,153,154,155,157,158,201,214,217,218,223,224,225,226,227,228,229,230,231,232,233,257,261,262,],[-1,-28,-18,-30,-8,-2,-3,-4,-5,-6,165,-37,-34,-28,-14,-15,-19,-20,-21,-7,-10,-12,-13,165,165,-38,-39,-40,-41,-35,-36,-31,-32,-33,-29,-9,-11,]),'>':([58,70,72,76,78,86,87,88,89,90,94,95,96,101,153,154,155,157,158,201,214,217,218,223,224,225,226,227,228,229,230,231,232,233,257,261,262,],[-1,-28,-18,-30,-8,-2,-3,-4,-5,-6,166,-37,-34,-28,-14,-15,-19,-20,-21,-7,-10,-12,-13,166,166,-38,-39,-40,-41,-35,-36,-31,-32,-33,-29,-9,-11,]),'LE':([58,70,72,76,78,86,87,88,89,90,94,95,96,101,153,154,155,157,158,201,214,217,218,223,224,225,226,227,228,229,230,231,232,233,257,261,262,],[-1,-28,-18,-30,-8,-2,-3,-4,-5,-6,167,-37,-34,-28,-14,-15,-19,-20,-21,-7,-10,-12,-13,167,167,-38,-39,-40,-41,-35,-36,-31,-32,-33,-29,-9,-11,]),'GE':([58,70,72,76,78,86,87,88,89,90,94,95,96,101,153,154,155,157,158,201,214,217,218,223,224,225,226,227,228,229,230,231,232,233,257,261,262,],[-1,-28,-18,-30,-8,-2,-3,-4,-5,-6,168,-37,-34,-28,-14,-15,-19,-20,-21,-7,-10,-12,-13,168,168,-38,-39,-40,-41,-35,-36,-31,-32,-33,-29,-9,-11,]),'EQUAL':([58,70,72,76,78,86,87,88,89,90,93,94,95,96,101,153,154,155,157,158,201,214,217,218,222,223,224,225,226,227,228,229,230,231,232,233,257,261,262,],[-1,-28,-18,-30,-8,-2,-3,-4,-5,-6,163,-42,-37,-34,-28,-14,-15,-19,-20,-21,-7,-10,-12,-13,163,-43,-44,-38,-39,-40,-41,-35,-36,-31,-32,-33,-29,-9,-11,]),'NE':([58,70,72,76,78,86,87,88,89,90,93,94,95,96,101,153,154,155,157,158,201,214,217,218,222,223,224,225,226,227,228,229,230,231,232,233,257,261,262,],[-1,-28,-18,-30,-8,-2,-3,-4,-5,-6,164,-42,-37,-34,-28,-14,-15,-19,-20,-21,-7,-10,-12,-13,164,-43,-44,-38,-39,-40,-41,-35,-36,-31,-32,-33,-29,-9,-11,]),'^':([58,70,72,76,78,86,87,88,89,90,91,92,93,94,95,96,101,153,154,155,157,158,201,214,217,218,220,221,222,223,224,225,226,227,228,229,230,231,232,233,257,261,262,],[-1,-28,-18,-30,-8,-2,-3,-4,-5,-6,161,-47,-45,-42,-37,-34,-28,-14,-15,-19,-20,-21,-7,-10,-12,-13,161,-48,-46,-43,-44,-38,-39,-40,-41,-35,-36,-31,-32,-33,-29,-9,-11,]),'|':([58,70,72,76,78,85,86,87,88,89,90,91,92,93,94,95,96,101,153,154,155,157,158,201,214,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,257,261,262,],[-1,-28,-18,-30,-8,160,-2,-3,-4,-5,-6,-49,-47,-45,-42,-37,-34,-28,-14,-15,-19,-20,-21,-7,-10,-12,-13,160,-50,-48,-46,-43,-44,-38,-39,-40,-41,-35,-36,-31,-32,-33,-29,-9,-11,]),'AND':([58,70,72,76,77,78,85,86,87,88,89,90,91,92,93,94,95,96,101,153,154,155,157,158,201,212,214,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,257,261,262,],[-1,-28,-18,-30,159,-8,-51,-2,-3,-4,-5,-6,-49,-47,-45,-42,-37,-34,-28,-14,-15,-19,-20,-21,-7,159,-10,-12,-13,-52,-50,-48,-46,-43,-44,-38,-39,-40,-41,-35,-36,-31,-32,-33,-29,-9,-11,]),'?':([58,70,71,72,76,77,78,85,86,87,88,89,90,91,92,93,94,95,96,101,153,154,155,157,158,201,212,214,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,257,261,262,],[-1,-28,147,-18,-30,-53,-8,-51,-2,-3,-4,-5,-6,-49,-47,-45,-42,-37,-34,-28,-14,-15,-19,-20,-21,-7,-54,-10,-12,-13,-52,-50,-48,-46,-43,-44,-38,-39,-40,-41,-35,-36,-31,-32,-33,-29,-9,-11,]),'OR':([58,70,71,72,76,77,78,85,86,87,88,89,90,91,92,93,94,95,96,101,153,154,155,157,158,201,212,214,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,257,261,262,],[-1,-28,148,-18,-30,-53,-8,-51,-2,-3,-4,-5,-6,-49,-47,-45,-42,-37,-34,-28,-14,-15,-19,-20,-21,-7,-54,-10,-12,-13,-52,-50,-48,-46,-43,-44,-38,-39,-40,-41,-35,-36,-31,-32,-33,-29,-9,-11,]),'OUT':([58,59,86,87,88,89,90,122,198,201,255,],[-1,123,-2,-3,-4,-5,-6,197,-173,-7,-174,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'translation_unit':([0,],[1,]),'external_declaration':([0,1,],[2,21,]),'function_definition':([0,1,111,188,],[3,3,190,190,]),'declaration':([0,1,6,22,26,29,39,47,111,188,],[4,4,28,28,45,28,45,45,191,191,]),'declaration_specifiers':([0,1,6,7,22,26,29,34,39,47,111,176,183,188,205,238,],[5,5,30,31,30,30,30,108,30,30,5,108,108,5,108,108,]),'declarator':([0,1,5,18,30,43,108,111,183,187,188,272,],[6,6,22,36,97,97,179,6,36,248,6,248,]),'type_specifier':([0,1,6,7,22,26,29,34,39,47,62,102,110,111,130,176,183,185,188,205,238,],[7,7,7,7,7,7,7,7,7,7,130,130,130,7,130,7,7,130,7,7,7,]),'pointer':([0,1,5,16,18,30,43,108,111,129,183,187,188,205,272,],[8,8,8,35,8,8,8,181,8,204,181,8,8,204,8,]),'direct_declarator':([0,1,5,8,18,30,43,108,111,181,183,187,188,272,],[9,9,9,32,9,9,9,9,9,32,9,9,9,9,]),'struct_specifier':([0,1,6,7,22,26,29,34,39,47,62,102,110,111,130,176,183,185,188,205,238,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'class_definition':([0,1,6,7,22,26,29,34,39,47,62,102,110,111,130,176,183,185,188,205,238,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'init_declarator_list':([5,30,],[24,24,]),'init_declarator':([5,30,43,],[25,25,116,]),'declaration_list':([6,22,29,],[26,39,47,]),'compound_statement':([6,22,26,29,39,46,47,120,256,258,286,287,],[27,40,44,51,112,51,51,51,51,51,51,51,]),'statement_list':([29,47,],[46,120,]),'statement':([29,46,47,120,256,258,286,287,],[48,118,48,118,277,278,288,289,]),'input_statement':([29,46,47,120,256,258,286,287,],[49,49,49,49,49,49,49,49,]),'output_statement':([29,46,47,120,256,258,286,287,],[50,50,50,50,50,50,50,50,]),'expression_statement':([29,46,47,120,132,208,256,258,286,287,],[52,52,52,52,208,259,52,52,52,52,]),'selection_statement':([29,46,47,120,256,258,286,287,],[53,53,53,53,53,53,53,53,]),'iteration_statement':([29,46,47,120,256,258,286,287,],[54,54,54,54,54,54,54,54,]),'jump_statement':([29,46,47,120,256,258,286,287,],[55,55,55,55,55,55,55,55,]),'expression':([29,46,47,62,67,102,120,126,131,132,147,149,156,208,256,258,259,286,287,],[60,60,60,127,136,127,60,200,207,60,211,213,127,60,60,60,279,60,60,]),'assignment_expression':([29,41,46,47,62,67,102,115,120,125,126,131,132,137,147,149,150,156,208,253,256,258,259,263,286,287,],[68,114,68,68,68,68,68,114,68,199,68,68,68,210,68,68,216,68,68,114,68,68,68,281,68,68,]),'conditional_expression':([29,33,41,46,47,62,67,102,115,120,125,126,131,132,137,147,149,150,156,184,208,237,249,253,256,258,259,260,263,273,286,287,],[69,100,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,100,69,100,100,69,69,69,69,280,69,100,69,69,]),'unary_expression':([29,33,41,46,47,62,67,73,74,75,102,115,120,125,126,131,132,137,147,148,149,150,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,184,202,208,237,249,253,256,258,259,260,263,273,286,287,],[70,101,70,70,70,70,70,155,157,101,70,70,70,70,70,70,70,70,70,101,70,70,70,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,70,101,101,70,70,70,70,101,70,101,70,70,]),'logical_or_expression':([29,33,41,46,47,62,67,102,115,120,125,126,131,132,137,147,149,150,156,184,208,237,249,253,256,258,259,260,263,273,286,287,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'postfix_expression':([29,33,41,46,47,62,67,73,74,75,102,115,120,125,126,131,132,137,147,148,149,150,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,184,202,208,237,249,253,256,258,259,260,263,273,286,287,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'unary_operator':([29,33,41,46,47,62,67,73,74,75,102,115,120,125,126,131,132,137,147,148,149,150,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,184,202,208,237,249,253,256,258,259,260,263,273,286,287,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'cast_expression':([29,33,41,46,47,62,67,75,102,115,120,125,126,131,132,137,147,148,149,150,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,184,202,208,237,249,253,256,258,259,260,263,273,286,287,],[76,76,76,76,76,76,76,158,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,231,232,233,76,257,76,76,76,76,76,76,76,76,76,76,76,76,]),'logical_and_expression':([29,33,41,46,47,62,67,102,115,120,125,126,131,132,137,147,148,149,150,156,184,208,237,249,253,256,258,259,260,263,273,286,287,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,212,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'primary_expression':([29,33,41,46,47,62,67,73,74,75,102,115,120,123,125,126,131,132,137,147,148,149,150,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,184,197,202,208,237,249,253,256,258,259,260,263,273,286,287,],[78,78,78,78,78,78,78,78,78,78,78,78,78,198,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,255,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'inclusive_or_expression':([29,33,41,46,47,62,67,102,115,120,125,126,131,132,137,147,148,149,150,156,159,184,208,237,249,253,256,258,259,260,263,273,286,287,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,219,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'exclusive_or_expression':([29,33,41,46,47,62,67,102,115,120,125,126,131,132,137,147,148,149,150,156,159,160,184,208,237,249,253,256,258,259,260,263,273,286,287,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,220,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'and_expression':([29,33,41,46,47,62,67,102,115,120,125,126,131,132,137,147,148,149,150,156,159,160,161,184,208,237,249,253,256,258,259,260,263,273,286,287,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,221,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'equality_expression':([29,33,41,46,47,62,67,102,115,120,125,126,131,132,137,147,148,149,150,156,159,160,161,162,184,208,237,249,253,256,258,259,260,263,273,286,287,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,222,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'relational_expression':([29,33,41,46,47,62,67,102,115,120,125,126,131,132,137,147,148,149,150,156,159,160,161,162,163,164,184,208,237,249,253,256,258,259,260,263,273,286,287,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,223,224,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'additive_expression':([29,33,41,46,47,62,67,102,115,120,125,126,131,132,137,147,148,149,150,156,159,160,161,162,163,164,165,166,167,168,184,208,237,249,253,256,258,259,260,263,273,286,287,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,225,226,227,228,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'multiplicative_expression':([29,33,41,46,47,62,67,102,115,120,125,126,131,132,137,147,148,149,150,156,159,160,161,162,163,164,165,166,167,168,169,170,184,208,237,249,253,256,258,259,260,263,273,286,287,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,229,230,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'constant_expression':([33,184,237,249,273,],[98,243,265,274,285,]),'parameter_list':([34,183,205,238,],[103,241,241,267,]),'identifier_list':([34,],[105,]),'parameter_declaration':([34,176,183,205,238,],[106,234,106,106,106,]),'initializer':([41,115,253,],[113,193,276,]),'output_list':([59,],[122,]),'type_name':([62,102,],[128,128,]),'specifier_qualifier_list':([62,102,110,130,185,],[129,129,187,206,187,]),'assignment_operator':([70,],[137,]),'abstract_declarator':([108,129,183,205,],[180,203,240,240,]),'direct_abstract_declarator':([108,129,181,183,204,205,],[182,182,236,182,236,182,]),'struct_declaration_list':([110,],[185,]),'struct_declaration':([110,185,],[186,245,]),'class_member_list':([111,],[188,]),'class_member':([111,188,],[189,251,]),'initializer_list':([115,],[192,]),'argument_expression_list':([150,],[215,]),'struct_declarator_list':([187,],[246,]),'struct_declarator':([187,272,],[247,284,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> translation_unit","S'",1,None,None,None),
  ('primary_expression -> ID','primary_expression',1,'p_primary_expression','parser.py',17),
  ('primary_expression -> INTEGER','primary_expression',1,'p_primary_expression','parser.py',18),
  ('primary_expression -> STRING','primary_expression',1,'p_primary_expression','parser.py',19),
  ('primary_expression -> TRUE','primary_expression',1,'p_primary_expression','parser.py',20),
  ('primary_expression -> FALSE','primary_expression',1,'p_primary_expression','parser.py',21),
  ('primary_expression -> CHARACTER','primary_expression',1,'p_primary_expression','parser.py',22),
  ('primary_expression -> ( expression )','primary_expression',3,'p_primary_expression','parser.py',23),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','parser.py',27),
  ('postfix_expression -> postfix_expression [ expression ]','postfix_expression',4,'p_postfix_expression','parser.py',28),
  ('postfix_expression -> postfix_expression ( )','postfix_expression',3,'p_postfix_expression','parser.py',29),
  ('postfix_expression -> postfix_expression ( argument_expression_list )','postfix_expression',4,'p_postfix_expression','parser.py',30),
  ('postfix_expression -> postfix_expression . ID','postfix_expression',3,'p_postfix_expression','parser.py',31),
  ('postfix_expression -> postfix_expression PTR ID','postfix_expression',3,'p_postfix_expression','parser.py',32),
  ('postfix_expression -> postfix_expression INC','postfix_expression',2,'p_postfix_expression','parser.py',33),
  ('postfix_expression -> postfix_expression DEC','postfix_expression',2,'p_postfix_expression','parser.py',34),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','parser.py',38),
  ('argument_expression_list -> argument_expression_list , assignment_expression','argument_expression_list',3,'p_argument_expression_list','parser.py',39),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','parser.py',43),
  ('unary_expression -> INC unary_expression','unary_expression',2,'p_unary_expression','parser.py',44),
  ('unary_expression -> DEC unary_expression','unary_expression',2,'p_unary_expression','parser.py',45),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression','parser.py',46),
  ('unary_operator -> &','unary_operator',1,'p_unary_operator','parser.py',50),
  ('unary_operator -> *','unary_operator',1,'p_unary_operator','parser.py',51),
  ('unary_operator -> +','unary_operator',1,'p_unary_operator','parser.py',52),
  ('unary_operator -> -','unary_operator',1,'p_unary_operator','parser.py',53),
  ('unary_operator -> ~','unary_operator',1,'p_unary_operator','parser.py',54),
  ('unary_operator -> !','unary_operator',1,'p_unary_operator','parser.py',55),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','parser.py',59),
  ('cast_expression -> ( type_name ) cast_expression','cast_expression',4,'p_cast_expression','parser.py',60),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','parser.py',64),
  ('multiplicative_expression -> multiplicative_expression * cast_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',65),
  ('multiplicative_expression -> multiplicative_expression / cast_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',66),
  ('multiplicative_expression -> multiplicative_expression % cast_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',67),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','parser.py',71),
  ('additive_expression -> additive_expression + multiplicative_expression','additive_expression',3,'p_additive_expression','parser.py',72),
  ('additive_expression -> additive_expression - multiplicative_expression','additive_expression',3,'p_additive_expression','parser.py',73),
  ('relational_expression -> additive_expression','relational_expression',1,'p_relational_expression','parser.py',77),
  ('relational_expression -> relational_expression < additive_expression','relational_expression',3,'p_relational_expression','parser.py',78),
  ('relational_expression -> relational_expression > additive_expression','relational_expression',3,'p_relational_expression','parser.py',79),
  ('relational_expression -> relational_expression LE additive_expression','relational_expression',3,'p_relational_expression','parser.py',80),
  ('relational_expression -> relational_expression GE additive_expression','relational_expression',3,'p_relational_expression','parser.py',81),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','parser.py',85),
  ('equality_expression -> equality_expression EQUAL relational_expression','equality_expression',3,'p_equality_expression','parser.py',86),
  ('equality_expression -> equality_expression NE relational_expression','equality_expression',3,'p_equality_expression','parser.py',87),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','parser.py',91),
  ('and_expression -> and_expression & equality_expression','and_expression',3,'p_and_expression','parser.py',92),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','parser.py',96),
  ('exclusive_or_expression -> exclusive_or_expression ^ and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','parser.py',97),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','parser.py',101),
  ('inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','parser.py',102),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression','parser.py',106),
  ('logical_and_expression -> logical_and_expression AND inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression','parser.py',107),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','parser.py',111),
  ('logical_or_expression -> logical_or_expression OR logical_and_expression','logical_or_expression',3,'p_logical_or_expression','parser.py',112),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','parser.py',116),
  ('conditional_expression -> logical_or_expression ? expression : conditional_expression','conditional_expression',5,'p_conditional_expression','parser.py',117),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','parser.py',121),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','parser.py',122),
  ('assignment_operator -> =','assignment_operator',1,'p_assignment_operator','parser.py',126),
  ('assignment_operator -> MUL_EQ','assignment_operator',1,'p_assignment_operator','parser.py',127),
  ('assignment_operator -> DIV_EQ','assignment_operator',1,'p_assignment_operator','parser.py',128),
  ('assignment_operator -> MOD_EQ','assignment_operator',1,'p_assignment_operator','parser.py',129),
  ('assignment_operator -> ADD_EQ','assignment_operator',1,'p_assignment_operator','parser.py',130),
  ('assignment_operator -> SUB_EQ','assignment_operator',1,'p_assignment_operator','parser.py',131),
  ('assignment_operator -> AND_EQ','assignment_operator',1,'p_assignment_operator','parser.py',132),
  ('assignment_operator -> XOR_EQ','assignment_operator',1,'p_assignment_operator','parser.py',133),
  ('assignment_operator -> OR_EQ','assignment_operator',1,'p_assignment_operator','parser.py',134),
  ('expression -> assignment_expression','expression',1,'p_expression','parser.py',138),
  ('expression -> expression , assignment_expression','expression',3,'p_expression','parser.py',139),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','parser.py',143),
  ('declaration -> declaration_specifiers ;','declaration',2,'p_declaration','parser.py',147),
  ('declaration -> declaration_specifiers init_declarator_list ;','declaration',3,'p_declaration','parser.py',148),
  ('declaration_specifiers -> <empty>','declaration_specifiers',0,'p_declaration_specifiers','parser.py',152),
  ('declaration_specifiers -> type_specifier','declaration_specifiers',1,'p_declaration_specifiers','parser.py',153),
  ('declaration_specifiers -> type_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','parser.py',154),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','parser.py',158),
  ('init_declarator_list -> init_declarator_list , init_declarator','init_declarator_list',3,'p_init_declarator_list','parser.py',159),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','parser.py',163),
  ('init_declarator -> declarator = initializer','init_declarator',3,'p_init_declarator','parser.py',164),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','parser.py',168),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','parser.py',169),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',170),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','parser.py',171),
  ('type_specifier -> struct_specifier','type_specifier',1,'p_type_specifier','parser.py',172),
  ('type_specifier -> class_definition','type_specifier',1,'p_type_specifier','parser.py',173),
  ('class_definition -> CLASS ID { class_member_list }','class_definition',5,'p_class_definition','parser.py',177),
  ('class_member_list -> class_member','class_member_list',1,'p_class_member_list','parser.py',181),
  ('class_member_list -> class_member_list class_member','class_member_list',2,'p_class_member_list','parser.py',182),
  ('class_member -> function_definition','class_member',1,'p_class_member','parser.py',186),
  ('class_member -> declaration','class_member',1,'p_class_member','parser.py',187),
  ('struct_specifier -> STRUCT ID { struct_declaration_list }','struct_specifier',5,'p_struct_specifier','parser.py',191),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','parser.py',195),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','parser.py',196),
  ('struct_declaration -> specifier_qualifier_list struct_declarator_list ;','struct_declaration',3,'p_struct_declaration','parser.py',200),
  ('specifier_qualifier_list -> type_specifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list','parser.py',204),
  ('specifier_qualifier_list -> type_specifier','specifier_qualifier_list',1,'p_specifier_qualifier_list','parser.py',205),
  ('struct_declarator_list -> struct_declarator','struct_declarator_list',1,'p_struct_declarator_list','parser.py',209),
  ('struct_declarator_list -> struct_declarator_list , struct_declarator','struct_declarator_list',3,'p_struct_declarator_list','parser.py',210),
  ('struct_declarator -> declarator','struct_declarator',1,'p_struct_declarator','parser.py',214),
  ('struct_declarator -> : constant_expression','struct_declarator',2,'p_struct_declarator','parser.py',215),
  ('struct_declarator -> declarator : constant_expression','struct_declarator',3,'p_struct_declarator','parser.py',216),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','parser.py',220),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','parser.py',221),
  ('direct_declarator -> ID','direct_declarator',1,'p_direct_declarator','parser.py',225),
  ('direct_declarator -> ( declarator )','direct_declarator',3,'p_direct_declarator','parser.py',226),
  ('direct_declarator -> direct_declarator [ constant_expression ]','direct_declarator',4,'p_direct_declarator','parser.py',227),
  ('direct_declarator -> direct_declarator [ ]','direct_declarator',3,'p_direct_declarator','parser.py',228),
  ('direct_declarator -> direct_declarator ( parameter_list )','direct_declarator',4,'p_direct_declarator','parser.py',229),
  ('direct_declarator -> direct_declarator ( identifier_list )','direct_declarator',4,'p_direct_declarator','parser.py',230),
  ('direct_declarator -> direct_declarator ( )','direct_declarator',3,'p_direct_declarator','parser.py',231),
  ('pointer -> *','pointer',1,'p_pointer','parser.py',235),
  ('pointer -> * pointer','pointer',2,'p_pointer','parser.py',236),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','parser.py',240),
  ('parameter_list -> parameter_list , parameter_declaration','parameter_list',3,'p_parameter_list','parser.py',241),
  ('parameter_declaration -> declaration_specifiers declarator','parameter_declaration',2,'p_parameter_declaration','parser.py',245),
  ('parameter_declaration -> declaration_specifiers abstract_declarator','parameter_declaration',2,'p_parameter_declaration','parser.py',246),
  ('parameter_declaration -> declaration_specifiers','parameter_declaration',1,'p_parameter_declaration','parser.py',247),
  ('identifier_list -> ID','identifier_list',1,'p_identifier_list','parser.py',251),
  ('identifier_list -> identifier_list , ID','identifier_list',3,'p_identifier_list','parser.py',252),
  ('type_name -> specifier_qualifier_list','type_name',1,'p_type_name','parser.py',256),
  ('type_name -> specifier_qualifier_list abstract_declarator','type_name',2,'p_type_name','parser.py',257),
  ('abstract_declarator -> pointer','abstract_declarator',1,'p_abstract_declarator','parser.py',261),
  ('abstract_declarator -> direct_abstract_declarator','abstract_declarator',1,'p_abstract_declarator','parser.py',262),
  ('abstract_declarator -> pointer direct_abstract_declarator','abstract_declarator',2,'p_abstract_declarator','parser.py',263),
  ('direct_abstract_declarator -> ( abstract_declarator )','direct_abstract_declarator',3,'p_direct_abstract_declarator','parser.py',267),
  ('direct_abstract_declarator -> [ ]','direct_abstract_declarator',2,'p_direct_abstract_declarator','parser.py',268),
  ('direct_abstract_declarator -> [ constant_expression ]','direct_abstract_declarator',3,'p_direct_abstract_declarator','parser.py',269),
  ('direct_abstract_declarator -> direct_abstract_declarator [ ]','direct_abstract_declarator',3,'p_direct_abstract_declarator','parser.py',270),
  ('direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ]','direct_abstract_declarator',4,'p_direct_abstract_declarator','parser.py',271),
  ('direct_abstract_declarator -> ( )','direct_abstract_declarator',2,'p_direct_abstract_declarator','parser.py',272),
  ('direct_abstract_declarator -> ( parameter_list )','direct_abstract_declarator',3,'p_direct_abstract_declarator','parser.py',273),
  ('direct_abstract_declarator -> direct_abstract_declarator ( )','direct_abstract_declarator',3,'p_direct_abstract_declarator','parser.py',274),
  ('direct_abstract_declarator -> direct_abstract_declarator ( parameter_list )','direct_abstract_declarator',4,'p_direct_abstract_declarator','parser.py',275),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','parser.py',279),
  ('initializer -> { initializer_list }','initializer',3,'p_initializer','parser.py',280),
  ('initializer -> { initializer_list , }','initializer',4,'p_initializer','parser.py',281),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','parser.py',285),
  ('initializer_list -> initializer_list , initializer','initializer_list',3,'p_initializer_list','parser.py',286),
  ('statement -> input_statement','statement',1,'p_statement','parser.py',290),
  ('statement -> output_statement','statement',1,'p_statement','parser.py',291),
  ('statement -> compound_statement','statement',1,'p_statement','parser.py',292),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',293),
  ('statement -> selection_statement','statement',1,'p_statement','parser.py',294),
  ('statement -> iteration_statement','statement',1,'p_statement','parser.py',295),
  ('statement -> jump_statement','statement',1,'p_statement','parser.py',296),
  ('compound_statement -> { statement_list }','compound_statement',3,'p_compound_statement','parser.py',300),
  ('compound_statement -> { declaration_list }','compound_statement',3,'p_compound_statement','parser.py',301),
  ('compound_statement -> { declaration_list statement_list }','compound_statement',4,'p_compound_statement','parser.py',302),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',306),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',307),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',311),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',312),
  ('expression_statement -> ;','expression_statement',1,'p_expression_statement','parser.py',316),
  ('expression_statement -> expression ;','expression_statement',2,'p_expression_statement','parser.py',317),
  ('selection_statement -> IF ( expression ) statement','selection_statement',5,'p_selection_statement','parser.py',321),
  ('selection_statement -> IF ( expression ) statement ELSE statement','selection_statement',7,'p_selection_statement','parser.py',322),
  ('iteration_statement -> WHILE ( expression ) statement','iteration_statement',5,'p_iteration_statement','parser.py',326),
  ('iteration_statement -> FOR ( expression_statement expression_statement expression ) statement','iteration_statement',7,'p_iteration_statement','parser.py',327),
  ('jump_statement -> CONTINUE ;','jump_statement',2,'p_jump_statement','parser.py',331),
  ('jump_statement -> BREAK ;','jump_statement',2,'p_jump_statement','parser.py',332),
  ('jump_statement -> RETURN ;','jump_statement',2,'p_jump_statement','parser.py',333),
  ('jump_statement -> RETURN expression ;','jump_statement',3,'p_jump_statement','parser.py',334),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','parser.py',338),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','parser.py',339),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','parser.py',343),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration','parser.py',344),
  ('function_definition -> declaration_specifiers declarator declaration_list compound_statement','function_definition',4,'p_function_definition','parser.py',348),
  ('function_definition -> declaration_specifiers declarator compound_statement','function_definition',3,'p_function_definition','parser.py',349),
  ('function_definition -> declarator declaration_list compound_statement','function_definition',3,'p_function_definition','parser.py',350),
  ('function_definition -> declarator compound_statement','function_definition',2,'p_function_definition','parser.py',351),
  ('input_statement -> CIN IN ID ;','input_statement',4,'p_input_statement','parser.py',355),
  ('output_statement -> COUT output_list ;','output_statement',3,'p_output_statement','parser.py',359),
  ('output_list -> OUT primary_expression','output_list',2,'p_output_list','parser.py',363),
  ('output_list -> output_list OUT primary_expression','output_list',3,'p_output_list','parser.py',364),
]
