Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> translation_unit
Rule 1     primary_expression -> ID
Rule 2     primary_expression -> INTEGER
Rule 3     primary_expression -> STRING
Rule 4     primary_expression -> TRUE
Rule 5     primary_expression -> FALSE
Rule 6     primary_expression -> CHARACTER
Rule 7     primary_expression -> ( expression )
Rule 8     postfix_expression -> primary_expression
Rule 9     postfix_expression -> postfix_expression [ expression ]
Rule 10    postfix_expression -> postfix_expression ( )
Rule 11    postfix_expression -> postfix_expression ( argument_expression_list )
Rule 12    postfix_expression -> postfix_expression . ID
Rule 13    postfix_expression -> postfix_expression PTR ID
Rule 14    postfix_expression -> postfix_expression INC
Rule 15    postfix_expression -> postfix_expression DEC
Rule 16    argument_expression_list -> assignment_expression
Rule 17    argument_expression_list -> argument_expression_list , assignment_expression
Rule 18    unary_expression -> postfix_expression
Rule 19    unary_expression -> INC unary_expression
Rule 20    unary_expression -> DEC unary_expression
Rule 21    unary_expression -> unary_operator cast_expression
Rule 22    unary_operator -> &
Rule 23    unary_operator -> *
Rule 24    unary_operator -> +
Rule 25    unary_operator -> -
Rule 26    unary_operator -> ~
Rule 27    unary_operator -> !
Rule 28    cast_expression -> unary_expression
Rule 29    cast_expression -> ( type_name ) cast_expression
Rule 30    multiplicative_expression -> cast_expression
Rule 31    multiplicative_expression -> multiplicative_expression * cast_expression
Rule 32    multiplicative_expression -> multiplicative_expression / cast_expression
Rule 33    multiplicative_expression -> multiplicative_expression % cast_expression
Rule 34    additive_expression -> multiplicative_expression
Rule 35    additive_expression -> additive_expression + multiplicative_expression
Rule 36    additive_expression -> additive_expression - multiplicative_expression
Rule 37    relational_expression -> additive_expression
Rule 38    relational_expression -> relational_expression < additive_expression
Rule 39    relational_expression -> relational_expression > additive_expression
Rule 40    relational_expression -> relational_expression LE additive_expression
Rule 41    relational_expression -> relational_expression GE additive_expression
Rule 42    equality_expression -> relational_expression
Rule 43    equality_expression -> equality_expression EQUAL relational_expression
Rule 44    equality_expression -> equality_expression NE relational_expression
Rule 45    and_expression -> equality_expression
Rule 46    and_expression -> and_expression & equality_expression
Rule 47    exclusive_or_expression -> and_expression
Rule 48    exclusive_or_expression -> exclusive_or_expression ^ and_expression
Rule 49    inclusive_or_expression -> exclusive_or_expression
Rule 50    inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression
Rule 51    logical_and_expression -> inclusive_or_expression
Rule 52    logical_and_expression -> logical_and_expression AND inclusive_or_expression
Rule 53    logical_or_expression -> logical_and_expression
Rule 54    logical_or_expression -> logical_or_expression OR logical_and_expression
Rule 55    conditional_expression -> logical_or_expression
Rule 56    conditional_expression -> logical_or_expression ? expression : conditional_expression
Rule 57    assignment_expression -> conditional_expression
Rule 58    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 59    assignment_operator -> =
Rule 60    assignment_operator -> MUL_EQ
Rule 61    assignment_operator -> DIV_EQ
Rule 62    assignment_operator -> MOD_EQ
Rule 63    assignment_operator -> ADD_EQ
Rule 64    assignment_operator -> SUB_EQ
Rule 65    assignment_operator -> AND_EQ
Rule 66    assignment_operator -> XOR_EQ
Rule 67    assignment_operator -> OR_EQ
Rule 68    expression -> assignment_expression
Rule 69    expression -> expression , assignment_expression
Rule 70    constant_expression -> conditional_expression
Rule 71    declaration -> declaration_specifiers ;
Rule 72    declaration -> declaration_specifiers init_declarator_list ;
Rule 73    declaration_specifiers -> <empty>
Rule 74    declaration_specifiers -> type_specifier
Rule 75    declaration_specifiers -> type_specifier declaration_specifiers
Rule 76    init_declarator_list -> init_declarator
Rule 77    init_declarator_list -> init_declarator_list , init_declarator
Rule 78    init_declarator -> declarator
Rule 79    init_declarator -> declarator = initializer
Rule 80    type_specifier -> VOID
Rule 81    type_specifier -> CHAR
Rule 82    type_specifier -> INT
Rule 83    type_specifier -> BOOL
Rule 84    type_specifier -> struct_specifier
Rule 85    type_specifier -> class_definition
Rule 86    class_definition -> CLASS ID { class_member_list }
Rule 87    class_member_list -> class_member
Rule 88    class_member_list -> class_member_list class_member
Rule 89    class_member -> function_definition
Rule 90    class_member -> declaration
Rule 91    struct_specifier -> STRUCT ID { struct_declaration_list }
Rule 92    struct_declaration_list -> struct_declaration
Rule 93    struct_declaration_list -> struct_declaration_list struct_declaration
Rule 94    struct_declaration -> specifier_qualifier_list struct_declarator_list ;
Rule 95    specifier_qualifier_list -> type_specifier specifier_qualifier_list
Rule 96    specifier_qualifier_list -> type_specifier
Rule 97    struct_declarator_list -> struct_declarator
Rule 98    struct_declarator_list -> struct_declarator_list , struct_declarator
Rule 99    struct_declarator -> declarator
Rule 100   struct_declarator -> : constant_expression
Rule 101   struct_declarator -> declarator : constant_expression
Rule 102   declarator -> pointer direct_declarator
Rule 103   declarator -> direct_declarator
Rule 104   direct_declarator -> ID
Rule 105   direct_declarator -> ( declarator )
Rule 106   direct_declarator -> direct_declarator [ constant_expression ]
Rule 107   direct_declarator -> direct_declarator [ ]
Rule 108   direct_declarator -> direct_declarator ( parameter_list )
Rule 109   direct_declarator -> direct_declarator ( identifier_list )
Rule 110   direct_declarator -> direct_declarator ( )
Rule 111   pointer -> *
Rule 112   pointer -> * pointer
Rule 113   parameter_list -> parameter_declaration
Rule 114   parameter_list -> parameter_list , parameter_declaration
Rule 115   parameter_declaration -> declaration_specifiers declarator
Rule 116   parameter_declaration -> declaration_specifiers abstract_declarator
Rule 117   parameter_declaration -> declaration_specifiers
Rule 118   identifier_list -> ID
Rule 119   identifier_list -> identifier_list , ID
Rule 120   type_name -> specifier_qualifier_list
Rule 121   type_name -> specifier_qualifier_list abstract_declarator
Rule 122   abstract_declarator -> pointer
Rule 123   abstract_declarator -> direct_abstract_declarator
Rule 124   abstract_declarator -> pointer direct_abstract_declarator
Rule 125   direct_abstract_declarator -> ( abstract_declarator )
Rule 126   direct_abstract_declarator -> [ ]
Rule 127   direct_abstract_declarator -> [ constant_expression ]
Rule 128   direct_abstract_declarator -> direct_abstract_declarator [ ]
Rule 129   direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ]
Rule 130   direct_abstract_declarator -> ( )
Rule 131   direct_abstract_declarator -> ( parameter_list )
Rule 132   direct_abstract_declarator -> direct_abstract_declarator ( )
Rule 133   direct_abstract_declarator -> direct_abstract_declarator ( parameter_list )
Rule 134   initializer -> assignment_expression
Rule 135   initializer -> { initializer_list }
Rule 136   initializer -> { initializer_list , }
Rule 137   initializer_list -> initializer
Rule 138   initializer_list -> initializer_list , initializer
Rule 139   statement -> input_statement
Rule 140   statement -> output_statement
Rule 141   statement -> compound_statement
Rule 142   statement -> expression_statement
Rule 143   statement -> selection_statement
Rule 144   statement -> iteration_statement
Rule 145   statement -> jump_statement
Rule 146   compound_statement -> { statement_list }
Rule 147   compound_statement -> { declaration_list }
Rule 148   compound_statement -> { declaration_list statement_list }
Rule 149   declaration_list -> declaration
Rule 150   declaration_list -> declaration_list declaration
Rule 151   statement_list -> statement
Rule 152   statement_list -> statement_list statement
Rule 153   expression_statement -> ;
Rule 154   expression_statement -> expression ;
Rule 155   selection_statement -> IF ( expression ) statement
Rule 156   selection_statement -> IF ( expression ) statement ELSE statement
Rule 157   iteration_statement -> WHILE ( expression ) statement
Rule 158   iteration_statement -> FOR ( expression_statement expression_statement expression ) statement
Rule 159   jump_statement -> CONTINUE ;
Rule 160   jump_statement -> BREAK ;
Rule 161   jump_statement -> RETURN ;
Rule 162   jump_statement -> RETURN expression ;
Rule 163   translation_unit -> external_declaration
Rule 164   translation_unit -> translation_unit external_declaration
Rule 165   external_declaration -> function_definition
Rule 166   external_declaration -> declaration
Rule 167   function_definition -> declaration_specifiers declarator declaration_list compound_statement
Rule 168   function_definition -> declaration_specifiers declarator compound_statement
Rule 169   function_definition -> declarator declaration_list compound_statement
Rule 170   function_definition -> declarator compound_statement
Rule 171   input_statement -> CIN IN ID ;
Rule 172   output_statement -> COUT output_list ;
Rule 173   output_list -> OUT primary_expression
Rule 174   output_list -> output_list OUT primary_expression

Terminals, with rules where they appear

!                    : 27
%                    : 33
&                    : 22 46
(                    : 7 10 11 29 105 108 109 110 125 130 131 132 133 155 156 157 158
)                    : 7 10 11 29 105 108 109 110 125 130 131 132 133 155 156 157 158
*                    : 23 31 111 112
+                    : 24 35
,                    : 17 69 77 98 114 119 136 138
-                    : 25 36
.                    : 12
/                    : 32
:                    : 56 100 101
;                    : 71 72 94 153 154 159 160 161 162 171 172
<                    : 38
=                    : 59 79
>                    : 39
?                    : 56
ADD_EQ               : 63
AND                  : 52
AND_EQ               : 65
BOOL                 : 83
BREAK                : 160
CHAR                 : 81
CHARACTER            : 6
CIN                  : 171
CLASS                : 86
CONTINUE             : 159
COUT                 : 172
DEC                  : 15 20
DIV_EQ               : 61
ELSE                 : 156
EQUAL                : 43
FALSE                : 5
FOR                  : 158
GE                   : 41
ID                   : 1 12 13 86 91 104 118 119 171
IF                   : 155 156
IN                   : 171
INC                  : 14 19
INT                  : 82
INTEGER              : 2
LE                   : 40
MOD_EQ               : 62
MUL_EQ               : 60
NE                   : 44
OR                   : 54
OR_EQ                : 67
OUT                  : 173 174
PTR                  : 13
RETURN               : 161 162
STRING               : 3
STRUCT               : 91
SUB_EQ               : 64
TRUE                 : 4
VOID                 : 80
WHILE                : 157
XOR_EQ               : 66
[                    : 9 106 107 126 127 128 129
]                    : 9 106 107 126 127 128 129
^                    : 48
error                : 
{                    : 86 91 135 136 146 147 148
|                    : 50
}                    : 86 91 135 136 146 147 148
~                    : 26

Nonterminals, with rules where they appear

abstract_declarator  : 116 121 125
additive_expression  : 35 36 37 38 39 40 41
and_expression       : 46 47 48
argument_expression_list : 11 17
assignment_expression : 16 17 58 68 69 134
assignment_operator  : 58
cast_expression      : 21 29 30 31 32 33
class_definition     : 85
class_member         : 87 88
class_member_list    : 86 88
compound_statement   : 141 167 168 169 170
conditional_expression : 56 57 70
constant_expression  : 100 101 106 127 129
declaration          : 90 149 150 166
declaration_list     : 147 148 150 167 169
declaration_specifiers : 71 72 75 115 116 117 167 168
declarator           : 78 79 99 101 105 115 167 168 169 170
direct_abstract_declarator : 123 124 128 129 132 133
direct_declarator    : 102 103 106 107 108 109 110
equality_expression  : 43 44 45 46
exclusive_or_expression : 48 49 50
expression           : 7 9 56 69 154 155 156 157 158 162
expression_statement : 142 158 158
external_declaration : 163 164
function_definition  : 89 165
identifier_list      : 109 119
inclusive_or_expression : 50 51 52
init_declarator      : 76 77
init_declarator_list : 72 77
initializer          : 79 137 138
initializer_list     : 135 136 138
input_statement      : 139
iteration_statement  : 144
jump_statement       : 145
logical_and_expression : 52 53 54
logical_or_expression : 54 55 56
multiplicative_expression : 31 32 33 34 35 36
output_list          : 172 174
output_statement     : 140
parameter_declaration : 113 114
parameter_list       : 108 114 131 133
pointer              : 102 112 122 124
postfix_expression   : 9 10 11 12 13 14 15 18
primary_expression   : 8 173 174
relational_expression : 38 39 40 41 42 43 44
selection_statement  : 143
specifier_qualifier_list : 94 95 120 121
statement            : 151 152 155 156 156 157 158
statement_list       : 146 148 152
struct_declaration   : 92 93
struct_declaration_list : 91 93
struct_declarator    : 97 98
struct_declarator_list : 94 98
struct_specifier     : 84
translation_unit     : 164 0
type_name            : 29
type_specifier       : 74 75 95 96
unary_expression     : 19 20 28 58
unary_operator       : 21

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (163) translation_unit -> . external_declaration
    (164) translation_unit -> . translation_unit external_declaration
    (165) external_declaration -> . function_definition
    (166) external_declaration -> . declaration
    (167) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (168) function_definition -> . declaration_specifiers declarator compound_statement
    (169) function_definition -> . declarator declaration_list compound_statement
    (170) function_definition -> . declarator compound_statement
    (71) declaration -> . declaration_specifiers ;
    (72) declaration -> . declaration_specifiers init_declarator_list ;
    (73) declaration_specifiers -> .
    (74) declaration_specifiers -> . type_specifier
    (75) declaration_specifiers -> . type_specifier declaration_specifiers
    (102) declarator -> . pointer direct_declarator
    (103) declarator -> . direct_declarator
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . INT
    (83) type_specifier -> . BOOL
    (84) type_specifier -> . struct_specifier
    (85) type_specifier -> . class_definition
    (111) pointer -> . *
    (112) pointer -> . * pointer
    (104) direct_declarator -> . ID
    (105) direct_declarator -> . ( declarator )
    (106) direct_declarator -> . direct_declarator [ constant_expression ]
    (107) direct_declarator -> . direct_declarator [ ]
    (108) direct_declarator -> . direct_declarator ( parameter_list )
    (109) direct_declarator -> . direct_declarator ( identifier_list )
    (110) direct_declarator -> . direct_declarator ( )
    (91) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (86) class_definition -> . CLASS ID { class_member_list }

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    ;               reduce using rule 73 (declaration_specifiers -> .)
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    *               shift and go to state 16
    ID              shift and go to state 17
    (               shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20

  ! *               [ reduce using rule 73 (declaration_specifiers -> .) ]
  ! ID              [ reduce using rule 73 (declaration_specifiers -> .) ]
  ! (               [ reduce using rule 73 (declaration_specifiers -> .) ]

    translation_unit               shift and go to state 1
    external_declaration           shift and go to state 2
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    declaration_specifiers         shift and go to state 5
    declarator                     shift and go to state 6
    type_specifier                 shift and go to state 7
    pointer                        shift and go to state 8
    direct_declarator              shift and go to state 9
    struct_specifier               shift and go to state 14
    class_definition               shift and go to state 15

state 1

    (0) S' -> translation_unit .
    (164) translation_unit -> translation_unit . external_declaration
    (165) external_declaration -> . function_definition
    (166) external_declaration -> . declaration
    (167) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (168) function_definition -> . declaration_specifiers declarator compound_statement
    (169) function_definition -> . declarator declaration_list compound_statement
    (170) function_definition -> . declarator compound_statement
    (71) declaration -> . declaration_specifiers ;
    (72) declaration -> . declaration_specifiers init_declarator_list ;
    (73) declaration_specifiers -> .
    (74) declaration_specifiers -> . type_specifier
    (75) declaration_specifiers -> . type_specifier declaration_specifiers
    (102) declarator -> . pointer direct_declarator
    (103) declarator -> . direct_declarator
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . INT
    (83) type_specifier -> . BOOL
    (84) type_specifier -> . struct_specifier
    (85) type_specifier -> . class_definition
    (111) pointer -> . *
    (112) pointer -> . * pointer
    (104) direct_declarator -> . ID
    (105) direct_declarator -> . ( declarator )
    (106) direct_declarator -> . direct_declarator [ constant_expression ]
    (107) direct_declarator -> . direct_declarator [ ]
    (108) direct_declarator -> . direct_declarator ( parameter_list )
    (109) direct_declarator -> . direct_declarator ( identifier_list )
    (110) direct_declarator -> . direct_declarator ( )
    (91) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (86) class_definition -> . CLASS ID { class_member_list }

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    ;               reduce using rule 73 (declaration_specifiers -> .)
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    *               shift and go to state 16
    ID              shift and go to state 17
    (               shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20

  ! *               [ reduce using rule 73 (declaration_specifiers -> .) ]
  ! ID              [ reduce using rule 73 (declaration_specifiers -> .) ]
  ! (               [ reduce using rule 73 (declaration_specifiers -> .) ]

    external_declaration           shift and go to state 21
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    declaration_specifiers         shift and go to state 5
    declarator                     shift and go to state 6
    type_specifier                 shift and go to state 7
    pointer                        shift and go to state 8
    direct_declarator              shift and go to state 9
    struct_specifier               shift and go to state 14
    class_definition               shift and go to state 15

state 2

    (163) translation_unit -> external_declaration .

    VOID            reduce using rule 163 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 163 (translation_unit -> external_declaration .)
    INT             reduce using rule 163 (translation_unit -> external_declaration .)
    BOOL            reduce using rule 163 (translation_unit -> external_declaration .)
    *               reduce using rule 163 (translation_unit -> external_declaration .)
    ID              reduce using rule 163 (translation_unit -> external_declaration .)
    (               reduce using rule 163 (translation_unit -> external_declaration .)
    STRUCT          reduce using rule 163 (translation_unit -> external_declaration .)
    CLASS           reduce using rule 163 (translation_unit -> external_declaration .)
    $end            reduce using rule 163 (translation_unit -> external_declaration .)
    ;               reduce using rule 163 (translation_unit -> external_declaration .)


state 3

    (165) external_declaration -> function_definition .

    VOID            reduce using rule 165 (external_declaration -> function_definition .)
    CHAR            reduce using rule 165 (external_declaration -> function_definition .)
    INT             reduce using rule 165 (external_declaration -> function_definition .)
    BOOL            reduce using rule 165 (external_declaration -> function_definition .)
    *               reduce using rule 165 (external_declaration -> function_definition .)
    ID              reduce using rule 165 (external_declaration -> function_definition .)
    (               reduce using rule 165 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 165 (external_declaration -> function_definition .)
    CLASS           reduce using rule 165 (external_declaration -> function_definition .)
    $end            reduce using rule 165 (external_declaration -> function_definition .)
    ;               reduce using rule 165 (external_declaration -> function_definition .)


state 4

    (166) external_declaration -> declaration .

    VOID            reduce using rule 166 (external_declaration -> declaration .)
    CHAR            reduce using rule 166 (external_declaration -> declaration .)
    INT             reduce using rule 166 (external_declaration -> declaration .)
    BOOL            reduce using rule 166 (external_declaration -> declaration .)
    *               reduce using rule 166 (external_declaration -> declaration .)
    ID              reduce using rule 166 (external_declaration -> declaration .)
    (               reduce using rule 166 (external_declaration -> declaration .)
    STRUCT          reduce using rule 166 (external_declaration -> declaration .)
    CLASS           reduce using rule 166 (external_declaration -> declaration .)
    $end            reduce using rule 166 (external_declaration -> declaration .)
    ;               reduce using rule 166 (external_declaration -> declaration .)


state 5

    (167) function_definition -> declaration_specifiers . declarator declaration_list compound_statement
    (168) function_definition -> declaration_specifiers . declarator compound_statement
    (71) declaration -> declaration_specifiers . ;
    (72) declaration -> declaration_specifiers . init_declarator_list ;
    (102) declarator -> . pointer direct_declarator
    (103) declarator -> . direct_declarator
    (76) init_declarator_list -> . init_declarator
    (77) init_declarator_list -> . init_declarator_list , init_declarator
    (111) pointer -> . *
    (112) pointer -> . * pointer
    (104) direct_declarator -> . ID
    (105) direct_declarator -> . ( declarator )
    (106) direct_declarator -> . direct_declarator [ constant_expression ]
    (107) direct_declarator -> . direct_declarator [ ]
    (108) direct_declarator -> . direct_declarator ( parameter_list )
    (109) direct_declarator -> . direct_declarator ( identifier_list )
    (110) direct_declarator -> . direct_declarator ( )
    (78) init_declarator -> . declarator
    (79) init_declarator -> . declarator = initializer

    ;               shift and go to state 23
    *               shift and go to state 16
    ID              shift and go to state 17
    (               shift and go to state 18

    declarator                     shift and go to state 22
    init_declarator_list           shift and go to state 24
    pointer                        shift and go to state 8
    direct_declarator              shift and go to state 9
    init_declarator                shift and go to state 25

state 6

    (169) function_definition -> declarator . declaration_list compound_statement
    (170) function_definition -> declarator . compound_statement
    (149) declaration_list -> . declaration
    (150) declaration_list -> . declaration_list declaration
    (146) compound_statement -> . { statement_list }
    (147) compound_statement -> . { declaration_list }
    (148) compound_statement -> . { declaration_list statement_list }
    (71) declaration -> . declaration_specifiers ;
    (72) declaration -> . declaration_specifiers init_declarator_list ;
    (73) declaration_specifiers -> .
    (74) declaration_specifiers -> . type_specifier
    (75) declaration_specifiers -> . type_specifier declaration_specifiers
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . INT
    (83) type_specifier -> . BOOL
    (84) type_specifier -> . struct_specifier
    (85) type_specifier -> . class_definition
    (91) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (86) class_definition -> . CLASS ID { class_member_list }

    {               shift and go to state 29
    ;               reduce using rule 73 (declaration_specifiers -> .)
    *               reduce using rule 73 (declaration_specifiers -> .)
    ID              reduce using rule 73 (declaration_specifiers -> .)
    (               reduce using rule 73 (declaration_specifiers -> .)
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20

    declaration_list               shift and go to state 26
    compound_statement             shift and go to state 27
    declaration                    shift and go to state 28
    declaration_specifiers         shift and go to state 30
    type_specifier                 shift and go to state 7
    struct_specifier               shift and go to state 14
    class_definition               shift and go to state 15

state 7

    (74) declaration_specifiers -> type_specifier .
    (75) declaration_specifiers -> type_specifier . declaration_specifiers
    (73) declaration_specifiers -> .
    (74) declaration_specifiers -> . type_specifier
    (75) declaration_specifiers -> . type_specifier declaration_specifiers
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . INT
    (83) type_specifier -> . BOOL
    (84) type_specifier -> . struct_specifier
    (85) type_specifier -> . class_definition
    (91) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (86) class_definition -> . CLASS ID { class_member_list }

  ! reduce/reduce conflict for ; resolved using rule 73 (declaration_specifiers -> .)
  ! reduce/reduce conflict for * resolved using rule 73 (declaration_specifiers -> .)
  ! reduce/reduce conflict for ID resolved using rule 73 (declaration_specifiers -> .)
  ! reduce/reduce conflict for ( resolved using rule 73 (declaration_specifiers -> .)
  ! reduce/reduce conflict for [ resolved using rule 73 (declaration_specifiers -> .)
  ! reduce/reduce conflict for ) resolved using rule 73 (declaration_specifiers -> .)
  ! reduce/reduce conflict for , resolved using rule 73 (declaration_specifiers -> .)
    ;               reduce using rule 73 (declaration_specifiers -> .)
    *               reduce using rule 73 (declaration_specifiers -> .)
    ID              reduce using rule 73 (declaration_specifiers -> .)
    (               reduce using rule 73 (declaration_specifiers -> .)
    [               reduce using rule 73 (declaration_specifiers -> .)
    )               reduce using rule 73 (declaration_specifiers -> .)
    ,               reduce using rule 73 (declaration_specifiers -> .)
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20

  ! ;               [ reduce using rule 74 (declaration_specifiers -> type_specifier .) ]
  ! *               [ reduce using rule 74 (declaration_specifiers -> type_specifier .) ]
  ! ID              [ reduce using rule 74 (declaration_specifiers -> type_specifier .) ]
  ! (               [ reduce using rule 74 (declaration_specifiers -> type_specifier .) ]
  ! [               [ reduce using rule 74 (declaration_specifiers -> type_specifier .) ]
  ! )               [ reduce using rule 74 (declaration_specifiers -> type_specifier .) ]
  ! ,               [ reduce using rule 74 (declaration_specifiers -> type_specifier .) ]

    type_specifier                 shift and go to state 7
    declaration_specifiers         shift and go to state 31
    struct_specifier               shift and go to state 14
    class_definition               shift and go to state 15

state 8

    (102) declarator -> pointer . direct_declarator
    (104) direct_declarator -> . ID
    (105) direct_declarator -> . ( declarator )
    (106) direct_declarator -> . direct_declarator [ constant_expression ]
    (107) direct_declarator -> . direct_declarator [ ]
    (108) direct_declarator -> . direct_declarator ( parameter_list )
    (109) direct_declarator -> . direct_declarator ( identifier_list )
    (110) direct_declarator -> . direct_declarator ( )

    ID              shift and go to state 17
    (               shift and go to state 18

    direct_declarator              shift and go to state 32

state 9

    (103) declarator -> direct_declarator .
    (106) direct_declarator -> direct_declarator . [ constant_expression ]
    (107) direct_declarator -> direct_declarator . [ ]
    (108) direct_declarator -> direct_declarator . ( parameter_list )
    (109) direct_declarator -> direct_declarator . ( identifier_list )
    (110) direct_declarator -> direct_declarator . ( )

  ! shift/reduce conflict for ( resolved as shift
    {               reduce using rule 103 (declarator -> direct_declarator .)
    VOID            reduce using rule 103 (declarator -> direct_declarator .)
    CHAR            reduce using rule 103 (declarator -> direct_declarator .)
    INT             reduce using rule 103 (declarator -> direct_declarator .)
    BOOL            reduce using rule 103 (declarator -> direct_declarator .)
    STRUCT          reduce using rule 103 (declarator -> direct_declarator .)
    CLASS           reduce using rule 103 (declarator -> direct_declarator .)
    ;               reduce using rule 103 (declarator -> direct_declarator .)
    *               reduce using rule 103 (declarator -> direct_declarator .)
    ID              reduce using rule 103 (declarator -> direct_declarator .)
    =               reduce using rule 103 (declarator -> direct_declarator .)
    ,               reduce using rule 103 (declarator -> direct_declarator .)
    )               reduce using rule 103 (declarator -> direct_declarator .)
    :               reduce using rule 103 (declarator -> direct_declarator .)
    [               shift and go to state 33
    (               shift and go to state 34

  ! (               [ reduce using rule 103 (declarator -> direct_declarator .) ]


state 10

    (80) type_specifier -> VOID .

    VOID            reduce using rule 80 (type_specifier -> VOID .)
    CHAR            reduce using rule 80 (type_specifier -> VOID .)
    INT             reduce using rule 80 (type_specifier -> VOID .)
    BOOL            reduce using rule 80 (type_specifier -> VOID .)
    STRUCT          reduce using rule 80 (type_specifier -> VOID .)
    CLASS           reduce using rule 80 (type_specifier -> VOID .)
    ;               reduce using rule 80 (type_specifier -> VOID .)
    *               reduce using rule 80 (type_specifier -> VOID .)
    ID              reduce using rule 80 (type_specifier -> VOID .)
    (               reduce using rule 80 (type_specifier -> VOID .)
    [               reduce using rule 80 (type_specifier -> VOID .)
    )               reduce using rule 80 (type_specifier -> VOID .)
    ,               reduce using rule 80 (type_specifier -> VOID .)
    :               reduce using rule 80 (type_specifier -> VOID .)


state 11

    (81) type_specifier -> CHAR .

    VOID            reduce using rule 81 (type_specifier -> CHAR .)
    CHAR            reduce using rule 81 (type_specifier -> CHAR .)
    INT             reduce using rule 81 (type_specifier -> CHAR .)
    BOOL            reduce using rule 81 (type_specifier -> CHAR .)
    STRUCT          reduce using rule 81 (type_specifier -> CHAR .)
    CLASS           reduce using rule 81 (type_specifier -> CHAR .)
    ;               reduce using rule 81 (type_specifier -> CHAR .)
    *               reduce using rule 81 (type_specifier -> CHAR .)
    ID              reduce using rule 81 (type_specifier -> CHAR .)
    (               reduce using rule 81 (type_specifier -> CHAR .)
    [               reduce using rule 81 (type_specifier -> CHAR .)
    )               reduce using rule 81 (type_specifier -> CHAR .)
    ,               reduce using rule 81 (type_specifier -> CHAR .)
    :               reduce using rule 81 (type_specifier -> CHAR .)


state 12

    (82) type_specifier -> INT .

    VOID            reduce using rule 82 (type_specifier -> INT .)
    CHAR            reduce using rule 82 (type_specifier -> INT .)
    INT             reduce using rule 82 (type_specifier -> INT .)
    BOOL            reduce using rule 82 (type_specifier -> INT .)
    STRUCT          reduce using rule 82 (type_specifier -> INT .)
    CLASS           reduce using rule 82 (type_specifier -> INT .)
    ;               reduce using rule 82 (type_specifier -> INT .)
    *               reduce using rule 82 (type_specifier -> INT .)
    ID              reduce using rule 82 (type_specifier -> INT .)
    (               reduce using rule 82 (type_specifier -> INT .)
    [               reduce using rule 82 (type_specifier -> INT .)
    )               reduce using rule 82 (type_specifier -> INT .)
    ,               reduce using rule 82 (type_specifier -> INT .)
    :               reduce using rule 82 (type_specifier -> INT .)


state 13

    (83) type_specifier -> BOOL .

    VOID            reduce using rule 83 (type_specifier -> BOOL .)
    CHAR            reduce using rule 83 (type_specifier -> BOOL .)
    INT             reduce using rule 83 (type_specifier -> BOOL .)
    BOOL            reduce using rule 83 (type_specifier -> BOOL .)
    STRUCT          reduce using rule 83 (type_specifier -> BOOL .)
    CLASS           reduce using rule 83 (type_specifier -> BOOL .)
    ;               reduce using rule 83 (type_specifier -> BOOL .)
    *               reduce using rule 83 (type_specifier -> BOOL .)
    ID              reduce using rule 83 (type_specifier -> BOOL .)
    (               reduce using rule 83 (type_specifier -> BOOL .)
    [               reduce using rule 83 (type_specifier -> BOOL .)
    )               reduce using rule 83 (type_specifier -> BOOL .)
    ,               reduce using rule 83 (type_specifier -> BOOL .)
    :               reduce using rule 83 (type_specifier -> BOOL .)


state 14

    (84) type_specifier -> struct_specifier .

    VOID            reduce using rule 84 (type_specifier -> struct_specifier .)
    CHAR            reduce using rule 84 (type_specifier -> struct_specifier .)
    INT             reduce using rule 84 (type_specifier -> struct_specifier .)
    BOOL            reduce using rule 84 (type_specifier -> struct_specifier .)
    STRUCT          reduce using rule 84 (type_specifier -> struct_specifier .)
    CLASS           reduce using rule 84 (type_specifier -> struct_specifier .)
    ;               reduce using rule 84 (type_specifier -> struct_specifier .)
    *               reduce using rule 84 (type_specifier -> struct_specifier .)
    ID              reduce using rule 84 (type_specifier -> struct_specifier .)
    (               reduce using rule 84 (type_specifier -> struct_specifier .)
    [               reduce using rule 84 (type_specifier -> struct_specifier .)
    )               reduce using rule 84 (type_specifier -> struct_specifier .)
    ,               reduce using rule 84 (type_specifier -> struct_specifier .)
    :               reduce using rule 84 (type_specifier -> struct_specifier .)


state 15

    (85) type_specifier -> class_definition .

    VOID            reduce using rule 85 (type_specifier -> class_definition .)
    CHAR            reduce using rule 85 (type_specifier -> class_definition .)
    INT             reduce using rule 85 (type_specifier -> class_definition .)
    BOOL            reduce using rule 85 (type_specifier -> class_definition .)
    STRUCT          reduce using rule 85 (type_specifier -> class_definition .)
    CLASS           reduce using rule 85 (type_specifier -> class_definition .)
    ;               reduce using rule 85 (type_specifier -> class_definition .)
    *               reduce using rule 85 (type_specifier -> class_definition .)
    ID              reduce using rule 85 (type_specifier -> class_definition .)
    (               reduce using rule 85 (type_specifier -> class_definition .)
    [               reduce using rule 85 (type_specifier -> class_definition .)
    )               reduce using rule 85 (type_specifier -> class_definition .)
    ,               reduce using rule 85 (type_specifier -> class_definition .)
    :               reduce using rule 85 (type_specifier -> class_definition .)


state 16

    (111) pointer -> * .
    (112) pointer -> * . pointer
    (111) pointer -> . *
    (112) pointer -> . * pointer

    ID              reduce using rule 111 (pointer -> * .)
    (               reduce using rule 111 (pointer -> * .)
    [               reduce using rule 111 (pointer -> * .)
    )               reduce using rule 111 (pointer -> * .)
    ,               reduce using rule 111 (pointer -> * .)
    *               shift and go to state 16

    pointer                        shift and go to state 35

state 17

    (104) direct_declarator -> ID .

    [               reduce using rule 104 (direct_declarator -> ID .)
    (               reduce using rule 104 (direct_declarator -> ID .)
    {               reduce using rule 104 (direct_declarator -> ID .)
    VOID            reduce using rule 104 (direct_declarator -> ID .)
    CHAR            reduce using rule 104 (direct_declarator -> ID .)
    INT             reduce using rule 104 (direct_declarator -> ID .)
    BOOL            reduce using rule 104 (direct_declarator -> ID .)
    STRUCT          reduce using rule 104 (direct_declarator -> ID .)
    CLASS           reduce using rule 104 (direct_declarator -> ID .)
    ;               reduce using rule 104 (direct_declarator -> ID .)
    *               reduce using rule 104 (direct_declarator -> ID .)
    ID              reduce using rule 104 (direct_declarator -> ID .)
    =               reduce using rule 104 (direct_declarator -> ID .)
    ,               reduce using rule 104 (direct_declarator -> ID .)
    )               reduce using rule 104 (direct_declarator -> ID .)
    :               reduce using rule 104 (direct_declarator -> ID .)


state 18

    (105) direct_declarator -> ( . declarator )
    (102) declarator -> . pointer direct_declarator
    (103) declarator -> . direct_declarator
    (111) pointer -> . *
    (112) pointer -> . * pointer
    (104) direct_declarator -> . ID
    (105) direct_declarator -> . ( declarator )
    (106) direct_declarator -> . direct_declarator [ constant_expression ]
    (107) direct_declarator -> . direct_declarator [ ]
    (108) direct_declarator -> . direct_declarator ( parameter_list )
    (109) direct_declarator -> . direct_declarator ( identifier_list )
    (110) direct_declarator -> . direct_declarator ( )

    *               shift and go to state 16
    ID              shift and go to state 17
    (               shift and go to state 18

    declarator                     shift and go to state 36
    pointer                        shift and go to state 8
    direct_declarator              shift and go to state 9

state 19

    (91) struct_specifier -> STRUCT . ID { struct_declaration_list }

    ID              shift and go to state 37


state 20

    (86) class_definition -> CLASS . ID { class_member_list }

    ID              shift and go to state 38


state 21

    (164) translation_unit -> translation_unit external_declaration .

    VOID            reduce using rule 164 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 164 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 164 (translation_unit -> translation_unit external_declaration .)
    BOOL            reduce using rule 164 (translation_unit -> translation_unit external_declaration .)
    *               reduce using rule 164 (translation_unit -> translation_unit external_declaration .)
    ID              reduce using rule 164 (translation_unit -> translation_unit external_declaration .)
    (               reduce using rule 164 (translation_unit -> translation_unit external_declaration .)
    STRUCT          reduce using rule 164 (translation_unit -> translation_unit external_declaration .)
    CLASS           reduce using rule 164 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 164 (translation_unit -> translation_unit external_declaration .)
    ;               reduce using rule 164 (translation_unit -> translation_unit external_declaration .)


state 22

    (167) function_definition -> declaration_specifiers declarator . declaration_list compound_statement
    (168) function_definition -> declaration_specifiers declarator . compound_statement
    (78) init_declarator -> declarator .
    (79) init_declarator -> declarator . = initializer
    (149) declaration_list -> . declaration
    (150) declaration_list -> . declaration_list declaration
    (146) compound_statement -> . { statement_list }
    (147) compound_statement -> . { declaration_list }
    (148) compound_statement -> . { declaration_list statement_list }
    (71) declaration -> . declaration_specifiers ;
    (72) declaration -> . declaration_specifiers init_declarator_list ;
    (73) declaration_specifiers -> .
    (74) declaration_specifiers -> . type_specifier
    (75) declaration_specifiers -> . type_specifier declaration_specifiers
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . INT
    (83) type_specifier -> . BOOL
    (84) type_specifier -> . struct_specifier
    (85) type_specifier -> . class_definition
    (91) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (86) class_definition -> . CLASS ID { class_member_list }

  ! reduce/reduce conflict for ; resolved using rule 73 (declaration_specifiers -> .)
    ,               reduce using rule 78 (init_declarator -> declarator .)
    =               shift and go to state 41
    {               shift and go to state 29
    ;               reduce using rule 73 (declaration_specifiers -> .)
    *               reduce using rule 73 (declaration_specifiers -> .)
    ID              reduce using rule 73 (declaration_specifiers -> .)
    (               reduce using rule 73 (declaration_specifiers -> .)
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20

  ! ;               [ reduce using rule 78 (init_declarator -> declarator .) ]

    declaration_specifiers         shift and go to state 30
    declaration_list               shift and go to state 39
    compound_statement             shift and go to state 40
    declaration                    shift and go to state 28
    type_specifier                 shift and go to state 7
    struct_specifier               shift and go to state 14
    class_definition               shift and go to state 15

state 23

    (71) declaration -> declaration_specifiers ; .

    VOID            reduce using rule 71 (declaration -> declaration_specifiers ; .)
    CHAR            reduce using rule 71 (declaration -> declaration_specifiers ; .)
    INT             reduce using rule 71 (declaration -> declaration_specifiers ; .)
    BOOL            reduce using rule 71 (declaration -> declaration_specifiers ; .)
    *               reduce using rule 71 (declaration -> declaration_specifiers ; .)
    ID              reduce using rule 71 (declaration -> declaration_specifiers ; .)
    (               reduce using rule 71 (declaration -> declaration_specifiers ; .)
    STRUCT          reduce using rule 71 (declaration -> declaration_specifiers ; .)
    CLASS           reduce using rule 71 (declaration -> declaration_specifiers ; .)
    $end            reduce using rule 71 (declaration -> declaration_specifiers ; .)
    ;               reduce using rule 71 (declaration -> declaration_specifiers ; .)
    {               reduce using rule 71 (declaration -> declaration_specifiers ; .)
    }               reduce using rule 71 (declaration -> declaration_specifiers ; .)
    CIN             reduce using rule 71 (declaration -> declaration_specifiers ; .)
    COUT            reduce using rule 71 (declaration -> declaration_specifiers ; .)
    IF              reduce using rule 71 (declaration -> declaration_specifiers ; .)
    WHILE           reduce using rule 71 (declaration -> declaration_specifiers ; .)
    FOR             reduce using rule 71 (declaration -> declaration_specifiers ; .)
    CONTINUE        reduce using rule 71 (declaration -> declaration_specifiers ; .)
    BREAK           reduce using rule 71 (declaration -> declaration_specifiers ; .)
    RETURN          reduce using rule 71 (declaration -> declaration_specifiers ; .)
    INC             reduce using rule 71 (declaration -> declaration_specifiers ; .)
    DEC             reduce using rule 71 (declaration -> declaration_specifiers ; .)
    &               reduce using rule 71 (declaration -> declaration_specifiers ; .)
    +               reduce using rule 71 (declaration -> declaration_specifiers ; .)
    -               reduce using rule 71 (declaration -> declaration_specifiers ; .)
    ~               reduce using rule 71 (declaration -> declaration_specifiers ; .)
    !               reduce using rule 71 (declaration -> declaration_specifiers ; .)
    INTEGER         reduce using rule 71 (declaration -> declaration_specifiers ; .)
    STRING          reduce using rule 71 (declaration -> declaration_specifiers ; .)
    TRUE            reduce using rule 71 (declaration -> declaration_specifiers ; .)
    FALSE           reduce using rule 71 (declaration -> declaration_specifiers ; .)
    CHARACTER       reduce using rule 71 (declaration -> declaration_specifiers ; .)


state 24

    (72) declaration -> declaration_specifiers init_declarator_list . ;
    (77) init_declarator_list -> init_declarator_list . , init_declarator

    ;               shift and go to state 42
    ,               shift and go to state 43


state 25

    (76) init_declarator_list -> init_declarator .

    ;               reduce using rule 76 (init_declarator_list -> init_declarator .)
    ,               reduce using rule 76 (init_declarator_list -> init_declarator .)


state 26

    (169) function_definition -> declarator declaration_list . compound_statement
    (150) declaration_list -> declaration_list . declaration
    (146) compound_statement -> . { statement_list }
    (147) compound_statement -> . { declaration_list }
    (148) compound_statement -> . { declaration_list statement_list }
    (71) declaration -> . declaration_specifiers ;
    (72) declaration -> . declaration_specifiers init_declarator_list ;
    (73) declaration_specifiers -> .
    (74) declaration_specifiers -> . type_specifier
    (75) declaration_specifiers -> . type_specifier declaration_specifiers
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . INT
    (83) type_specifier -> . BOOL
    (84) type_specifier -> . struct_specifier
    (85) type_specifier -> . class_definition
    (91) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (86) class_definition -> . CLASS ID { class_member_list }

    {               shift and go to state 29
    ;               reduce using rule 73 (declaration_specifiers -> .)
    *               reduce using rule 73 (declaration_specifiers -> .)
    ID              reduce using rule 73 (declaration_specifiers -> .)
    (               reduce using rule 73 (declaration_specifiers -> .)
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20

    compound_statement             shift and go to state 44
    declaration                    shift and go to state 45
    declaration_specifiers         shift and go to state 30
    type_specifier                 shift and go to state 7
    struct_specifier               shift and go to state 14
    class_definition               shift and go to state 15

state 27

    (170) function_definition -> declarator compound_statement .

    VOID            reduce using rule 170 (function_definition -> declarator compound_statement .)
    CHAR            reduce using rule 170 (function_definition -> declarator compound_statement .)
    INT             reduce using rule 170 (function_definition -> declarator compound_statement .)
    BOOL            reduce using rule 170 (function_definition -> declarator compound_statement .)
    *               reduce using rule 170 (function_definition -> declarator compound_statement .)
    ID              reduce using rule 170 (function_definition -> declarator compound_statement .)
    (               reduce using rule 170 (function_definition -> declarator compound_statement .)
    STRUCT          reduce using rule 170 (function_definition -> declarator compound_statement .)
    CLASS           reduce using rule 170 (function_definition -> declarator compound_statement .)
    $end            reduce using rule 170 (function_definition -> declarator compound_statement .)
    ;               reduce using rule 170 (function_definition -> declarator compound_statement .)
    }               reduce using rule 170 (function_definition -> declarator compound_statement .)


state 28

    (149) declaration_list -> declaration .

    {               reduce using rule 149 (declaration_list -> declaration .)
    VOID            reduce using rule 149 (declaration_list -> declaration .)
    CHAR            reduce using rule 149 (declaration_list -> declaration .)
    INT             reduce using rule 149 (declaration_list -> declaration .)
    BOOL            reduce using rule 149 (declaration_list -> declaration .)
    STRUCT          reduce using rule 149 (declaration_list -> declaration .)
    CLASS           reduce using rule 149 (declaration_list -> declaration .)
    ;               reduce using rule 149 (declaration_list -> declaration .)
    *               reduce using rule 149 (declaration_list -> declaration .)
    ID              reduce using rule 149 (declaration_list -> declaration .)
    (               reduce using rule 149 (declaration_list -> declaration .)
    }               reduce using rule 149 (declaration_list -> declaration .)
    CIN             reduce using rule 149 (declaration_list -> declaration .)
    COUT            reduce using rule 149 (declaration_list -> declaration .)
    IF              reduce using rule 149 (declaration_list -> declaration .)
    WHILE           reduce using rule 149 (declaration_list -> declaration .)
    FOR             reduce using rule 149 (declaration_list -> declaration .)
    CONTINUE        reduce using rule 149 (declaration_list -> declaration .)
    BREAK           reduce using rule 149 (declaration_list -> declaration .)
    RETURN          reduce using rule 149 (declaration_list -> declaration .)
    INC             reduce using rule 149 (declaration_list -> declaration .)
    DEC             reduce using rule 149 (declaration_list -> declaration .)
    &               reduce using rule 149 (declaration_list -> declaration .)
    +               reduce using rule 149 (declaration_list -> declaration .)
    -               reduce using rule 149 (declaration_list -> declaration .)
    ~               reduce using rule 149 (declaration_list -> declaration .)
    !               reduce using rule 149 (declaration_list -> declaration .)
    INTEGER         reduce using rule 149 (declaration_list -> declaration .)
    STRING          reduce using rule 149 (declaration_list -> declaration .)
    TRUE            reduce using rule 149 (declaration_list -> declaration .)
    FALSE           reduce using rule 149 (declaration_list -> declaration .)
    CHARACTER       reduce using rule 149 (declaration_list -> declaration .)


state 29

    (146) compound_statement -> { . statement_list }
    (147) compound_statement -> { . declaration_list }
    (148) compound_statement -> { . declaration_list statement_list }
    (151) statement_list -> . statement
    (152) statement_list -> . statement_list statement
    (149) declaration_list -> . declaration
    (150) declaration_list -> . declaration_list declaration
    (139) statement -> . input_statement
    (140) statement -> . output_statement
    (141) statement -> . compound_statement
    (142) statement -> . expression_statement
    (143) statement -> . selection_statement
    (144) statement -> . iteration_statement
    (145) statement -> . jump_statement
    (71) declaration -> . declaration_specifiers ;
    (72) declaration -> . declaration_specifiers init_declarator_list ;
    (171) input_statement -> . CIN IN ID ;
    (172) output_statement -> . COUT output_list ;
    (146) compound_statement -> . { statement_list }
    (147) compound_statement -> . { declaration_list }
    (148) compound_statement -> . { declaration_list statement_list }
    (153) expression_statement -> . ;
    (154) expression_statement -> . expression ;
    (155) selection_statement -> . IF ( expression ) statement
    (156) selection_statement -> . IF ( expression ) statement ELSE statement
    (157) iteration_statement -> . WHILE ( expression ) statement
    (158) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (159) jump_statement -> . CONTINUE ;
    (160) jump_statement -> . BREAK ;
    (161) jump_statement -> . RETURN ;
    (162) jump_statement -> . RETURN expression ;
    (73) declaration_specifiers -> .
    (74) declaration_specifiers -> . type_specifier
    (75) declaration_specifiers -> . type_specifier declaration_specifiers
    (68) expression -> . assignment_expression
    (69) expression -> . expression , assignment_expression
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . INT
    (83) type_specifier -> . BOOL
    (84) type_specifier -> . struct_specifier
    (85) type_specifier -> . class_definition
    (57) assignment_expression -> . conditional_expression
    (58) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (91) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (86) class_definition -> . CLASS ID { class_member_list }
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression

  ! shift/reduce conflict for ; resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    CIN             shift and go to state 57
    COUT            shift and go to state 59
    {               shift and go to state 29
    ;               shift and go to state 56
    IF              shift and go to state 61
    WHILE           shift and go to state 63
    FOR             shift and go to state 64
    CONTINUE        shift and go to state 65
    BREAK           shift and go to state 66
    RETURN          shift and go to state 67
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90
    (               shift and go to state 62

  ! ;               [ reduce using rule 73 (declaration_specifiers -> .) ]
  ! *               [ reduce using rule 73 (declaration_specifiers -> .) ]
  ! ID              [ reduce using rule 73 (declaration_specifiers -> .) ]
  ! (               [ reduce using rule 73 (declaration_specifiers -> .) ]

    statement_list                 shift and go to state 46
    declaration_list               shift and go to state 47
    statement                      shift and go to state 48
    declaration                    shift and go to state 28
    input_statement                shift and go to state 49
    output_statement               shift and go to state 50
    compound_statement             shift and go to state 51
    expression_statement           shift and go to state 52
    selection_statement            shift and go to state 53
    iteration_statement            shift and go to state 54
    jump_statement                 shift and go to state 55
    declaration_specifiers         shift and go to state 30
    expression                     shift and go to state 60
    type_specifier                 shift and go to state 7
    assignment_expression          shift and go to state 68
    struct_specifier               shift and go to state 14
    class_definition               shift and go to state 15
    conditional_expression         shift and go to state 69
    unary_expression               shift and go to state 70
    logical_or_expression          shift and go to state 71
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    cast_expression                shift and go to state 76
    logical_and_expression         shift and go to state 77
    primary_expression             shift and go to state 78
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96

state 30

    (71) declaration -> declaration_specifiers . ;
    (72) declaration -> declaration_specifiers . init_declarator_list ;
    (76) init_declarator_list -> . init_declarator
    (77) init_declarator_list -> . init_declarator_list , init_declarator
    (78) init_declarator -> . declarator
    (79) init_declarator -> . declarator = initializer
    (102) declarator -> . pointer direct_declarator
    (103) declarator -> . direct_declarator
    (111) pointer -> . *
    (112) pointer -> . * pointer
    (104) direct_declarator -> . ID
    (105) direct_declarator -> . ( declarator )
    (106) direct_declarator -> . direct_declarator [ constant_expression ]
    (107) direct_declarator -> . direct_declarator [ ]
    (108) direct_declarator -> . direct_declarator ( parameter_list )
    (109) direct_declarator -> . direct_declarator ( identifier_list )
    (110) direct_declarator -> . direct_declarator ( )

    ;               shift and go to state 23
    *               shift and go to state 16
    ID              shift and go to state 17
    (               shift and go to state 18

    init_declarator_list           shift and go to state 24
    init_declarator                shift and go to state 25
    declarator                     shift and go to state 97
    pointer                        shift and go to state 8
    direct_declarator              shift and go to state 9

state 31

    (75) declaration_specifiers -> type_specifier declaration_specifiers .

    ;               reduce using rule 75 (declaration_specifiers -> type_specifier declaration_specifiers .)
    *               reduce using rule 75 (declaration_specifiers -> type_specifier declaration_specifiers .)
    ID              reduce using rule 75 (declaration_specifiers -> type_specifier declaration_specifiers .)
    (               reduce using rule 75 (declaration_specifiers -> type_specifier declaration_specifiers .)
    [               reduce using rule 75 (declaration_specifiers -> type_specifier declaration_specifiers .)
    )               reduce using rule 75 (declaration_specifiers -> type_specifier declaration_specifiers .)
    ,               reduce using rule 75 (declaration_specifiers -> type_specifier declaration_specifiers .)


state 32

    (102) declarator -> pointer direct_declarator .
    (106) direct_declarator -> direct_declarator . [ constant_expression ]
    (107) direct_declarator -> direct_declarator . [ ]
    (108) direct_declarator -> direct_declarator . ( parameter_list )
    (109) direct_declarator -> direct_declarator . ( identifier_list )
    (110) direct_declarator -> direct_declarator . ( )

  ! shift/reduce conflict for ( resolved as shift
    {               reduce using rule 102 (declarator -> pointer direct_declarator .)
    VOID            reduce using rule 102 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 102 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 102 (declarator -> pointer direct_declarator .)
    BOOL            reduce using rule 102 (declarator -> pointer direct_declarator .)
    STRUCT          reduce using rule 102 (declarator -> pointer direct_declarator .)
    CLASS           reduce using rule 102 (declarator -> pointer direct_declarator .)
    ;               reduce using rule 102 (declarator -> pointer direct_declarator .)
    *               reduce using rule 102 (declarator -> pointer direct_declarator .)
    ID              reduce using rule 102 (declarator -> pointer direct_declarator .)
    =               reduce using rule 102 (declarator -> pointer direct_declarator .)
    ,               reduce using rule 102 (declarator -> pointer direct_declarator .)
    )               reduce using rule 102 (declarator -> pointer direct_declarator .)
    :               reduce using rule 102 (declarator -> pointer direct_declarator .)
    [               shift and go to state 33
    (               shift and go to state 34

  ! (               [ reduce using rule 102 (declarator -> pointer direct_declarator .) ]


state 33

    (106) direct_declarator -> direct_declarator [ . constant_expression ]
    (107) direct_declarator -> direct_declarator [ . ]
    (70) constant_expression -> . conditional_expression
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )

    ]               shift and go to state 99
    (               shift and go to state 102
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90

    constant_expression            shift and go to state 98
    conditional_expression         shift and go to state 100
    logical_or_expression          shift and go to state 71
    logical_and_expression         shift and go to state 77
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96
    cast_expression                shift and go to state 76
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    primary_expression             shift and go to state 78

state 34

    (108) direct_declarator -> direct_declarator ( . parameter_list )
    (109) direct_declarator -> direct_declarator ( . identifier_list )
    (110) direct_declarator -> direct_declarator ( . )
    (113) parameter_list -> . parameter_declaration
    (114) parameter_list -> . parameter_list , parameter_declaration
    (118) identifier_list -> . ID
    (119) identifier_list -> . identifier_list , ID
    (115) parameter_declaration -> . declaration_specifiers declarator
    (116) parameter_declaration -> . declaration_specifiers abstract_declarator
    (117) parameter_declaration -> . declaration_specifiers
    (73) declaration_specifiers -> .
    (74) declaration_specifiers -> . type_specifier
    (75) declaration_specifiers -> . type_specifier declaration_specifiers
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . INT
    (83) type_specifier -> . BOOL
    (84) type_specifier -> . struct_specifier
    (85) type_specifier -> . class_definition
    (91) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (86) class_definition -> . CLASS ID { class_member_list }

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 104
    ID              shift and go to state 107
    *               reduce using rule 73 (declaration_specifiers -> .)
    (               reduce using rule 73 (declaration_specifiers -> .)
    [               reduce using rule 73 (declaration_specifiers -> .)
    ,               reduce using rule 73 (declaration_specifiers -> .)
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20

  ! ID              [ reduce using rule 73 (declaration_specifiers -> .) ]
  ! )               [ reduce using rule 73 (declaration_specifiers -> .) ]

    parameter_list                 shift and go to state 103
    identifier_list                shift and go to state 105
    parameter_declaration          shift and go to state 106
    declaration_specifiers         shift and go to state 108
    type_specifier                 shift and go to state 7
    struct_specifier               shift and go to state 14
    class_definition               shift and go to state 15

state 35

    (112) pointer -> * pointer .

    ID              reduce using rule 112 (pointer -> * pointer .)
    (               reduce using rule 112 (pointer -> * pointer .)
    [               reduce using rule 112 (pointer -> * pointer .)
    )               reduce using rule 112 (pointer -> * pointer .)
    ,               reduce using rule 112 (pointer -> * pointer .)


state 36

    (105) direct_declarator -> ( declarator . )

    )               shift and go to state 109


state 37

    (91) struct_specifier -> STRUCT ID . { struct_declaration_list }

    {               shift and go to state 110


state 38

    (86) class_definition -> CLASS ID . { class_member_list }

    {               shift and go to state 111


state 39

    (167) function_definition -> declaration_specifiers declarator declaration_list . compound_statement
    (150) declaration_list -> declaration_list . declaration
    (146) compound_statement -> . { statement_list }
    (147) compound_statement -> . { declaration_list }
    (148) compound_statement -> . { declaration_list statement_list }
    (71) declaration -> . declaration_specifiers ;
    (72) declaration -> . declaration_specifiers init_declarator_list ;
    (73) declaration_specifiers -> .
    (74) declaration_specifiers -> . type_specifier
    (75) declaration_specifiers -> . type_specifier declaration_specifiers
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . INT
    (83) type_specifier -> . BOOL
    (84) type_specifier -> . struct_specifier
    (85) type_specifier -> . class_definition
    (91) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (86) class_definition -> . CLASS ID { class_member_list }

    {               shift and go to state 29
    ;               reduce using rule 73 (declaration_specifiers -> .)
    *               reduce using rule 73 (declaration_specifiers -> .)
    ID              reduce using rule 73 (declaration_specifiers -> .)
    (               reduce using rule 73 (declaration_specifiers -> .)
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20

    declaration_specifiers         shift and go to state 30
    compound_statement             shift and go to state 112
    declaration                    shift and go to state 45
    type_specifier                 shift and go to state 7
    struct_specifier               shift and go to state 14
    class_definition               shift and go to state 15

state 40

    (168) function_definition -> declaration_specifiers declarator compound_statement .

    VOID            reduce using rule 168 (function_definition -> declaration_specifiers declarator compound_statement .)
    CHAR            reduce using rule 168 (function_definition -> declaration_specifiers declarator compound_statement .)
    INT             reduce using rule 168 (function_definition -> declaration_specifiers declarator compound_statement .)
    BOOL            reduce using rule 168 (function_definition -> declaration_specifiers declarator compound_statement .)
    *               reduce using rule 168 (function_definition -> declaration_specifiers declarator compound_statement .)
    ID              reduce using rule 168 (function_definition -> declaration_specifiers declarator compound_statement .)
    (               reduce using rule 168 (function_definition -> declaration_specifiers declarator compound_statement .)
    STRUCT          reduce using rule 168 (function_definition -> declaration_specifiers declarator compound_statement .)
    CLASS           reduce using rule 168 (function_definition -> declaration_specifiers declarator compound_statement .)
    $end            reduce using rule 168 (function_definition -> declaration_specifiers declarator compound_statement .)
    ;               reduce using rule 168 (function_definition -> declaration_specifiers declarator compound_statement .)
    }               reduce using rule 168 (function_definition -> declaration_specifiers declarator compound_statement .)


state 41

    (79) init_declarator -> declarator = . initializer
    (134) initializer -> . assignment_expression
    (135) initializer -> . { initializer_list }
    (136) initializer -> . { initializer_list , }
    (57) assignment_expression -> . conditional_expression
    (58) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 115
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90
    (               shift and go to state 62

    initializer                    shift and go to state 113
    assignment_expression          shift and go to state 114
    conditional_expression         shift and go to state 69
    unary_expression               shift and go to state 70
    logical_or_expression          shift and go to state 71
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    cast_expression                shift and go to state 76
    logical_and_expression         shift and go to state 77
    primary_expression             shift and go to state 78
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96

state 42

    (72) declaration -> declaration_specifiers init_declarator_list ; .

    VOID            reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    CHAR            reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    INT             reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    BOOL            reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    *               reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    ID              reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    (               reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    STRUCT          reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    CLASS           reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    $end            reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    ;               reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    {               reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    }               reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    CIN             reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    COUT            reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    IF              reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    WHILE           reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    FOR             reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    CONTINUE        reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    BREAK           reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    RETURN          reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    INC             reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    DEC             reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    &               reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    +               reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    -               reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    ~               reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    !               reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    INTEGER         reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    STRING          reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    TRUE            reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    FALSE           reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)
    CHARACTER       reduce using rule 72 (declaration -> declaration_specifiers init_declarator_list ; .)


state 43

    (77) init_declarator_list -> init_declarator_list , . init_declarator
    (78) init_declarator -> . declarator
    (79) init_declarator -> . declarator = initializer
    (102) declarator -> . pointer direct_declarator
    (103) declarator -> . direct_declarator
    (111) pointer -> . *
    (112) pointer -> . * pointer
    (104) direct_declarator -> . ID
    (105) direct_declarator -> . ( declarator )
    (106) direct_declarator -> . direct_declarator [ constant_expression ]
    (107) direct_declarator -> . direct_declarator [ ]
    (108) direct_declarator -> . direct_declarator ( parameter_list )
    (109) direct_declarator -> . direct_declarator ( identifier_list )
    (110) direct_declarator -> . direct_declarator ( )

    *               shift and go to state 16
    ID              shift and go to state 17
    (               shift and go to state 18

    init_declarator                shift and go to state 116
    declarator                     shift and go to state 97
    pointer                        shift and go to state 8
    direct_declarator              shift and go to state 9

state 44

    (169) function_definition -> declarator declaration_list compound_statement .

    VOID            reduce using rule 169 (function_definition -> declarator declaration_list compound_statement .)
    CHAR            reduce using rule 169 (function_definition -> declarator declaration_list compound_statement .)
    INT             reduce using rule 169 (function_definition -> declarator declaration_list compound_statement .)
    BOOL            reduce using rule 169 (function_definition -> declarator declaration_list compound_statement .)
    *               reduce using rule 169 (function_definition -> declarator declaration_list compound_statement .)
    ID              reduce using rule 169 (function_definition -> declarator declaration_list compound_statement .)
    (               reduce using rule 169 (function_definition -> declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 169 (function_definition -> declarator declaration_list compound_statement .)
    CLASS           reduce using rule 169 (function_definition -> declarator declaration_list compound_statement .)
    $end            reduce using rule 169 (function_definition -> declarator declaration_list compound_statement .)
    ;               reduce using rule 169 (function_definition -> declarator declaration_list compound_statement .)
    }               reduce using rule 169 (function_definition -> declarator declaration_list compound_statement .)


state 45

    (150) declaration_list -> declaration_list declaration .

    {               reduce using rule 150 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 150 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 150 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 150 (declaration_list -> declaration_list declaration .)
    BOOL            reduce using rule 150 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 150 (declaration_list -> declaration_list declaration .)
    CLASS           reduce using rule 150 (declaration_list -> declaration_list declaration .)
    ;               reduce using rule 150 (declaration_list -> declaration_list declaration .)
    *               reduce using rule 150 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 150 (declaration_list -> declaration_list declaration .)
    (               reduce using rule 150 (declaration_list -> declaration_list declaration .)
    }               reduce using rule 150 (declaration_list -> declaration_list declaration .)
    CIN             reduce using rule 150 (declaration_list -> declaration_list declaration .)
    COUT            reduce using rule 150 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 150 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 150 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 150 (declaration_list -> declaration_list declaration .)
    CONTINUE        reduce using rule 150 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 150 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 150 (declaration_list -> declaration_list declaration .)
    INC             reduce using rule 150 (declaration_list -> declaration_list declaration .)
    DEC             reduce using rule 150 (declaration_list -> declaration_list declaration .)
    &               reduce using rule 150 (declaration_list -> declaration_list declaration .)
    +               reduce using rule 150 (declaration_list -> declaration_list declaration .)
    -               reduce using rule 150 (declaration_list -> declaration_list declaration .)
    ~               reduce using rule 150 (declaration_list -> declaration_list declaration .)
    !               reduce using rule 150 (declaration_list -> declaration_list declaration .)
    INTEGER         reduce using rule 150 (declaration_list -> declaration_list declaration .)
    STRING          reduce using rule 150 (declaration_list -> declaration_list declaration .)
    TRUE            reduce using rule 150 (declaration_list -> declaration_list declaration .)
    FALSE           reduce using rule 150 (declaration_list -> declaration_list declaration .)
    CHARACTER       reduce using rule 150 (declaration_list -> declaration_list declaration .)


state 46

    (146) compound_statement -> { statement_list . }
    (152) statement_list -> statement_list . statement
    (139) statement -> . input_statement
    (140) statement -> . output_statement
    (141) statement -> . compound_statement
    (142) statement -> . expression_statement
    (143) statement -> . selection_statement
    (144) statement -> . iteration_statement
    (145) statement -> . jump_statement
    (171) input_statement -> . CIN IN ID ;
    (172) output_statement -> . COUT output_list ;
    (146) compound_statement -> . { statement_list }
    (147) compound_statement -> . { declaration_list }
    (148) compound_statement -> . { declaration_list statement_list }
    (153) expression_statement -> . ;
    (154) expression_statement -> . expression ;
    (155) selection_statement -> . IF ( expression ) statement
    (156) selection_statement -> . IF ( expression ) statement ELSE statement
    (157) iteration_statement -> . WHILE ( expression ) statement
    (158) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (159) jump_statement -> . CONTINUE ;
    (160) jump_statement -> . BREAK ;
    (161) jump_statement -> . RETURN ;
    (162) jump_statement -> . RETURN expression ;
    (68) expression -> . assignment_expression
    (69) expression -> . expression , assignment_expression
    (57) assignment_expression -> . conditional_expression
    (58) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression

    }               shift and go to state 117
    CIN             shift and go to state 57
    COUT            shift and go to state 59
    {               shift and go to state 29
    ;               shift and go to state 56
    IF              shift and go to state 61
    WHILE           shift and go to state 63
    FOR             shift and go to state 64
    CONTINUE        shift and go to state 65
    BREAK           shift and go to state 66
    RETURN          shift and go to state 67
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90
    (               shift and go to state 62

    statement                      shift and go to state 118
    input_statement                shift and go to state 49
    output_statement               shift and go to state 50
    compound_statement             shift and go to state 51
    expression_statement           shift and go to state 52
    selection_statement            shift and go to state 53
    iteration_statement            shift and go to state 54
    jump_statement                 shift and go to state 55
    expression                     shift and go to state 60
    assignment_expression          shift and go to state 68
    conditional_expression         shift and go to state 69
    unary_expression               shift and go to state 70
    logical_or_expression          shift and go to state 71
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    cast_expression                shift and go to state 76
    logical_and_expression         shift and go to state 77
    primary_expression             shift and go to state 78
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96

state 47

    (147) compound_statement -> { declaration_list . }
    (148) compound_statement -> { declaration_list . statement_list }
    (150) declaration_list -> declaration_list . declaration
    (151) statement_list -> . statement
    (152) statement_list -> . statement_list statement
    (71) declaration -> . declaration_specifiers ;
    (72) declaration -> . declaration_specifiers init_declarator_list ;
    (139) statement -> . input_statement
    (140) statement -> . output_statement
    (141) statement -> . compound_statement
    (142) statement -> . expression_statement
    (143) statement -> . selection_statement
    (144) statement -> . iteration_statement
    (145) statement -> . jump_statement
    (73) declaration_specifiers -> .
    (74) declaration_specifiers -> . type_specifier
    (75) declaration_specifiers -> . type_specifier declaration_specifiers
    (171) input_statement -> . CIN IN ID ;
    (172) output_statement -> . COUT output_list ;
    (146) compound_statement -> . { statement_list }
    (147) compound_statement -> . { declaration_list }
    (148) compound_statement -> . { declaration_list statement_list }
    (153) expression_statement -> . ;
    (154) expression_statement -> . expression ;
    (155) selection_statement -> . IF ( expression ) statement
    (156) selection_statement -> . IF ( expression ) statement ELSE statement
    (157) iteration_statement -> . WHILE ( expression ) statement
    (158) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (159) jump_statement -> . CONTINUE ;
    (160) jump_statement -> . BREAK ;
    (161) jump_statement -> . RETURN ;
    (162) jump_statement -> . RETURN expression ;
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . INT
    (83) type_specifier -> . BOOL
    (84) type_specifier -> . struct_specifier
    (85) type_specifier -> . class_definition
    (68) expression -> . assignment_expression
    (69) expression -> . expression , assignment_expression
    (91) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (86) class_definition -> . CLASS ID { class_member_list }
    (57) assignment_expression -> . conditional_expression
    (58) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression

  ! shift/reduce conflict for ; resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    }               shift and go to state 119
    CIN             shift and go to state 57
    COUT            shift and go to state 59
    {               shift and go to state 29
    ;               shift and go to state 56
    IF              shift and go to state 61
    WHILE           shift and go to state 63
    FOR             shift and go to state 64
    CONTINUE        shift and go to state 65
    BREAK           shift and go to state 66
    RETURN          shift and go to state 67
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90
    (               shift and go to state 62

  ! ;               [ reduce using rule 73 (declaration_specifiers -> .) ]
  ! *               [ reduce using rule 73 (declaration_specifiers -> .) ]
  ! ID              [ reduce using rule 73 (declaration_specifiers -> .) ]
  ! (               [ reduce using rule 73 (declaration_specifiers -> .) ]

    statement_list                 shift and go to state 120
    declaration                    shift and go to state 45
    statement                      shift and go to state 48
    declaration_specifiers         shift and go to state 30
    input_statement                shift and go to state 49
    output_statement               shift and go to state 50
    compound_statement             shift and go to state 51
    expression_statement           shift and go to state 52
    selection_statement            shift and go to state 53
    iteration_statement            shift and go to state 54
    jump_statement                 shift and go to state 55
    type_specifier                 shift and go to state 7
    expression                     shift and go to state 60
    struct_specifier               shift and go to state 14
    class_definition               shift and go to state 15
    assignment_expression          shift and go to state 68
    conditional_expression         shift and go to state 69
    unary_expression               shift and go to state 70
    logical_or_expression          shift and go to state 71
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    cast_expression                shift and go to state 76
    logical_and_expression         shift and go to state 77
    primary_expression             shift and go to state 78
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96

state 48

    (151) statement_list -> statement .

    }               reduce using rule 151 (statement_list -> statement .)
    CIN             reduce using rule 151 (statement_list -> statement .)
    COUT            reduce using rule 151 (statement_list -> statement .)
    {               reduce using rule 151 (statement_list -> statement .)
    ;               reduce using rule 151 (statement_list -> statement .)
    IF              reduce using rule 151 (statement_list -> statement .)
    WHILE           reduce using rule 151 (statement_list -> statement .)
    FOR             reduce using rule 151 (statement_list -> statement .)
    CONTINUE        reduce using rule 151 (statement_list -> statement .)
    BREAK           reduce using rule 151 (statement_list -> statement .)
    RETURN          reduce using rule 151 (statement_list -> statement .)
    INC             reduce using rule 151 (statement_list -> statement .)
    DEC             reduce using rule 151 (statement_list -> statement .)
    &               reduce using rule 151 (statement_list -> statement .)
    *               reduce using rule 151 (statement_list -> statement .)
    +               reduce using rule 151 (statement_list -> statement .)
    -               reduce using rule 151 (statement_list -> statement .)
    ~               reduce using rule 151 (statement_list -> statement .)
    !               reduce using rule 151 (statement_list -> statement .)
    ID              reduce using rule 151 (statement_list -> statement .)
    INTEGER         reduce using rule 151 (statement_list -> statement .)
    STRING          reduce using rule 151 (statement_list -> statement .)
    TRUE            reduce using rule 151 (statement_list -> statement .)
    FALSE           reduce using rule 151 (statement_list -> statement .)
    CHARACTER       reduce using rule 151 (statement_list -> statement .)
    (               reduce using rule 151 (statement_list -> statement .)


state 49

    (139) statement -> input_statement .

    }               reduce using rule 139 (statement -> input_statement .)
    CIN             reduce using rule 139 (statement -> input_statement .)
    COUT            reduce using rule 139 (statement -> input_statement .)
    {               reduce using rule 139 (statement -> input_statement .)
    ;               reduce using rule 139 (statement -> input_statement .)
    IF              reduce using rule 139 (statement -> input_statement .)
    WHILE           reduce using rule 139 (statement -> input_statement .)
    FOR             reduce using rule 139 (statement -> input_statement .)
    CONTINUE        reduce using rule 139 (statement -> input_statement .)
    BREAK           reduce using rule 139 (statement -> input_statement .)
    RETURN          reduce using rule 139 (statement -> input_statement .)
    INC             reduce using rule 139 (statement -> input_statement .)
    DEC             reduce using rule 139 (statement -> input_statement .)
    &               reduce using rule 139 (statement -> input_statement .)
    *               reduce using rule 139 (statement -> input_statement .)
    +               reduce using rule 139 (statement -> input_statement .)
    -               reduce using rule 139 (statement -> input_statement .)
    ~               reduce using rule 139 (statement -> input_statement .)
    !               reduce using rule 139 (statement -> input_statement .)
    ID              reduce using rule 139 (statement -> input_statement .)
    INTEGER         reduce using rule 139 (statement -> input_statement .)
    STRING          reduce using rule 139 (statement -> input_statement .)
    TRUE            reduce using rule 139 (statement -> input_statement .)
    FALSE           reduce using rule 139 (statement -> input_statement .)
    CHARACTER       reduce using rule 139 (statement -> input_statement .)
    (               reduce using rule 139 (statement -> input_statement .)
    ELSE            reduce using rule 139 (statement -> input_statement .)


state 50

    (140) statement -> output_statement .

    }               reduce using rule 140 (statement -> output_statement .)
    CIN             reduce using rule 140 (statement -> output_statement .)
    COUT            reduce using rule 140 (statement -> output_statement .)
    {               reduce using rule 140 (statement -> output_statement .)
    ;               reduce using rule 140 (statement -> output_statement .)
    IF              reduce using rule 140 (statement -> output_statement .)
    WHILE           reduce using rule 140 (statement -> output_statement .)
    FOR             reduce using rule 140 (statement -> output_statement .)
    CONTINUE        reduce using rule 140 (statement -> output_statement .)
    BREAK           reduce using rule 140 (statement -> output_statement .)
    RETURN          reduce using rule 140 (statement -> output_statement .)
    INC             reduce using rule 140 (statement -> output_statement .)
    DEC             reduce using rule 140 (statement -> output_statement .)
    &               reduce using rule 140 (statement -> output_statement .)
    *               reduce using rule 140 (statement -> output_statement .)
    +               reduce using rule 140 (statement -> output_statement .)
    -               reduce using rule 140 (statement -> output_statement .)
    ~               reduce using rule 140 (statement -> output_statement .)
    !               reduce using rule 140 (statement -> output_statement .)
    ID              reduce using rule 140 (statement -> output_statement .)
    INTEGER         reduce using rule 140 (statement -> output_statement .)
    STRING          reduce using rule 140 (statement -> output_statement .)
    TRUE            reduce using rule 140 (statement -> output_statement .)
    FALSE           reduce using rule 140 (statement -> output_statement .)
    CHARACTER       reduce using rule 140 (statement -> output_statement .)
    (               reduce using rule 140 (statement -> output_statement .)
    ELSE            reduce using rule 140 (statement -> output_statement .)


state 51

    (141) statement -> compound_statement .

    }               reduce using rule 141 (statement -> compound_statement .)
    CIN             reduce using rule 141 (statement -> compound_statement .)
    COUT            reduce using rule 141 (statement -> compound_statement .)
    {               reduce using rule 141 (statement -> compound_statement .)
    ;               reduce using rule 141 (statement -> compound_statement .)
    IF              reduce using rule 141 (statement -> compound_statement .)
    WHILE           reduce using rule 141 (statement -> compound_statement .)
    FOR             reduce using rule 141 (statement -> compound_statement .)
    CONTINUE        reduce using rule 141 (statement -> compound_statement .)
    BREAK           reduce using rule 141 (statement -> compound_statement .)
    RETURN          reduce using rule 141 (statement -> compound_statement .)
    INC             reduce using rule 141 (statement -> compound_statement .)
    DEC             reduce using rule 141 (statement -> compound_statement .)
    &               reduce using rule 141 (statement -> compound_statement .)
    *               reduce using rule 141 (statement -> compound_statement .)
    +               reduce using rule 141 (statement -> compound_statement .)
    -               reduce using rule 141 (statement -> compound_statement .)
    ~               reduce using rule 141 (statement -> compound_statement .)
    !               reduce using rule 141 (statement -> compound_statement .)
    ID              reduce using rule 141 (statement -> compound_statement .)
    INTEGER         reduce using rule 141 (statement -> compound_statement .)
    STRING          reduce using rule 141 (statement -> compound_statement .)
    TRUE            reduce using rule 141 (statement -> compound_statement .)
    FALSE           reduce using rule 141 (statement -> compound_statement .)
    CHARACTER       reduce using rule 141 (statement -> compound_statement .)
    (               reduce using rule 141 (statement -> compound_statement .)
    ELSE            reduce using rule 141 (statement -> compound_statement .)


state 52

    (142) statement -> expression_statement .

    }               reduce using rule 142 (statement -> expression_statement .)
    CIN             reduce using rule 142 (statement -> expression_statement .)
    COUT            reduce using rule 142 (statement -> expression_statement .)
    {               reduce using rule 142 (statement -> expression_statement .)
    ;               reduce using rule 142 (statement -> expression_statement .)
    IF              reduce using rule 142 (statement -> expression_statement .)
    WHILE           reduce using rule 142 (statement -> expression_statement .)
    FOR             reduce using rule 142 (statement -> expression_statement .)
    CONTINUE        reduce using rule 142 (statement -> expression_statement .)
    BREAK           reduce using rule 142 (statement -> expression_statement .)
    RETURN          reduce using rule 142 (statement -> expression_statement .)
    INC             reduce using rule 142 (statement -> expression_statement .)
    DEC             reduce using rule 142 (statement -> expression_statement .)
    &               reduce using rule 142 (statement -> expression_statement .)
    *               reduce using rule 142 (statement -> expression_statement .)
    +               reduce using rule 142 (statement -> expression_statement .)
    -               reduce using rule 142 (statement -> expression_statement .)
    ~               reduce using rule 142 (statement -> expression_statement .)
    !               reduce using rule 142 (statement -> expression_statement .)
    ID              reduce using rule 142 (statement -> expression_statement .)
    INTEGER         reduce using rule 142 (statement -> expression_statement .)
    STRING          reduce using rule 142 (statement -> expression_statement .)
    TRUE            reduce using rule 142 (statement -> expression_statement .)
    FALSE           reduce using rule 142 (statement -> expression_statement .)
    CHARACTER       reduce using rule 142 (statement -> expression_statement .)
    (               reduce using rule 142 (statement -> expression_statement .)
    ELSE            reduce using rule 142 (statement -> expression_statement .)


state 53

    (143) statement -> selection_statement .

    }               reduce using rule 143 (statement -> selection_statement .)
    CIN             reduce using rule 143 (statement -> selection_statement .)
    COUT            reduce using rule 143 (statement -> selection_statement .)
    {               reduce using rule 143 (statement -> selection_statement .)
    ;               reduce using rule 143 (statement -> selection_statement .)
    IF              reduce using rule 143 (statement -> selection_statement .)
    WHILE           reduce using rule 143 (statement -> selection_statement .)
    FOR             reduce using rule 143 (statement -> selection_statement .)
    CONTINUE        reduce using rule 143 (statement -> selection_statement .)
    BREAK           reduce using rule 143 (statement -> selection_statement .)
    RETURN          reduce using rule 143 (statement -> selection_statement .)
    INC             reduce using rule 143 (statement -> selection_statement .)
    DEC             reduce using rule 143 (statement -> selection_statement .)
    &               reduce using rule 143 (statement -> selection_statement .)
    *               reduce using rule 143 (statement -> selection_statement .)
    +               reduce using rule 143 (statement -> selection_statement .)
    -               reduce using rule 143 (statement -> selection_statement .)
    ~               reduce using rule 143 (statement -> selection_statement .)
    !               reduce using rule 143 (statement -> selection_statement .)
    ID              reduce using rule 143 (statement -> selection_statement .)
    INTEGER         reduce using rule 143 (statement -> selection_statement .)
    STRING          reduce using rule 143 (statement -> selection_statement .)
    TRUE            reduce using rule 143 (statement -> selection_statement .)
    FALSE           reduce using rule 143 (statement -> selection_statement .)
    CHARACTER       reduce using rule 143 (statement -> selection_statement .)
    (               reduce using rule 143 (statement -> selection_statement .)
    ELSE            reduce using rule 143 (statement -> selection_statement .)


state 54

    (144) statement -> iteration_statement .

    }               reduce using rule 144 (statement -> iteration_statement .)
    CIN             reduce using rule 144 (statement -> iteration_statement .)
    COUT            reduce using rule 144 (statement -> iteration_statement .)
    {               reduce using rule 144 (statement -> iteration_statement .)
    ;               reduce using rule 144 (statement -> iteration_statement .)
    IF              reduce using rule 144 (statement -> iteration_statement .)
    WHILE           reduce using rule 144 (statement -> iteration_statement .)
    FOR             reduce using rule 144 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 144 (statement -> iteration_statement .)
    BREAK           reduce using rule 144 (statement -> iteration_statement .)
    RETURN          reduce using rule 144 (statement -> iteration_statement .)
    INC             reduce using rule 144 (statement -> iteration_statement .)
    DEC             reduce using rule 144 (statement -> iteration_statement .)
    &               reduce using rule 144 (statement -> iteration_statement .)
    *               reduce using rule 144 (statement -> iteration_statement .)
    +               reduce using rule 144 (statement -> iteration_statement .)
    -               reduce using rule 144 (statement -> iteration_statement .)
    ~               reduce using rule 144 (statement -> iteration_statement .)
    !               reduce using rule 144 (statement -> iteration_statement .)
    ID              reduce using rule 144 (statement -> iteration_statement .)
    INTEGER         reduce using rule 144 (statement -> iteration_statement .)
    STRING          reduce using rule 144 (statement -> iteration_statement .)
    TRUE            reduce using rule 144 (statement -> iteration_statement .)
    FALSE           reduce using rule 144 (statement -> iteration_statement .)
    CHARACTER       reduce using rule 144 (statement -> iteration_statement .)
    (               reduce using rule 144 (statement -> iteration_statement .)
    ELSE            reduce using rule 144 (statement -> iteration_statement .)


state 55

    (145) statement -> jump_statement .

    }               reduce using rule 145 (statement -> jump_statement .)
    CIN             reduce using rule 145 (statement -> jump_statement .)
    COUT            reduce using rule 145 (statement -> jump_statement .)
    {               reduce using rule 145 (statement -> jump_statement .)
    ;               reduce using rule 145 (statement -> jump_statement .)
    IF              reduce using rule 145 (statement -> jump_statement .)
    WHILE           reduce using rule 145 (statement -> jump_statement .)
    FOR             reduce using rule 145 (statement -> jump_statement .)
    CONTINUE        reduce using rule 145 (statement -> jump_statement .)
    BREAK           reduce using rule 145 (statement -> jump_statement .)
    RETURN          reduce using rule 145 (statement -> jump_statement .)
    INC             reduce using rule 145 (statement -> jump_statement .)
    DEC             reduce using rule 145 (statement -> jump_statement .)
    &               reduce using rule 145 (statement -> jump_statement .)
    *               reduce using rule 145 (statement -> jump_statement .)
    +               reduce using rule 145 (statement -> jump_statement .)
    -               reduce using rule 145 (statement -> jump_statement .)
    ~               reduce using rule 145 (statement -> jump_statement .)
    !               reduce using rule 145 (statement -> jump_statement .)
    ID              reduce using rule 145 (statement -> jump_statement .)
    INTEGER         reduce using rule 145 (statement -> jump_statement .)
    STRING          reduce using rule 145 (statement -> jump_statement .)
    TRUE            reduce using rule 145 (statement -> jump_statement .)
    FALSE           reduce using rule 145 (statement -> jump_statement .)
    CHARACTER       reduce using rule 145 (statement -> jump_statement .)
    (               reduce using rule 145 (statement -> jump_statement .)
    ELSE            reduce using rule 145 (statement -> jump_statement .)


state 56

    (153) expression_statement -> ; .

    }               reduce using rule 153 (expression_statement -> ; .)
    CIN             reduce using rule 153 (expression_statement -> ; .)
    COUT            reduce using rule 153 (expression_statement -> ; .)
    {               reduce using rule 153 (expression_statement -> ; .)
    ;               reduce using rule 153 (expression_statement -> ; .)
    IF              reduce using rule 153 (expression_statement -> ; .)
    WHILE           reduce using rule 153 (expression_statement -> ; .)
    FOR             reduce using rule 153 (expression_statement -> ; .)
    CONTINUE        reduce using rule 153 (expression_statement -> ; .)
    BREAK           reduce using rule 153 (expression_statement -> ; .)
    RETURN          reduce using rule 153 (expression_statement -> ; .)
    INC             reduce using rule 153 (expression_statement -> ; .)
    DEC             reduce using rule 153 (expression_statement -> ; .)
    &               reduce using rule 153 (expression_statement -> ; .)
    *               reduce using rule 153 (expression_statement -> ; .)
    +               reduce using rule 153 (expression_statement -> ; .)
    -               reduce using rule 153 (expression_statement -> ; .)
    ~               reduce using rule 153 (expression_statement -> ; .)
    !               reduce using rule 153 (expression_statement -> ; .)
    ID              reduce using rule 153 (expression_statement -> ; .)
    INTEGER         reduce using rule 153 (expression_statement -> ; .)
    STRING          reduce using rule 153 (expression_statement -> ; .)
    TRUE            reduce using rule 153 (expression_statement -> ; .)
    FALSE           reduce using rule 153 (expression_statement -> ; .)
    CHARACTER       reduce using rule 153 (expression_statement -> ; .)
    (               reduce using rule 153 (expression_statement -> ; .)
    ELSE            reduce using rule 153 (expression_statement -> ; .)


state 57

    (171) input_statement -> CIN . IN ID ;

    IN              shift and go to state 121


state 58

    (1) primary_expression -> ID .

    [               reduce using rule 1 (primary_expression -> ID .)
    (               reduce using rule 1 (primary_expression -> ID .)
    .               reduce using rule 1 (primary_expression -> ID .)
    PTR             reduce using rule 1 (primary_expression -> ID .)
    INC             reduce using rule 1 (primary_expression -> ID .)
    DEC             reduce using rule 1 (primary_expression -> ID .)
    =               reduce using rule 1 (primary_expression -> ID .)
    MUL_EQ          reduce using rule 1 (primary_expression -> ID .)
    DIV_EQ          reduce using rule 1 (primary_expression -> ID .)
    MOD_EQ          reduce using rule 1 (primary_expression -> ID .)
    ADD_EQ          reduce using rule 1 (primary_expression -> ID .)
    SUB_EQ          reduce using rule 1 (primary_expression -> ID .)
    AND_EQ          reduce using rule 1 (primary_expression -> ID .)
    XOR_EQ          reduce using rule 1 (primary_expression -> ID .)
    OR_EQ           reduce using rule 1 (primary_expression -> ID .)
    *               reduce using rule 1 (primary_expression -> ID .)
    /               reduce using rule 1 (primary_expression -> ID .)
    %               reduce using rule 1 (primary_expression -> ID .)
    +               reduce using rule 1 (primary_expression -> ID .)
    -               reduce using rule 1 (primary_expression -> ID .)
    <               reduce using rule 1 (primary_expression -> ID .)
    >               reduce using rule 1 (primary_expression -> ID .)
    LE              reduce using rule 1 (primary_expression -> ID .)
    GE              reduce using rule 1 (primary_expression -> ID .)
    EQUAL           reduce using rule 1 (primary_expression -> ID .)
    NE              reduce using rule 1 (primary_expression -> ID .)
    &               reduce using rule 1 (primary_expression -> ID .)
    ^               reduce using rule 1 (primary_expression -> ID .)
    |               reduce using rule 1 (primary_expression -> ID .)
    AND             reduce using rule 1 (primary_expression -> ID .)
    ?               reduce using rule 1 (primary_expression -> ID .)
    OR              reduce using rule 1 (primary_expression -> ID .)
    ;               reduce using rule 1 (primary_expression -> ID .)
    ,               reduce using rule 1 (primary_expression -> ID .)
    ]               reduce using rule 1 (primary_expression -> ID .)
    )               reduce using rule 1 (primary_expression -> ID .)
    }               reduce using rule 1 (primary_expression -> ID .)
    :               reduce using rule 1 (primary_expression -> ID .)
    OUT             reduce using rule 1 (primary_expression -> ID .)


state 59

    (172) output_statement -> COUT . output_list ;
    (173) output_list -> . OUT primary_expression
    (174) output_list -> . output_list OUT primary_expression

    OUT             shift and go to state 123

    output_list                    shift and go to state 122

state 60

    (154) expression_statement -> expression . ;
    (69) expression -> expression . , assignment_expression

    ;               shift and go to state 124
    ,               shift and go to state 125


state 61

    (155) selection_statement -> IF . ( expression ) statement
    (156) selection_statement -> IF . ( expression ) statement ELSE statement

    (               shift and go to state 126


state 62

    (7) primary_expression -> ( . expression )
    (29) cast_expression -> ( . type_name ) cast_expression
    (68) expression -> . assignment_expression
    (69) expression -> . expression , assignment_expression
    (120) type_name -> . specifier_qualifier_list
    (121) type_name -> . specifier_qualifier_list abstract_declarator
    (57) assignment_expression -> . conditional_expression
    (58) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (95) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (96) specifier_qualifier_list -> . type_specifier
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . INT
    (83) type_specifier -> . BOOL
    (84) type_specifier -> . struct_specifier
    (85) type_specifier -> . class_definition
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (91) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (86) class_definition -> . CLASS ID { class_member_list }
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression

    INC             shift and go to state 73
    DEC             shift and go to state 74
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90
    (               shift and go to state 62

    expression                     shift and go to state 127
    type_name                      shift and go to state 128
    cast_expression                shift and go to state 76
    assignment_expression          shift and go to state 68
    specifier_qualifier_list       shift and go to state 129
    conditional_expression         shift and go to state 69
    unary_expression               shift and go to state 70
    type_specifier                 shift and go to state 130
    logical_or_expression          shift and go to state 71
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    struct_specifier               shift and go to state 14
    class_definition               shift and go to state 15
    logical_and_expression         shift and go to state 77
    primary_expression             shift and go to state 78
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96

state 63

    (157) iteration_statement -> WHILE . ( expression ) statement

    (               shift and go to state 131


state 64

    (158) iteration_statement -> FOR . ( expression_statement expression_statement expression ) statement

    (               shift and go to state 132


state 65

    (159) jump_statement -> CONTINUE . ;

    ;               shift and go to state 133


state 66

    (160) jump_statement -> BREAK . ;

    ;               shift and go to state 134


state 67

    (161) jump_statement -> RETURN . ;
    (162) jump_statement -> RETURN . expression ;
    (68) expression -> . assignment_expression
    (69) expression -> . expression , assignment_expression
    (57) assignment_expression -> . conditional_expression
    (58) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression

    ;               shift and go to state 135
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90
    (               shift and go to state 62

    expression                     shift and go to state 136
    assignment_expression          shift and go to state 68
    conditional_expression         shift and go to state 69
    unary_expression               shift and go to state 70
    logical_or_expression          shift and go to state 71
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    cast_expression                shift and go to state 76
    logical_and_expression         shift and go to state 77
    primary_expression             shift and go to state 78
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96

state 68

    (68) expression -> assignment_expression .

    ;               reduce using rule 68 (expression -> assignment_expression .)
    ,               reduce using rule 68 (expression -> assignment_expression .)
    )               reduce using rule 68 (expression -> assignment_expression .)
    :               reduce using rule 68 (expression -> assignment_expression .)
    ]               reduce using rule 68 (expression -> assignment_expression .)


state 69

    (57) assignment_expression -> conditional_expression .

    ;               reduce using rule 57 (assignment_expression -> conditional_expression .)
    ,               reduce using rule 57 (assignment_expression -> conditional_expression .)
    )               reduce using rule 57 (assignment_expression -> conditional_expression .)
    }               reduce using rule 57 (assignment_expression -> conditional_expression .)
    :               reduce using rule 57 (assignment_expression -> conditional_expression .)
    ]               reduce using rule 57 (assignment_expression -> conditional_expression .)


state 70

    (58) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (28) cast_expression -> unary_expression .
    (59) assignment_operator -> . =
    (60) assignment_operator -> . MUL_EQ
    (61) assignment_operator -> . DIV_EQ
    (62) assignment_operator -> . MOD_EQ
    (63) assignment_operator -> . ADD_EQ
    (64) assignment_operator -> . SUB_EQ
    (65) assignment_operator -> . AND_EQ
    (66) assignment_operator -> . XOR_EQ
    (67) assignment_operator -> . OR_EQ

    *               reduce using rule 28 (cast_expression -> unary_expression .)
    /               reduce using rule 28 (cast_expression -> unary_expression .)
    %               reduce using rule 28 (cast_expression -> unary_expression .)
    +               reduce using rule 28 (cast_expression -> unary_expression .)
    -               reduce using rule 28 (cast_expression -> unary_expression .)
    <               reduce using rule 28 (cast_expression -> unary_expression .)
    >               reduce using rule 28 (cast_expression -> unary_expression .)
    LE              reduce using rule 28 (cast_expression -> unary_expression .)
    GE              reduce using rule 28 (cast_expression -> unary_expression .)
    EQUAL           reduce using rule 28 (cast_expression -> unary_expression .)
    NE              reduce using rule 28 (cast_expression -> unary_expression .)
    &               reduce using rule 28 (cast_expression -> unary_expression .)
    ^               reduce using rule 28 (cast_expression -> unary_expression .)
    |               reduce using rule 28 (cast_expression -> unary_expression .)
    AND             reduce using rule 28 (cast_expression -> unary_expression .)
    ?               reduce using rule 28 (cast_expression -> unary_expression .)
    OR              reduce using rule 28 (cast_expression -> unary_expression .)
    ;               reduce using rule 28 (cast_expression -> unary_expression .)
    ,               reduce using rule 28 (cast_expression -> unary_expression .)
    )               reduce using rule 28 (cast_expression -> unary_expression .)
    }               reduce using rule 28 (cast_expression -> unary_expression .)
    :               reduce using rule 28 (cast_expression -> unary_expression .)
    ]               reduce using rule 28 (cast_expression -> unary_expression .)
    =               shift and go to state 138
    MUL_EQ          shift and go to state 139
    DIV_EQ          shift and go to state 140
    MOD_EQ          shift and go to state 141
    ADD_EQ          shift and go to state 142
    SUB_EQ          shift and go to state 143
    AND_EQ          shift and go to state 144
    XOR_EQ          shift and go to state 145
    OR_EQ           shift and go to state 146

    assignment_operator            shift and go to state 137

state 71

    (55) conditional_expression -> logical_or_expression .
    (56) conditional_expression -> logical_or_expression . ? expression : conditional_expression
    (54) logical_or_expression -> logical_or_expression . OR logical_and_expression

    ;               reduce using rule 55 (conditional_expression -> logical_or_expression .)
    ,               reduce using rule 55 (conditional_expression -> logical_or_expression .)
    ]               reduce using rule 55 (conditional_expression -> logical_or_expression .)
    )               reduce using rule 55 (conditional_expression -> logical_or_expression .)
    }               reduce using rule 55 (conditional_expression -> logical_or_expression .)
    :               reduce using rule 55 (conditional_expression -> logical_or_expression .)
    ?               shift and go to state 147
    OR              shift and go to state 148


state 72

    (18) unary_expression -> postfix_expression .
    (9) postfix_expression -> postfix_expression . [ expression ]
    (10) postfix_expression -> postfix_expression . ( )
    (11) postfix_expression -> postfix_expression . ( argument_expression_list )
    (12) postfix_expression -> postfix_expression . . ID
    (13) postfix_expression -> postfix_expression . PTR ID
    (14) postfix_expression -> postfix_expression . INC
    (15) postfix_expression -> postfix_expression . DEC

    =               reduce using rule 18 (unary_expression -> postfix_expression .)
    MUL_EQ          reduce using rule 18 (unary_expression -> postfix_expression .)
    DIV_EQ          reduce using rule 18 (unary_expression -> postfix_expression .)
    MOD_EQ          reduce using rule 18 (unary_expression -> postfix_expression .)
    ADD_EQ          reduce using rule 18 (unary_expression -> postfix_expression .)
    SUB_EQ          reduce using rule 18 (unary_expression -> postfix_expression .)
    AND_EQ          reduce using rule 18 (unary_expression -> postfix_expression .)
    XOR_EQ          reduce using rule 18 (unary_expression -> postfix_expression .)
    OR_EQ           reduce using rule 18 (unary_expression -> postfix_expression .)
    *               reduce using rule 18 (unary_expression -> postfix_expression .)
    /               reduce using rule 18 (unary_expression -> postfix_expression .)
    %               reduce using rule 18 (unary_expression -> postfix_expression .)
    +               reduce using rule 18 (unary_expression -> postfix_expression .)
    -               reduce using rule 18 (unary_expression -> postfix_expression .)
    <               reduce using rule 18 (unary_expression -> postfix_expression .)
    >               reduce using rule 18 (unary_expression -> postfix_expression .)
    LE              reduce using rule 18 (unary_expression -> postfix_expression .)
    GE              reduce using rule 18 (unary_expression -> postfix_expression .)
    EQUAL           reduce using rule 18 (unary_expression -> postfix_expression .)
    NE              reduce using rule 18 (unary_expression -> postfix_expression .)
    &               reduce using rule 18 (unary_expression -> postfix_expression .)
    ^               reduce using rule 18 (unary_expression -> postfix_expression .)
    |               reduce using rule 18 (unary_expression -> postfix_expression .)
    AND             reduce using rule 18 (unary_expression -> postfix_expression .)
    ?               reduce using rule 18 (unary_expression -> postfix_expression .)
    OR              reduce using rule 18 (unary_expression -> postfix_expression .)
    ;               reduce using rule 18 (unary_expression -> postfix_expression .)
    ,               reduce using rule 18 (unary_expression -> postfix_expression .)
    ]               reduce using rule 18 (unary_expression -> postfix_expression .)
    )               reduce using rule 18 (unary_expression -> postfix_expression .)
    }               reduce using rule 18 (unary_expression -> postfix_expression .)
    :               reduce using rule 18 (unary_expression -> postfix_expression .)
    [               shift and go to state 149
    (               shift and go to state 150
    .               shift and go to state 151
    PTR             shift and go to state 152
    INC             shift and go to state 153
    DEC             shift and go to state 154


state 73

    (19) unary_expression -> INC . unary_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )

    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90
    (               shift and go to state 156

    unary_expression               shift and go to state 155
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    primary_expression             shift and go to state 78

state 74

    (20) unary_expression -> DEC . unary_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )

    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90
    (               shift and go to state 156

    unary_expression               shift and go to state 157
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    primary_expression             shift and go to state 78

state 75

    (21) unary_expression -> unary_operator . cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )

    (               shift and go to state 102
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90

    unary_operator                 shift and go to state 75
    cast_expression                shift and go to state 158
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 72
    primary_expression             shift and go to state 78

state 76

    (30) multiplicative_expression -> cast_expression .

    *               reduce using rule 30 (multiplicative_expression -> cast_expression .)
    /               reduce using rule 30 (multiplicative_expression -> cast_expression .)
    %               reduce using rule 30 (multiplicative_expression -> cast_expression .)
    +               reduce using rule 30 (multiplicative_expression -> cast_expression .)
    -               reduce using rule 30 (multiplicative_expression -> cast_expression .)
    <               reduce using rule 30 (multiplicative_expression -> cast_expression .)
    >               reduce using rule 30 (multiplicative_expression -> cast_expression .)
    LE              reduce using rule 30 (multiplicative_expression -> cast_expression .)
    GE              reduce using rule 30 (multiplicative_expression -> cast_expression .)
    EQUAL           reduce using rule 30 (multiplicative_expression -> cast_expression .)
    NE              reduce using rule 30 (multiplicative_expression -> cast_expression .)
    &               reduce using rule 30 (multiplicative_expression -> cast_expression .)
    ^               reduce using rule 30 (multiplicative_expression -> cast_expression .)
    |               reduce using rule 30 (multiplicative_expression -> cast_expression .)
    AND             reduce using rule 30 (multiplicative_expression -> cast_expression .)
    ?               reduce using rule 30 (multiplicative_expression -> cast_expression .)
    OR              reduce using rule 30 (multiplicative_expression -> cast_expression .)
    ;               reduce using rule 30 (multiplicative_expression -> cast_expression .)
    ,               reduce using rule 30 (multiplicative_expression -> cast_expression .)
    ]               reduce using rule 30 (multiplicative_expression -> cast_expression .)
    )               reduce using rule 30 (multiplicative_expression -> cast_expression .)
    }               reduce using rule 30 (multiplicative_expression -> cast_expression .)
    :               reduce using rule 30 (multiplicative_expression -> cast_expression .)


state 77

    (53) logical_or_expression -> logical_and_expression .
    (52) logical_and_expression -> logical_and_expression . AND inclusive_or_expression

    ?               reduce using rule 53 (logical_or_expression -> logical_and_expression .)
    OR              reduce using rule 53 (logical_or_expression -> logical_and_expression .)
    ;               reduce using rule 53 (logical_or_expression -> logical_and_expression .)
    ,               reduce using rule 53 (logical_or_expression -> logical_and_expression .)
    ]               reduce using rule 53 (logical_or_expression -> logical_and_expression .)
    )               reduce using rule 53 (logical_or_expression -> logical_and_expression .)
    }               reduce using rule 53 (logical_or_expression -> logical_and_expression .)
    :               reduce using rule 53 (logical_or_expression -> logical_and_expression .)
    AND             shift and go to state 159


state 78

    (8) postfix_expression -> primary_expression .

    [               reduce using rule 8 (postfix_expression -> primary_expression .)
    (               reduce using rule 8 (postfix_expression -> primary_expression .)
    .               reduce using rule 8 (postfix_expression -> primary_expression .)
    PTR             reduce using rule 8 (postfix_expression -> primary_expression .)
    INC             reduce using rule 8 (postfix_expression -> primary_expression .)
    DEC             reduce using rule 8 (postfix_expression -> primary_expression .)
    =               reduce using rule 8 (postfix_expression -> primary_expression .)
    MUL_EQ          reduce using rule 8 (postfix_expression -> primary_expression .)
    DIV_EQ          reduce using rule 8 (postfix_expression -> primary_expression .)
    MOD_EQ          reduce using rule 8 (postfix_expression -> primary_expression .)
    ADD_EQ          reduce using rule 8 (postfix_expression -> primary_expression .)
    SUB_EQ          reduce using rule 8 (postfix_expression -> primary_expression .)
    AND_EQ          reduce using rule 8 (postfix_expression -> primary_expression .)
    XOR_EQ          reduce using rule 8 (postfix_expression -> primary_expression .)
    OR_EQ           reduce using rule 8 (postfix_expression -> primary_expression .)
    *               reduce using rule 8 (postfix_expression -> primary_expression .)
    /               reduce using rule 8 (postfix_expression -> primary_expression .)
    %               reduce using rule 8 (postfix_expression -> primary_expression .)
    +               reduce using rule 8 (postfix_expression -> primary_expression .)
    -               reduce using rule 8 (postfix_expression -> primary_expression .)
    <               reduce using rule 8 (postfix_expression -> primary_expression .)
    >               reduce using rule 8 (postfix_expression -> primary_expression .)
    LE              reduce using rule 8 (postfix_expression -> primary_expression .)
    GE              reduce using rule 8 (postfix_expression -> primary_expression .)
    EQUAL           reduce using rule 8 (postfix_expression -> primary_expression .)
    NE              reduce using rule 8 (postfix_expression -> primary_expression .)
    &               reduce using rule 8 (postfix_expression -> primary_expression .)
    ^               reduce using rule 8 (postfix_expression -> primary_expression .)
    |               reduce using rule 8 (postfix_expression -> primary_expression .)
    AND             reduce using rule 8 (postfix_expression -> primary_expression .)
    ?               reduce using rule 8 (postfix_expression -> primary_expression .)
    OR              reduce using rule 8 (postfix_expression -> primary_expression .)
    ;               reduce using rule 8 (postfix_expression -> primary_expression .)
    ,               reduce using rule 8 (postfix_expression -> primary_expression .)
    ]               reduce using rule 8 (postfix_expression -> primary_expression .)
    )               reduce using rule 8 (postfix_expression -> primary_expression .)
    }               reduce using rule 8 (postfix_expression -> primary_expression .)
    :               reduce using rule 8 (postfix_expression -> primary_expression .)


state 79

    (22) unary_operator -> & .

    (               reduce using rule 22 (unary_operator -> & .)
    INC             reduce using rule 22 (unary_operator -> & .)
    DEC             reduce using rule 22 (unary_operator -> & .)
    &               reduce using rule 22 (unary_operator -> & .)
    *               reduce using rule 22 (unary_operator -> & .)
    +               reduce using rule 22 (unary_operator -> & .)
    -               reduce using rule 22 (unary_operator -> & .)
    ~               reduce using rule 22 (unary_operator -> & .)
    !               reduce using rule 22 (unary_operator -> & .)
    ID              reduce using rule 22 (unary_operator -> & .)
    INTEGER         reduce using rule 22 (unary_operator -> & .)
    STRING          reduce using rule 22 (unary_operator -> & .)
    TRUE            reduce using rule 22 (unary_operator -> & .)
    FALSE           reduce using rule 22 (unary_operator -> & .)
    CHARACTER       reduce using rule 22 (unary_operator -> & .)


state 80

    (23) unary_operator -> * .

    (               reduce using rule 23 (unary_operator -> * .)
    INC             reduce using rule 23 (unary_operator -> * .)
    DEC             reduce using rule 23 (unary_operator -> * .)
    &               reduce using rule 23 (unary_operator -> * .)
    *               reduce using rule 23 (unary_operator -> * .)
    +               reduce using rule 23 (unary_operator -> * .)
    -               reduce using rule 23 (unary_operator -> * .)
    ~               reduce using rule 23 (unary_operator -> * .)
    !               reduce using rule 23 (unary_operator -> * .)
    ID              reduce using rule 23 (unary_operator -> * .)
    INTEGER         reduce using rule 23 (unary_operator -> * .)
    STRING          reduce using rule 23 (unary_operator -> * .)
    TRUE            reduce using rule 23 (unary_operator -> * .)
    FALSE           reduce using rule 23 (unary_operator -> * .)
    CHARACTER       reduce using rule 23 (unary_operator -> * .)


state 81

    (24) unary_operator -> + .

    (               reduce using rule 24 (unary_operator -> + .)
    INC             reduce using rule 24 (unary_operator -> + .)
    DEC             reduce using rule 24 (unary_operator -> + .)
    &               reduce using rule 24 (unary_operator -> + .)
    *               reduce using rule 24 (unary_operator -> + .)
    +               reduce using rule 24 (unary_operator -> + .)
    -               reduce using rule 24 (unary_operator -> + .)
    ~               reduce using rule 24 (unary_operator -> + .)
    !               reduce using rule 24 (unary_operator -> + .)
    ID              reduce using rule 24 (unary_operator -> + .)
    INTEGER         reduce using rule 24 (unary_operator -> + .)
    STRING          reduce using rule 24 (unary_operator -> + .)
    TRUE            reduce using rule 24 (unary_operator -> + .)
    FALSE           reduce using rule 24 (unary_operator -> + .)
    CHARACTER       reduce using rule 24 (unary_operator -> + .)


state 82

    (25) unary_operator -> - .

    (               reduce using rule 25 (unary_operator -> - .)
    INC             reduce using rule 25 (unary_operator -> - .)
    DEC             reduce using rule 25 (unary_operator -> - .)
    &               reduce using rule 25 (unary_operator -> - .)
    *               reduce using rule 25 (unary_operator -> - .)
    +               reduce using rule 25 (unary_operator -> - .)
    -               reduce using rule 25 (unary_operator -> - .)
    ~               reduce using rule 25 (unary_operator -> - .)
    !               reduce using rule 25 (unary_operator -> - .)
    ID              reduce using rule 25 (unary_operator -> - .)
    INTEGER         reduce using rule 25 (unary_operator -> - .)
    STRING          reduce using rule 25 (unary_operator -> - .)
    TRUE            reduce using rule 25 (unary_operator -> - .)
    FALSE           reduce using rule 25 (unary_operator -> - .)
    CHARACTER       reduce using rule 25 (unary_operator -> - .)


state 83

    (26) unary_operator -> ~ .

    (               reduce using rule 26 (unary_operator -> ~ .)
    INC             reduce using rule 26 (unary_operator -> ~ .)
    DEC             reduce using rule 26 (unary_operator -> ~ .)
    &               reduce using rule 26 (unary_operator -> ~ .)
    *               reduce using rule 26 (unary_operator -> ~ .)
    +               reduce using rule 26 (unary_operator -> ~ .)
    -               reduce using rule 26 (unary_operator -> ~ .)
    ~               reduce using rule 26 (unary_operator -> ~ .)
    !               reduce using rule 26 (unary_operator -> ~ .)
    ID              reduce using rule 26 (unary_operator -> ~ .)
    INTEGER         reduce using rule 26 (unary_operator -> ~ .)
    STRING          reduce using rule 26 (unary_operator -> ~ .)
    TRUE            reduce using rule 26 (unary_operator -> ~ .)
    FALSE           reduce using rule 26 (unary_operator -> ~ .)
    CHARACTER       reduce using rule 26 (unary_operator -> ~ .)


state 84

    (27) unary_operator -> ! .

    (               reduce using rule 27 (unary_operator -> ! .)
    INC             reduce using rule 27 (unary_operator -> ! .)
    DEC             reduce using rule 27 (unary_operator -> ! .)
    &               reduce using rule 27 (unary_operator -> ! .)
    *               reduce using rule 27 (unary_operator -> ! .)
    +               reduce using rule 27 (unary_operator -> ! .)
    -               reduce using rule 27 (unary_operator -> ! .)
    ~               reduce using rule 27 (unary_operator -> ! .)
    !               reduce using rule 27 (unary_operator -> ! .)
    ID              reduce using rule 27 (unary_operator -> ! .)
    INTEGER         reduce using rule 27 (unary_operator -> ! .)
    STRING          reduce using rule 27 (unary_operator -> ! .)
    TRUE            reduce using rule 27 (unary_operator -> ! .)
    FALSE           reduce using rule 27 (unary_operator -> ! .)
    CHARACTER       reduce using rule 27 (unary_operator -> ! .)


state 85

    (51) logical_and_expression -> inclusive_or_expression .
    (50) inclusive_or_expression -> inclusive_or_expression . | exclusive_or_expression

    AND             reduce using rule 51 (logical_and_expression -> inclusive_or_expression .)
    ?               reduce using rule 51 (logical_and_expression -> inclusive_or_expression .)
    OR              reduce using rule 51 (logical_and_expression -> inclusive_or_expression .)
    ;               reduce using rule 51 (logical_and_expression -> inclusive_or_expression .)
    ,               reduce using rule 51 (logical_and_expression -> inclusive_or_expression .)
    ]               reduce using rule 51 (logical_and_expression -> inclusive_or_expression .)
    )               reduce using rule 51 (logical_and_expression -> inclusive_or_expression .)
    }               reduce using rule 51 (logical_and_expression -> inclusive_or_expression .)
    :               reduce using rule 51 (logical_and_expression -> inclusive_or_expression .)
    |               shift and go to state 160


state 86

    (2) primary_expression -> INTEGER .

    [               reduce using rule 2 (primary_expression -> INTEGER .)
    (               reduce using rule 2 (primary_expression -> INTEGER .)
    .               reduce using rule 2 (primary_expression -> INTEGER .)
    PTR             reduce using rule 2 (primary_expression -> INTEGER .)
    INC             reduce using rule 2 (primary_expression -> INTEGER .)
    DEC             reduce using rule 2 (primary_expression -> INTEGER .)
    =               reduce using rule 2 (primary_expression -> INTEGER .)
    MUL_EQ          reduce using rule 2 (primary_expression -> INTEGER .)
    DIV_EQ          reduce using rule 2 (primary_expression -> INTEGER .)
    MOD_EQ          reduce using rule 2 (primary_expression -> INTEGER .)
    ADD_EQ          reduce using rule 2 (primary_expression -> INTEGER .)
    SUB_EQ          reduce using rule 2 (primary_expression -> INTEGER .)
    AND_EQ          reduce using rule 2 (primary_expression -> INTEGER .)
    XOR_EQ          reduce using rule 2 (primary_expression -> INTEGER .)
    OR_EQ           reduce using rule 2 (primary_expression -> INTEGER .)
    *               reduce using rule 2 (primary_expression -> INTEGER .)
    /               reduce using rule 2 (primary_expression -> INTEGER .)
    %               reduce using rule 2 (primary_expression -> INTEGER .)
    +               reduce using rule 2 (primary_expression -> INTEGER .)
    -               reduce using rule 2 (primary_expression -> INTEGER .)
    <               reduce using rule 2 (primary_expression -> INTEGER .)
    >               reduce using rule 2 (primary_expression -> INTEGER .)
    LE              reduce using rule 2 (primary_expression -> INTEGER .)
    GE              reduce using rule 2 (primary_expression -> INTEGER .)
    EQUAL           reduce using rule 2 (primary_expression -> INTEGER .)
    NE              reduce using rule 2 (primary_expression -> INTEGER .)
    &               reduce using rule 2 (primary_expression -> INTEGER .)
    ^               reduce using rule 2 (primary_expression -> INTEGER .)
    |               reduce using rule 2 (primary_expression -> INTEGER .)
    AND             reduce using rule 2 (primary_expression -> INTEGER .)
    ?               reduce using rule 2 (primary_expression -> INTEGER .)
    OR              reduce using rule 2 (primary_expression -> INTEGER .)
    ;               reduce using rule 2 (primary_expression -> INTEGER .)
    ,               reduce using rule 2 (primary_expression -> INTEGER .)
    ]               reduce using rule 2 (primary_expression -> INTEGER .)
    )               reduce using rule 2 (primary_expression -> INTEGER .)
    }               reduce using rule 2 (primary_expression -> INTEGER .)
    :               reduce using rule 2 (primary_expression -> INTEGER .)
    OUT             reduce using rule 2 (primary_expression -> INTEGER .)


state 87

    (3) primary_expression -> STRING .

    [               reduce using rule 3 (primary_expression -> STRING .)
    (               reduce using rule 3 (primary_expression -> STRING .)
    .               reduce using rule 3 (primary_expression -> STRING .)
    PTR             reduce using rule 3 (primary_expression -> STRING .)
    INC             reduce using rule 3 (primary_expression -> STRING .)
    DEC             reduce using rule 3 (primary_expression -> STRING .)
    =               reduce using rule 3 (primary_expression -> STRING .)
    MUL_EQ          reduce using rule 3 (primary_expression -> STRING .)
    DIV_EQ          reduce using rule 3 (primary_expression -> STRING .)
    MOD_EQ          reduce using rule 3 (primary_expression -> STRING .)
    ADD_EQ          reduce using rule 3 (primary_expression -> STRING .)
    SUB_EQ          reduce using rule 3 (primary_expression -> STRING .)
    AND_EQ          reduce using rule 3 (primary_expression -> STRING .)
    XOR_EQ          reduce using rule 3 (primary_expression -> STRING .)
    OR_EQ           reduce using rule 3 (primary_expression -> STRING .)
    *               reduce using rule 3 (primary_expression -> STRING .)
    /               reduce using rule 3 (primary_expression -> STRING .)
    %               reduce using rule 3 (primary_expression -> STRING .)
    +               reduce using rule 3 (primary_expression -> STRING .)
    -               reduce using rule 3 (primary_expression -> STRING .)
    <               reduce using rule 3 (primary_expression -> STRING .)
    >               reduce using rule 3 (primary_expression -> STRING .)
    LE              reduce using rule 3 (primary_expression -> STRING .)
    GE              reduce using rule 3 (primary_expression -> STRING .)
    EQUAL           reduce using rule 3 (primary_expression -> STRING .)
    NE              reduce using rule 3 (primary_expression -> STRING .)
    &               reduce using rule 3 (primary_expression -> STRING .)
    ^               reduce using rule 3 (primary_expression -> STRING .)
    |               reduce using rule 3 (primary_expression -> STRING .)
    AND             reduce using rule 3 (primary_expression -> STRING .)
    ?               reduce using rule 3 (primary_expression -> STRING .)
    OR              reduce using rule 3 (primary_expression -> STRING .)
    ;               reduce using rule 3 (primary_expression -> STRING .)
    ,               reduce using rule 3 (primary_expression -> STRING .)
    ]               reduce using rule 3 (primary_expression -> STRING .)
    )               reduce using rule 3 (primary_expression -> STRING .)
    }               reduce using rule 3 (primary_expression -> STRING .)
    :               reduce using rule 3 (primary_expression -> STRING .)
    OUT             reduce using rule 3 (primary_expression -> STRING .)


state 88

    (4) primary_expression -> TRUE .

    [               reduce using rule 4 (primary_expression -> TRUE .)
    (               reduce using rule 4 (primary_expression -> TRUE .)
    .               reduce using rule 4 (primary_expression -> TRUE .)
    PTR             reduce using rule 4 (primary_expression -> TRUE .)
    INC             reduce using rule 4 (primary_expression -> TRUE .)
    DEC             reduce using rule 4 (primary_expression -> TRUE .)
    =               reduce using rule 4 (primary_expression -> TRUE .)
    MUL_EQ          reduce using rule 4 (primary_expression -> TRUE .)
    DIV_EQ          reduce using rule 4 (primary_expression -> TRUE .)
    MOD_EQ          reduce using rule 4 (primary_expression -> TRUE .)
    ADD_EQ          reduce using rule 4 (primary_expression -> TRUE .)
    SUB_EQ          reduce using rule 4 (primary_expression -> TRUE .)
    AND_EQ          reduce using rule 4 (primary_expression -> TRUE .)
    XOR_EQ          reduce using rule 4 (primary_expression -> TRUE .)
    OR_EQ           reduce using rule 4 (primary_expression -> TRUE .)
    *               reduce using rule 4 (primary_expression -> TRUE .)
    /               reduce using rule 4 (primary_expression -> TRUE .)
    %               reduce using rule 4 (primary_expression -> TRUE .)
    +               reduce using rule 4 (primary_expression -> TRUE .)
    -               reduce using rule 4 (primary_expression -> TRUE .)
    <               reduce using rule 4 (primary_expression -> TRUE .)
    >               reduce using rule 4 (primary_expression -> TRUE .)
    LE              reduce using rule 4 (primary_expression -> TRUE .)
    GE              reduce using rule 4 (primary_expression -> TRUE .)
    EQUAL           reduce using rule 4 (primary_expression -> TRUE .)
    NE              reduce using rule 4 (primary_expression -> TRUE .)
    &               reduce using rule 4 (primary_expression -> TRUE .)
    ^               reduce using rule 4 (primary_expression -> TRUE .)
    |               reduce using rule 4 (primary_expression -> TRUE .)
    AND             reduce using rule 4 (primary_expression -> TRUE .)
    ?               reduce using rule 4 (primary_expression -> TRUE .)
    OR              reduce using rule 4 (primary_expression -> TRUE .)
    ;               reduce using rule 4 (primary_expression -> TRUE .)
    ,               reduce using rule 4 (primary_expression -> TRUE .)
    ]               reduce using rule 4 (primary_expression -> TRUE .)
    )               reduce using rule 4 (primary_expression -> TRUE .)
    }               reduce using rule 4 (primary_expression -> TRUE .)
    :               reduce using rule 4 (primary_expression -> TRUE .)
    OUT             reduce using rule 4 (primary_expression -> TRUE .)


state 89

    (5) primary_expression -> FALSE .

    [               reduce using rule 5 (primary_expression -> FALSE .)
    (               reduce using rule 5 (primary_expression -> FALSE .)
    .               reduce using rule 5 (primary_expression -> FALSE .)
    PTR             reduce using rule 5 (primary_expression -> FALSE .)
    INC             reduce using rule 5 (primary_expression -> FALSE .)
    DEC             reduce using rule 5 (primary_expression -> FALSE .)
    =               reduce using rule 5 (primary_expression -> FALSE .)
    MUL_EQ          reduce using rule 5 (primary_expression -> FALSE .)
    DIV_EQ          reduce using rule 5 (primary_expression -> FALSE .)
    MOD_EQ          reduce using rule 5 (primary_expression -> FALSE .)
    ADD_EQ          reduce using rule 5 (primary_expression -> FALSE .)
    SUB_EQ          reduce using rule 5 (primary_expression -> FALSE .)
    AND_EQ          reduce using rule 5 (primary_expression -> FALSE .)
    XOR_EQ          reduce using rule 5 (primary_expression -> FALSE .)
    OR_EQ           reduce using rule 5 (primary_expression -> FALSE .)
    *               reduce using rule 5 (primary_expression -> FALSE .)
    /               reduce using rule 5 (primary_expression -> FALSE .)
    %               reduce using rule 5 (primary_expression -> FALSE .)
    +               reduce using rule 5 (primary_expression -> FALSE .)
    -               reduce using rule 5 (primary_expression -> FALSE .)
    <               reduce using rule 5 (primary_expression -> FALSE .)
    >               reduce using rule 5 (primary_expression -> FALSE .)
    LE              reduce using rule 5 (primary_expression -> FALSE .)
    GE              reduce using rule 5 (primary_expression -> FALSE .)
    EQUAL           reduce using rule 5 (primary_expression -> FALSE .)
    NE              reduce using rule 5 (primary_expression -> FALSE .)
    &               reduce using rule 5 (primary_expression -> FALSE .)
    ^               reduce using rule 5 (primary_expression -> FALSE .)
    |               reduce using rule 5 (primary_expression -> FALSE .)
    AND             reduce using rule 5 (primary_expression -> FALSE .)
    ?               reduce using rule 5 (primary_expression -> FALSE .)
    OR              reduce using rule 5 (primary_expression -> FALSE .)
    ;               reduce using rule 5 (primary_expression -> FALSE .)
    ,               reduce using rule 5 (primary_expression -> FALSE .)
    ]               reduce using rule 5 (primary_expression -> FALSE .)
    )               reduce using rule 5 (primary_expression -> FALSE .)
    }               reduce using rule 5 (primary_expression -> FALSE .)
    :               reduce using rule 5 (primary_expression -> FALSE .)
    OUT             reduce using rule 5 (primary_expression -> FALSE .)


state 90

    (6) primary_expression -> CHARACTER .

    [               reduce using rule 6 (primary_expression -> CHARACTER .)
    (               reduce using rule 6 (primary_expression -> CHARACTER .)
    .               reduce using rule 6 (primary_expression -> CHARACTER .)
    PTR             reduce using rule 6 (primary_expression -> CHARACTER .)
    INC             reduce using rule 6 (primary_expression -> CHARACTER .)
    DEC             reduce using rule 6 (primary_expression -> CHARACTER .)
    =               reduce using rule 6 (primary_expression -> CHARACTER .)
    MUL_EQ          reduce using rule 6 (primary_expression -> CHARACTER .)
    DIV_EQ          reduce using rule 6 (primary_expression -> CHARACTER .)
    MOD_EQ          reduce using rule 6 (primary_expression -> CHARACTER .)
    ADD_EQ          reduce using rule 6 (primary_expression -> CHARACTER .)
    SUB_EQ          reduce using rule 6 (primary_expression -> CHARACTER .)
    AND_EQ          reduce using rule 6 (primary_expression -> CHARACTER .)
    XOR_EQ          reduce using rule 6 (primary_expression -> CHARACTER .)
    OR_EQ           reduce using rule 6 (primary_expression -> CHARACTER .)
    *               reduce using rule 6 (primary_expression -> CHARACTER .)
    /               reduce using rule 6 (primary_expression -> CHARACTER .)
    %               reduce using rule 6 (primary_expression -> CHARACTER .)
    +               reduce using rule 6 (primary_expression -> CHARACTER .)
    -               reduce using rule 6 (primary_expression -> CHARACTER .)
    <               reduce using rule 6 (primary_expression -> CHARACTER .)
    >               reduce using rule 6 (primary_expression -> CHARACTER .)
    LE              reduce using rule 6 (primary_expression -> CHARACTER .)
    GE              reduce using rule 6 (primary_expression -> CHARACTER .)
    EQUAL           reduce using rule 6 (primary_expression -> CHARACTER .)
    NE              reduce using rule 6 (primary_expression -> CHARACTER .)
    &               reduce using rule 6 (primary_expression -> CHARACTER .)
    ^               reduce using rule 6 (primary_expression -> CHARACTER .)
    |               reduce using rule 6 (primary_expression -> CHARACTER .)
    AND             reduce using rule 6 (primary_expression -> CHARACTER .)
    ?               reduce using rule 6 (primary_expression -> CHARACTER .)
    OR              reduce using rule 6 (primary_expression -> CHARACTER .)
    ;               reduce using rule 6 (primary_expression -> CHARACTER .)
    ,               reduce using rule 6 (primary_expression -> CHARACTER .)
    ]               reduce using rule 6 (primary_expression -> CHARACTER .)
    )               reduce using rule 6 (primary_expression -> CHARACTER .)
    }               reduce using rule 6 (primary_expression -> CHARACTER .)
    :               reduce using rule 6 (primary_expression -> CHARACTER .)
    OUT             reduce using rule 6 (primary_expression -> CHARACTER .)


state 91

    (49) inclusive_or_expression -> exclusive_or_expression .
    (48) exclusive_or_expression -> exclusive_or_expression . ^ and_expression

    |               reduce using rule 49 (inclusive_or_expression -> exclusive_or_expression .)
    AND             reduce using rule 49 (inclusive_or_expression -> exclusive_or_expression .)
    ?               reduce using rule 49 (inclusive_or_expression -> exclusive_or_expression .)
    OR              reduce using rule 49 (inclusive_or_expression -> exclusive_or_expression .)
    ;               reduce using rule 49 (inclusive_or_expression -> exclusive_or_expression .)
    ,               reduce using rule 49 (inclusive_or_expression -> exclusive_or_expression .)
    ]               reduce using rule 49 (inclusive_or_expression -> exclusive_or_expression .)
    )               reduce using rule 49 (inclusive_or_expression -> exclusive_or_expression .)
    }               reduce using rule 49 (inclusive_or_expression -> exclusive_or_expression .)
    :               reduce using rule 49 (inclusive_or_expression -> exclusive_or_expression .)
    ^               shift and go to state 161


state 92

    (47) exclusive_or_expression -> and_expression .
    (46) and_expression -> and_expression . & equality_expression

    ^               reduce using rule 47 (exclusive_or_expression -> and_expression .)
    |               reduce using rule 47 (exclusive_or_expression -> and_expression .)
    AND             reduce using rule 47 (exclusive_or_expression -> and_expression .)
    ?               reduce using rule 47 (exclusive_or_expression -> and_expression .)
    OR              reduce using rule 47 (exclusive_or_expression -> and_expression .)
    ;               reduce using rule 47 (exclusive_or_expression -> and_expression .)
    ,               reduce using rule 47 (exclusive_or_expression -> and_expression .)
    ]               reduce using rule 47 (exclusive_or_expression -> and_expression .)
    )               reduce using rule 47 (exclusive_or_expression -> and_expression .)
    }               reduce using rule 47 (exclusive_or_expression -> and_expression .)
    :               reduce using rule 47 (exclusive_or_expression -> and_expression .)
    &               shift and go to state 162


state 93

    (45) and_expression -> equality_expression .
    (43) equality_expression -> equality_expression . EQUAL relational_expression
    (44) equality_expression -> equality_expression . NE relational_expression

    &               reduce using rule 45 (and_expression -> equality_expression .)
    ^               reduce using rule 45 (and_expression -> equality_expression .)
    |               reduce using rule 45 (and_expression -> equality_expression .)
    AND             reduce using rule 45 (and_expression -> equality_expression .)
    ?               reduce using rule 45 (and_expression -> equality_expression .)
    OR              reduce using rule 45 (and_expression -> equality_expression .)
    ;               reduce using rule 45 (and_expression -> equality_expression .)
    ,               reduce using rule 45 (and_expression -> equality_expression .)
    ]               reduce using rule 45 (and_expression -> equality_expression .)
    )               reduce using rule 45 (and_expression -> equality_expression .)
    }               reduce using rule 45 (and_expression -> equality_expression .)
    :               reduce using rule 45 (and_expression -> equality_expression .)
    EQUAL           shift and go to state 163
    NE              shift and go to state 164


state 94

    (42) equality_expression -> relational_expression .
    (38) relational_expression -> relational_expression . < additive_expression
    (39) relational_expression -> relational_expression . > additive_expression
    (40) relational_expression -> relational_expression . LE additive_expression
    (41) relational_expression -> relational_expression . GE additive_expression

    EQUAL           reduce using rule 42 (equality_expression -> relational_expression .)
    NE              reduce using rule 42 (equality_expression -> relational_expression .)
    &               reduce using rule 42 (equality_expression -> relational_expression .)
    ^               reduce using rule 42 (equality_expression -> relational_expression .)
    |               reduce using rule 42 (equality_expression -> relational_expression .)
    AND             reduce using rule 42 (equality_expression -> relational_expression .)
    ?               reduce using rule 42 (equality_expression -> relational_expression .)
    OR              reduce using rule 42 (equality_expression -> relational_expression .)
    ;               reduce using rule 42 (equality_expression -> relational_expression .)
    ,               reduce using rule 42 (equality_expression -> relational_expression .)
    ]               reduce using rule 42 (equality_expression -> relational_expression .)
    )               reduce using rule 42 (equality_expression -> relational_expression .)
    }               reduce using rule 42 (equality_expression -> relational_expression .)
    :               reduce using rule 42 (equality_expression -> relational_expression .)
    <               shift and go to state 165
    >               shift and go to state 166
    LE              shift and go to state 167
    GE              shift and go to state 168


state 95

    (37) relational_expression -> additive_expression .
    (35) additive_expression -> additive_expression . + multiplicative_expression
    (36) additive_expression -> additive_expression . - multiplicative_expression

    <               reduce using rule 37 (relational_expression -> additive_expression .)
    >               reduce using rule 37 (relational_expression -> additive_expression .)
    LE              reduce using rule 37 (relational_expression -> additive_expression .)
    GE              reduce using rule 37 (relational_expression -> additive_expression .)
    EQUAL           reduce using rule 37 (relational_expression -> additive_expression .)
    NE              reduce using rule 37 (relational_expression -> additive_expression .)
    &               reduce using rule 37 (relational_expression -> additive_expression .)
    ^               reduce using rule 37 (relational_expression -> additive_expression .)
    |               reduce using rule 37 (relational_expression -> additive_expression .)
    AND             reduce using rule 37 (relational_expression -> additive_expression .)
    ?               reduce using rule 37 (relational_expression -> additive_expression .)
    OR              reduce using rule 37 (relational_expression -> additive_expression .)
    ;               reduce using rule 37 (relational_expression -> additive_expression .)
    ,               reduce using rule 37 (relational_expression -> additive_expression .)
    ]               reduce using rule 37 (relational_expression -> additive_expression .)
    )               reduce using rule 37 (relational_expression -> additive_expression .)
    }               reduce using rule 37 (relational_expression -> additive_expression .)
    :               reduce using rule 37 (relational_expression -> additive_expression .)
    +               shift and go to state 169
    -               shift and go to state 170


state 96

    (34) additive_expression -> multiplicative_expression .
    (31) multiplicative_expression -> multiplicative_expression . * cast_expression
    (32) multiplicative_expression -> multiplicative_expression . / cast_expression
    (33) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 34 (additive_expression -> multiplicative_expression .)
    -               reduce using rule 34 (additive_expression -> multiplicative_expression .)
    <               reduce using rule 34 (additive_expression -> multiplicative_expression .)
    >               reduce using rule 34 (additive_expression -> multiplicative_expression .)
    LE              reduce using rule 34 (additive_expression -> multiplicative_expression .)
    GE              reduce using rule 34 (additive_expression -> multiplicative_expression .)
    EQUAL           reduce using rule 34 (additive_expression -> multiplicative_expression .)
    NE              reduce using rule 34 (additive_expression -> multiplicative_expression .)
    &               reduce using rule 34 (additive_expression -> multiplicative_expression .)
    ^               reduce using rule 34 (additive_expression -> multiplicative_expression .)
    |               reduce using rule 34 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 34 (additive_expression -> multiplicative_expression .)
    ?               reduce using rule 34 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 34 (additive_expression -> multiplicative_expression .)
    ;               reduce using rule 34 (additive_expression -> multiplicative_expression .)
    ,               reduce using rule 34 (additive_expression -> multiplicative_expression .)
    ]               reduce using rule 34 (additive_expression -> multiplicative_expression .)
    )               reduce using rule 34 (additive_expression -> multiplicative_expression .)
    }               reduce using rule 34 (additive_expression -> multiplicative_expression .)
    :               reduce using rule 34 (additive_expression -> multiplicative_expression .)
    *               shift and go to state 171
    /               shift and go to state 172
    %               shift and go to state 173


state 97

    (78) init_declarator -> declarator .
    (79) init_declarator -> declarator . = initializer

    ;               reduce using rule 78 (init_declarator -> declarator .)
    ,               reduce using rule 78 (init_declarator -> declarator .)
    =               shift and go to state 41


state 98

    (106) direct_declarator -> direct_declarator [ constant_expression . ]

    ]               shift and go to state 174


state 99

    (107) direct_declarator -> direct_declarator [ ] .

    [               reduce using rule 107 (direct_declarator -> direct_declarator [ ] .)
    (               reduce using rule 107 (direct_declarator -> direct_declarator [ ] .)
    {               reduce using rule 107 (direct_declarator -> direct_declarator [ ] .)
    VOID            reduce using rule 107 (direct_declarator -> direct_declarator [ ] .)
    CHAR            reduce using rule 107 (direct_declarator -> direct_declarator [ ] .)
    INT             reduce using rule 107 (direct_declarator -> direct_declarator [ ] .)
    BOOL            reduce using rule 107 (direct_declarator -> direct_declarator [ ] .)
    STRUCT          reduce using rule 107 (direct_declarator -> direct_declarator [ ] .)
    CLASS           reduce using rule 107 (direct_declarator -> direct_declarator [ ] .)
    ;               reduce using rule 107 (direct_declarator -> direct_declarator [ ] .)
    *               reduce using rule 107 (direct_declarator -> direct_declarator [ ] .)
    ID              reduce using rule 107 (direct_declarator -> direct_declarator [ ] .)
    =               reduce using rule 107 (direct_declarator -> direct_declarator [ ] .)
    ,               reduce using rule 107 (direct_declarator -> direct_declarator [ ] .)
    )               reduce using rule 107 (direct_declarator -> direct_declarator [ ] .)
    :               reduce using rule 107 (direct_declarator -> direct_declarator [ ] .)


state 100

    (70) constant_expression -> conditional_expression .

    ]               reduce using rule 70 (constant_expression -> conditional_expression .)
    ;               reduce using rule 70 (constant_expression -> conditional_expression .)
    ,               reduce using rule 70 (constant_expression -> conditional_expression .)


state 101

    (28) cast_expression -> unary_expression .

    *               reduce using rule 28 (cast_expression -> unary_expression .)
    /               reduce using rule 28 (cast_expression -> unary_expression .)
    %               reduce using rule 28 (cast_expression -> unary_expression .)
    +               reduce using rule 28 (cast_expression -> unary_expression .)
    -               reduce using rule 28 (cast_expression -> unary_expression .)
    <               reduce using rule 28 (cast_expression -> unary_expression .)
    >               reduce using rule 28 (cast_expression -> unary_expression .)
    LE              reduce using rule 28 (cast_expression -> unary_expression .)
    GE              reduce using rule 28 (cast_expression -> unary_expression .)
    EQUAL           reduce using rule 28 (cast_expression -> unary_expression .)
    NE              reduce using rule 28 (cast_expression -> unary_expression .)
    &               reduce using rule 28 (cast_expression -> unary_expression .)
    ^               reduce using rule 28 (cast_expression -> unary_expression .)
    |               reduce using rule 28 (cast_expression -> unary_expression .)
    AND             reduce using rule 28 (cast_expression -> unary_expression .)
    ?               reduce using rule 28 (cast_expression -> unary_expression .)
    OR              reduce using rule 28 (cast_expression -> unary_expression .)
    ]               reduce using rule 28 (cast_expression -> unary_expression .)
    =               reduce using rule 28 (cast_expression -> unary_expression .)
    MUL_EQ          reduce using rule 28 (cast_expression -> unary_expression .)
    DIV_EQ          reduce using rule 28 (cast_expression -> unary_expression .)
    MOD_EQ          reduce using rule 28 (cast_expression -> unary_expression .)
    ADD_EQ          reduce using rule 28 (cast_expression -> unary_expression .)
    SUB_EQ          reduce using rule 28 (cast_expression -> unary_expression .)
    AND_EQ          reduce using rule 28 (cast_expression -> unary_expression .)
    XOR_EQ          reduce using rule 28 (cast_expression -> unary_expression .)
    OR_EQ           reduce using rule 28 (cast_expression -> unary_expression .)
    ;               reduce using rule 28 (cast_expression -> unary_expression .)
    ,               reduce using rule 28 (cast_expression -> unary_expression .)
    )               reduce using rule 28 (cast_expression -> unary_expression .)
    }               reduce using rule 28 (cast_expression -> unary_expression .)
    :               reduce using rule 28 (cast_expression -> unary_expression .)


state 102

    (29) cast_expression -> ( . type_name ) cast_expression
    (7) primary_expression -> ( . expression )
    (120) type_name -> . specifier_qualifier_list
    (121) type_name -> . specifier_qualifier_list abstract_declarator
    (68) expression -> . assignment_expression
    (69) expression -> . expression , assignment_expression
    (95) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (96) specifier_qualifier_list -> . type_specifier
    (57) assignment_expression -> . conditional_expression
    (58) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . INT
    (83) type_specifier -> . BOOL
    (84) type_specifier -> . struct_specifier
    (85) type_specifier -> . class_definition
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (91) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (86) class_definition -> . CLASS ID { class_member_list }
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression

    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    INC             shift and go to state 73
    DEC             shift and go to state 74
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90
    (               shift and go to state 62

    type_name                      shift and go to state 128
    cast_expression                shift and go to state 76
    expression                     shift and go to state 127
    specifier_qualifier_list       shift and go to state 129
    assignment_expression          shift and go to state 68
    type_specifier                 shift and go to state 130
    conditional_expression         shift and go to state 69
    unary_expression               shift and go to state 70
    struct_specifier               shift and go to state 14
    class_definition               shift and go to state 15
    logical_or_expression          shift and go to state 71
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    logical_and_expression         shift and go to state 77
    primary_expression             shift and go to state 78
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96

state 103

    (108) direct_declarator -> direct_declarator ( parameter_list . )
    (114) parameter_list -> parameter_list . , parameter_declaration

    )               shift and go to state 175
    ,               shift and go to state 176


state 104

    (110) direct_declarator -> direct_declarator ( ) .

    [               reduce using rule 110 (direct_declarator -> direct_declarator ( ) .)
    (               reduce using rule 110 (direct_declarator -> direct_declarator ( ) .)
    {               reduce using rule 110 (direct_declarator -> direct_declarator ( ) .)
    VOID            reduce using rule 110 (direct_declarator -> direct_declarator ( ) .)
    CHAR            reduce using rule 110 (direct_declarator -> direct_declarator ( ) .)
    INT             reduce using rule 110 (direct_declarator -> direct_declarator ( ) .)
    BOOL            reduce using rule 110 (direct_declarator -> direct_declarator ( ) .)
    STRUCT          reduce using rule 110 (direct_declarator -> direct_declarator ( ) .)
    CLASS           reduce using rule 110 (direct_declarator -> direct_declarator ( ) .)
    ;               reduce using rule 110 (direct_declarator -> direct_declarator ( ) .)
    *               reduce using rule 110 (direct_declarator -> direct_declarator ( ) .)
    ID              reduce using rule 110 (direct_declarator -> direct_declarator ( ) .)
    =               reduce using rule 110 (direct_declarator -> direct_declarator ( ) .)
    ,               reduce using rule 110 (direct_declarator -> direct_declarator ( ) .)
    )               reduce using rule 110 (direct_declarator -> direct_declarator ( ) .)
    :               reduce using rule 110 (direct_declarator -> direct_declarator ( ) .)


state 105

    (109) direct_declarator -> direct_declarator ( identifier_list . )
    (119) identifier_list -> identifier_list . , ID

    )               shift and go to state 177
    ,               shift and go to state 178


state 106

    (113) parameter_list -> parameter_declaration .

    )               reduce using rule 113 (parameter_list -> parameter_declaration .)
    ,               reduce using rule 113 (parameter_list -> parameter_declaration .)


state 107

    (118) identifier_list -> ID .

    )               reduce using rule 118 (identifier_list -> ID .)
    ,               reduce using rule 118 (identifier_list -> ID .)


state 108

    (115) parameter_declaration -> declaration_specifiers . declarator
    (116) parameter_declaration -> declaration_specifiers . abstract_declarator
    (117) parameter_declaration -> declaration_specifiers .
    (102) declarator -> . pointer direct_declarator
    (103) declarator -> . direct_declarator
    (122) abstract_declarator -> . pointer
    (123) abstract_declarator -> . direct_abstract_declarator
    (124) abstract_declarator -> . pointer direct_abstract_declarator
    (111) pointer -> . *
    (112) pointer -> . * pointer
    (104) direct_declarator -> . ID
    (105) direct_declarator -> . ( declarator )
    (106) direct_declarator -> . direct_declarator [ constant_expression ]
    (107) direct_declarator -> . direct_declarator [ ]
    (108) direct_declarator -> . direct_declarator ( parameter_list )
    (109) direct_declarator -> . direct_declarator ( identifier_list )
    (110) direct_declarator -> . direct_declarator ( )
    (125) direct_abstract_declarator -> . ( abstract_declarator )
    (126) direct_abstract_declarator -> . [ ]
    (127) direct_abstract_declarator -> . [ constant_expression ]
    (128) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (129) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (130) direct_abstract_declarator -> . ( )
    (131) direct_abstract_declarator -> . ( parameter_list )
    (132) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (133) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_list )

    )               reduce using rule 117 (parameter_declaration -> declaration_specifiers .)
    ,               reduce using rule 117 (parameter_declaration -> declaration_specifiers .)
    *               shift and go to state 16
    ID              shift and go to state 17
    (               shift and go to state 183
    [               shift and go to state 184

    declarator                     shift and go to state 179
    abstract_declarator            shift and go to state 180
    pointer                        shift and go to state 181
    direct_declarator              shift and go to state 9
    direct_abstract_declarator     shift and go to state 182

state 109

    (105) direct_declarator -> ( declarator ) .

    [               reduce using rule 105 (direct_declarator -> ( declarator ) .)
    (               reduce using rule 105 (direct_declarator -> ( declarator ) .)
    {               reduce using rule 105 (direct_declarator -> ( declarator ) .)
    VOID            reduce using rule 105 (direct_declarator -> ( declarator ) .)
    CHAR            reduce using rule 105 (direct_declarator -> ( declarator ) .)
    INT             reduce using rule 105 (direct_declarator -> ( declarator ) .)
    BOOL            reduce using rule 105 (direct_declarator -> ( declarator ) .)
    STRUCT          reduce using rule 105 (direct_declarator -> ( declarator ) .)
    CLASS           reduce using rule 105 (direct_declarator -> ( declarator ) .)
    ;               reduce using rule 105 (direct_declarator -> ( declarator ) .)
    *               reduce using rule 105 (direct_declarator -> ( declarator ) .)
    ID              reduce using rule 105 (direct_declarator -> ( declarator ) .)
    =               reduce using rule 105 (direct_declarator -> ( declarator ) .)
    ,               reduce using rule 105 (direct_declarator -> ( declarator ) .)
    )               reduce using rule 105 (direct_declarator -> ( declarator ) .)
    :               reduce using rule 105 (direct_declarator -> ( declarator ) .)


state 110

    (91) struct_specifier -> STRUCT ID { . struct_declaration_list }
    (92) struct_declaration_list -> . struct_declaration
    (93) struct_declaration_list -> . struct_declaration_list struct_declaration
    (94) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (95) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (96) specifier_qualifier_list -> . type_specifier
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . INT
    (83) type_specifier -> . BOOL
    (84) type_specifier -> . struct_specifier
    (85) type_specifier -> . class_definition
    (91) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (86) class_definition -> . CLASS ID { class_member_list }

    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20

    struct_declaration_list        shift and go to state 185
    struct_declaration             shift and go to state 186
    specifier_qualifier_list       shift and go to state 187
    type_specifier                 shift and go to state 130
    struct_specifier               shift and go to state 14
    class_definition               shift and go to state 15

state 111

    (86) class_definition -> CLASS ID { . class_member_list }
    (87) class_member_list -> . class_member
    (88) class_member_list -> . class_member_list class_member
    (89) class_member -> . function_definition
    (90) class_member -> . declaration
    (167) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (168) function_definition -> . declaration_specifiers declarator compound_statement
    (169) function_definition -> . declarator declaration_list compound_statement
    (170) function_definition -> . declarator compound_statement
    (71) declaration -> . declaration_specifiers ;
    (72) declaration -> . declaration_specifiers init_declarator_list ;
    (73) declaration_specifiers -> .
    (74) declaration_specifiers -> . type_specifier
    (75) declaration_specifiers -> . type_specifier declaration_specifiers
    (102) declarator -> . pointer direct_declarator
    (103) declarator -> . direct_declarator
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . INT
    (83) type_specifier -> . BOOL
    (84) type_specifier -> . struct_specifier
    (85) type_specifier -> . class_definition
    (111) pointer -> . *
    (112) pointer -> . * pointer
    (104) direct_declarator -> . ID
    (105) direct_declarator -> . ( declarator )
    (106) direct_declarator -> . direct_declarator [ constant_expression ]
    (107) direct_declarator -> . direct_declarator [ ]
    (108) direct_declarator -> . direct_declarator ( parameter_list )
    (109) direct_declarator -> . direct_declarator ( identifier_list )
    (110) direct_declarator -> . direct_declarator ( )
    (91) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (86) class_definition -> . CLASS ID { class_member_list }

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    ;               reduce using rule 73 (declaration_specifiers -> .)
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    *               shift and go to state 16
    ID              shift and go to state 17
    (               shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20

  ! *               [ reduce using rule 73 (declaration_specifiers -> .) ]
  ! ID              [ reduce using rule 73 (declaration_specifiers -> .) ]
  ! (               [ reduce using rule 73 (declaration_specifiers -> .) ]

    class_member_list              shift and go to state 188
    class_member                   shift and go to state 189
    function_definition            shift and go to state 190
    declaration                    shift and go to state 191
    declaration_specifiers         shift and go to state 5
    declarator                     shift and go to state 6
    type_specifier                 shift and go to state 7
    pointer                        shift and go to state 8
    direct_declarator              shift and go to state 9
    struct_specifier               shift and go to state 14
    class_definition               shift and go to state 15

state 112

    (167) function_definition -> declaration_specifiers declarator declaration_list compound_statement .

    VOID            reduce using rule 167 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CHAR            reduce using rule 167 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    INT             reduce using rule 167 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    BOOL            reduce using rule 167 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    *               reduce using rule 167 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    ID              reduce using rule 167 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    (               reduce using rule 167 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 167 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CLASS           reduce using rule 167 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    $end            reduce using rule 167 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    ;               reduce using rule 167 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    }               reduce using rule 167 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)


state 113

    (79) init_declarator -> declarator = initializer .

    ;               reduce using rule 79 (init_declarator -> declarator = initializer .)
    ,               reduce using rule 79 (init_declarator -> declarator = initializer .)


state 114

    (134) initializer -> assignment_expression .

    ;               reduce using rule 134 (initializer -> assignment_expression .)
    ,               reduce using rule 134 (initializer -> assignment_expression .)
    }               reduce using rule 134 (initializer -> assignment_expression .)


state 115

    (135) initializer -> { . initializer_list }
    (136) initializer -> { . initializer_list , }
    (137) initializer_list -> . initializer
    (138) initializer_list -> . initializer_list , initializer
    (134) initializer -> . assignment_expression
    (135) initializer -> . { initializer_list }
    (136) initializer -> . { initializer_list , }
    (57) assignment_expression -> . conditional_expression
    (58) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 115
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90
    (               shift and go to state 62

    initializer_list               shift and go to state 192
    initializer                    shift and go to state 193
    assignment_expression          shift and go to state 114
    conditional_expression         shift and go to state 69
    unary_expression               shift and go to state 70
    logical_or_expression          shift and go to state 71
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    cast_expression                shift and go to state 76
    logical_and_expression         shift and go to state 77
    primary_expression             shift and go to state 78
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96

state 116

    (77) init_declarator_list -> init_declarator_list , init_declarator .

    ;               reduce using rule 77 (init_declarator_list -> init_declarator_list , init_declarator .)
    ,               reduce using rule 77 (init_declarator_list -> init_declarator_list , init_declarator .)


state 117

    (146) compound_statement -> { statement_list } .

    VOID            reduce using rule 146 (compound_statement -> { statement_list } .)
    CHAR            reduce using rule 146 (compound_statement -> { statement_list } .)
    INT             reduce using rule 146 (compound_statement -> { statement_list } .)
    BOOL            reduce using rule 146 (compound_statement -> { statement_list } .)
    *               reduce using rule 146 (compound_statement -> { statement_list } .)
    ID              reduce using rule 146 (compound_statement -> { statement_list } .)
    (               reduce using rule 146 (compound_statement -> { statement_list } .)
    STRUCT          reduce using rule 146 (compound_statement -> { statement_list } .)
    CLASS           reduce using rule 146 (compound_statement -> { statement_list } .)
    $end            reduce using rule 146 (compound_statement -> { statement_list } .)
    ;               reduce using rule 146 (compound_statement -> { statement_list } .)
    }               reduce using rule 146 (compound_statement -> { statement_list } .)
    CIN             reduce using rule 146 (compound_statement -> { statement_list } .)
    COUT            reduce using rule 146 (compound_statement -> { statement_list } .)
    {               reduce using rule 146 (compound_statement -> { statement_list } .)
    IF              reduce using rule 146 (compound_statement -> { statement_list } .)
    WHILE           reduce using rule 146 (compound_statement -> { statement_list } .)
    FOR             reduce using rule 146 (compound_statement -> { statement_list } .)
    CONTINUE        reduce using rule 146 (compound_statement -> { statement_list } .)
    BREAK           reduce using rule 146 (compound_statement -> { statement_list } .)
    RETURN          reduce using rule 146 (compound_statement -> { statement_list } .)
    INC             reduce using rule 146 (compound_statement -> { statement_list } .)
    DEC             reduce using rule 146 (compound_statement -> { statement_list } .)
    &               reduce using rule 146 (compound_statement -> { statement_list } .)
    +               reduce using rule 146 (compound_statement -> { statement_list } .)
    -               reduce using rule 146 (compound_statement -> { statement_list } .)
    ~               reduce using rule 146 (compound_statement -> { statement_list } .)
    !               reduce using rule 146 (compound_statement -> { statement_list } .)
    INTEGER         reduce using rule 146 (compound_statement -> { statement_list } .)
    STRING          reduce using rule 146 (compound_statement -> { statement_list } .)
    TRUE            reduce using rule 146 (compound_statement -> { statement_list } .)
    FALSE           reduce using rule 146 (compound_statement -> { statement_list } .)
    CHARACTER       reduce using rule 146 (compound_statement -> { statement_list } .)
    ELSE            reduce using rule 146 (compound_statement -> { statement_list } .)


state 118

    (152) statement_list -> statement_list statement .

    }               reduce using rule 152 (statement_list -> statement_list statement .)
    CIN             reduce using rule 152 (statement_list -> statement_list statement .)
    COUT            reduce using rule 152 (statement_list -> statement_list statement .)
    {               reduce using rule 152 (statement_list -> statement_list statement .)
    ;               reduce using rule 152 (statement_list -> statement_list statement .)
    IF              reduce using rule 152 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 152 (statement_list -> statement_list statement .)
    FOR             reduce using rule 152 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 152 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 152 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 152 (statement_list -> statement_list statement .)
    INC             reduce using rule 152 (statement_list -> statement_list statement .)
    DEC             reduce using rule 152 (statement_list -> statement_list statement .)
    &               reduce using rule 152 (statement_list -> statement_list statement .)
    *               reduce using rule 152 (statement_list -> statement_list statement .)
    +               reduce using rule 152 (statement_list -> statement_list statement .)
    -               reduce using rule 152 (statement_list -> statement_list statement .)
    ~               reduce using rule 152 (statement_list -> statement_list statement .)
    !               reduce using rule 152 (statement_list -> statement_list statement .)
    ID              reduce using rule 152 (statement_list -> statement_list statement .)
    INTEGER         reduce using rule 152 (statement_list -> statement_list statement .)
    STRING          reduce using rule 152 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 152 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 152 (statement_list -> statement_list statement .)
    CHARACTER       reduce using rule 152 (statement_list -> statement_list statement .)
    (               reduce using rule 152 (statement_list -> statement_list statement .)


state 119

    (147) compound_statement -> { declaration_list } .

    VOID            reduce using rule 147 (compound_statement -> { declaration_list } .)
    CHAR            reduce using rule 147 (compound_statement -> { declaration_list } .)
    INT             reduce using rule 147 (compound_statement -> { declaration_list } .)
    BOOL            reduce using rule 147 (compound_statement -> { declaration_list } .)
    *               reduce using rule 147 (compound_statement -> { declaration_list } .)
    ID              reduce using rule 147 (compound_statement -> { declaration_list } .)
    (               reduce using rule 147 (compound_statement -> { declaration_list } .)
    STRUCT          reduce using rule 147 (compound_statement -> { declaration_list } .)
    CLASS           reduce using rule 147 (compound_statement -> { declaration_list } .)
    $end            reduce using rule 147 (compound_statement -> { declaration_list } .)
    ;               reduce using rule 147 (compound_statement -> { declaration_list } .)
    }               reduce using rule 147 (compound_statement -> { declaration_list } .)
    CIN             reduce using rule 147 (compound_statement -> { declaration_list } .)
    COUT            reduce using rule 147 (compound_statement -> { declaration_list } .)
    {               reduce using rule 147 (compound_statement -> { declaration_list } .)
    IF              reduce using rule 147 (compound_statement -> { declaration_list } .)
    WHILE           reduce using rule 147 (compound_statement -> { declaration_list } .)
    FOR             reduce using rule 147 (compound_statement -> { declaration_list } .)
    CONTINUE        reduce using rule 147 (compound_statement -> { declaration_list } .)
    BREAK           reduce using rule 147 (compound_statement -> { declaration_list } .)
    RETURN          reduce using rule 147 (compound_statement -> { declaration_list } .)
    INC             reduce using rule 147 (compound_statement -> { declaration_list } .)
    DEC             reduce using rule 147 (compound_statement -> { declaration_list } .)
    &               reduce using rule 147 (compound_statement -> { declaration_list } .)
    +               reduce using rule 147 (compound_statement -> { declaration_list } .)
    -               reduce using rule 147 (compound_statement -> { declaration_list } .)
    ~               reduce using rule 147 (compound_statement -> { declaration_list } .)
    !               reduce using rule 147 (compound_statement -> { declaration_list } .)
    INTEGER         reduce using rule 147 (compound_statement -> { declaration_list } .)
    STRING          reduce using rule 147 (compound_statement -> { declaration_list } .)
    TRUE            reduce using rule 147 (compound_statement -> { declaration_list } .)
    FALSE           reduce using rule 147 (compound_statement -> { declaration_list } .)
    CHARACTER       reduce using rule 147 (compound_statement -> { declaration_list } .)
    ELSE            reduce using rule 147 (compound_statement -> { declaration_list } .)


state 120

    (148) compound_statement -> { declaration_list statement_list . }
    (152) statement_list -> statement_list . statement
    (139) statement -> . input_statement
    (140) statement -> . output_statement
    (141) statement -> . compound_statement
    (142) statement -> . expression_statement
    (143) statement -> . selection_statement
    (144) statement -> . iteration_statement
    (145) statement -> . jump_statement
    (171) input_statement -> . CIN IN ID ;
    (172) output_statement -> . COUT output_list ;
    (146) compound_statement -> . { statement_list }
    (147) compound_statement -> . { declaration_list }
    (148) compound_statement -> . { declaration_list statement_list }
    (153) expression_statement -> . ;
    (154) expression_statement -> . expression ;
    (155) selection_statement -> . IF ( expression ) statement
    (156) selection_statement -> . IF ( expression ) statement ELSE statement
    (157) iteration_statement -> . WHILE ( expression ) statement
    (158) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (159) jump_statement -> . CONTINUE ;
    (160) jump_statement -> . BREAK ;
    (161) jump_statement -> . RETURN ;
    (162) jump_statement -> . RETURN expression ;
    (68) expression -> . assignment_expression
    (69) expression -> . expression , assignment_expression
    (57) assignment_expression -> . conditional_expression
    (58) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression

    }               shift and go to state 194
    CIN             shift and go to state 57
    COUT            shift and go to state 59
    {               shift and go to state 29
    ;               shift and go to state 56
    IF              shift and go to state 61
    WHILE           shift and go to state 63
    FOR             shift and go to state 64
    CONTINUE        shift and go to state 65
    BREAK           shift and go to state 66
    RETURN          shift and go to state 67
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90
    (               shift and go to state 62

    statement                      shift and go to state 118
    input_statement                shift and go to state 49
    output_statement               shift and go to state 50
    compound_statement             shift and go to state 51
    expression_statement           shift and go to state 52
    selection_statement            shift and go to state 53
    iteration_statement            shift and go to state 54
    jump_statement                 shift and go to state 55
    expression                     shift and go to state 60
    assignment_expression          shift and go to state 68
    conditional_expression         shift and go to state 69
    unary_expression               shift and go to state 70
    logical_or_expression          shift and go to state 71
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    cast_expression                shift and go to state 76
    logical_and_expression         shift and go to state 77
    primary_expression             shift and go to state 78
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96

state 121

    (171) input_statement -> CIN IN . ID ;

    ID              shift and go to state 195


state 122

    (172) output_statement -> COUT output_list . ;
    (174) output_list -> output_list . OUT primary_expression

    ;               shift and go to state 196
    OUT             shift and go to state 197


state 123

    (173) output_list -> OUT . primary_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )

    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90
    (               shift and go to state 156

    primary_expression             shift and go to state 198

state 124

    (154) expression_statement -> expression ; .

    }               reduce using rule 154 (expression_statement -> expression ; .)
    CIN             reduce using rule 154 (expression_statement -> expression ; .)
    COUT            reduce using rule 154 (expression_statement -> expression ; .)
    {               reduce using rule 154 (expression_statement -> expression ; .)
    ;               reduce using rule 154 (expression_statement -> expression ; .)
    IF              reduce using rule 154 (expression_statement -> expression ; .)
    WHILE           reduce using rule 154 (expression_statement -> expression ; .)
    FOR             reduce using rule 154 (expression_statement -> expression ; .)
    CONTINUE        reduce using rule 154 (expression_statement -> expression ; .)
    BREAK           reduce using rule 154 (expression_statement -> expression ; .)
    RETURN          reduce using rule 154 (expression_statement -> expression ; .)
    INC             reduce using rule 154 (expression_statement -> expression ; .)
    DEC             reduce using rule 154 (expression_statement -> expression ; .)
    &               reduce using rule 154 (expression_statement -> expression ; .)
    *               reduce using rule 154 (expression_statement -> expression ; .)
    +               reduce using rule 154 (expression_statement -> expression ; .)
    -               reduce using rule 154 (expression_statement -> expression ; .)
    ~               reduce using rule 154 (expression_statement -> expression ; .)
    !               reduce using rule 154 (expression_statement -> expression ; .)
    ID              reduce using rule 154 (expression_statement -> expression ; .)
    INTEGER         reduce using rule 154 (expression_statement -> expression ; .)
    STRING          reduce using rule 154 (expression_statement -> expression ; .)
    TRUE            reduce using rule 154 (expression_statement -> expression ; .)
    FALSE           reduce using rule 154 (expression_statement -> expression ; .)
    CHARACTER       reduce using rule 154 (expression_statement -> expression ; .)
    (               reduce using rule 154 (expression_statement -> expression ; .)
    ELSE            reduce using rule 154 (expression_statement -> expression ; .)


state 125

    (69) expression -> expression , . assignment_expression
    (57) assignment_expression -> . conditional_expression
    (58) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression

    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90
    (               shift and go to state 62

    assignment_expression          shift and go to state 199
    conditional_expression         shift and go to state 69
    unary_expression               shift and go to state 70
    logical_or_expression          shift and go to state 71
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    cast_expression                shift and go to state 76
    logical_and_expression         shift and go to state 77
    primary_expression             shift and go to state 78
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96

state 126

    (155) selection_statement -> IF ( . expression ) statement
    (156) selection_statement -> IF ( . expression ) statement ELSE statement
    (68) expression -> . assignment_expression
    (69) expression -> . expression , assignment_expression
    (57) assignment_expression -> . conditional_expression
    (58) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression

    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90
    (               shift and go to state 62

    expression                     shift and go to state 200
    assignment_expression          shift and go to state 68
    conditional_expression         shift and go to state 69
    unary_expression               shift and go to state 70
    logical_or_expression          shift and go to state 71
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    cast_expression                shift and go to state 76
    logical_and_expression         shift and go to state 77
    primary_expression             shift and go to state 78
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96

state 127

    (7) primary_expression -> ( expression . )
    (69) expression -> expression . , assignment_expression

    )               shift and go to state 201
    ,               shift and go to state 125


state 128

    (29) cast_expression -> ( type_name . ) cast_expression

    )               shift and go to state 202


state 129

    (120) type_name -> specifier_qualifier_list .
    (121) type_name -> specifier_qualifier_list . abstract_declarator
    (122) abstract_declarator -> . pointer
    (123) abstract_declarator -> . direct_abstract_declarator
    (124) abstract_declarator -> . pointer direct_abstract_declarator
    (111) pointer -> . *
    (112) pointer -> . * pointer
    (125) direct_abstract_declarator -> . ( abstract_declarator )
    (126) direct_abstract_declarator -> . [ ]
    (127) direct_abstract_declarator -> . [ constant_expression ]
    (128) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (129) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (130) direct_abstract_declarator -> . ( )
    (131) direct_abstract_declarator -> . ( parameter_list )
    (132) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (133) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_list )

    )               reduce using rule 120 (type_name -> specifier_qualifier_list .)
    *               shift and go to state 16
    (               shift and go to state 205
    [               shift and go to state 184

    abstract_declarator            shift and go to state 203
    pointer                        shift and go to state 204
    direct_abstract_declarator     shift and go to state 182

state 130

    (95) specifier_qualifier_list -> type_specifier . specifier_qualifier_list
    (96) specifier_qualifier_list -> type_specifier .
    (95) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (96) specifier_qualifier_list -> . type_specifier
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . INT
    (83) type_specifier -> . BOOL
    (84) type_specifier -> . struct_specifier
    (85) type_specifier -> . class_definition
    (91) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (86) class_definition -> . CLASS ID { class_member_list }

    *               reduce using rule 96 (specifier_qualifier_list -> type_specifier .)
    (               reduce using rule 96 (specifier_qualifier_list -> type_specifier .)
    [               reduce using rule 96 (specifier_qualifier_list -> type_specifier .)
    )               reduce using rule 96 (specifier_qualifier_list -> type_specifier .)
    :               reduce using rule 96 (specifier_qualifier_list -> type_specifier .)
    ID              reduce using rule 96 (specifier_qualifier_list -> type_specifier .)
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20

    type_specifier                 shift and go to state 130
    specifier_qualifier_list       shift and go to state 206
    struct_specifier               shift and go to state 14
    class_definition               shift and go to state 15

state 131

    (157) iteration_statement -> WHILE ( . expression ) statement
    (68) expression -> . assignment_expression
    (69) expression -> . expression , assignment_expression
    (57) assignment_expression -> . conditional_expression
    (58) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression

    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90
    (               shift and go to state 62

    expression                     shift and go to state 207
    assignment_expression          shift and go to state 68
    conditional_expression         shift and go to state 69
    unary_expression               shift and go to state 70
    logical_or_expression          shift and go to state 71
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    cast_expression                shift and go to state 76
    logical_and_expression         shift and go to state 77
    primary_expression             shift and go to state 78
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96

state 132

    (158) iteration_statement -> FOR ( . expression_statement expression_statement expression ) statement
    (153) expression_statement -> . ;
    (154) expression_statement -> . expression ;
    (68) expression -> . assignment_expression
    (69) expression -> . expression , assignment_expression
    (57) assignment_expression -> . conditional_expression
    (58) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression

    ;               shift and go to state 56
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90
    (               shift and go to state 62

    expression_statement           shift and go to state 208
    expression                     shift and go to state 60
    assignment_expression          shift and go to state 68
    conditional_expression         shift and go to state 69
    unary_expression               shift and go to state 70
    logical_or_expression          shift and go to state 71
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    cast_expression                shift and go to state 76
    logical_and_expression         shift and go to state 77
    primary_expression             shift and go to state 78
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96

state 133

    (159) jump_statement -> CONTINUE ; .

    }               reduce using rule 159 (jump_statement -> CONTINUE ; .)
    CIN             reduce using rule 159 (jump_statement -> CONTINUE ; .)
    COUT            reduce using rule 159 (jump_statement -> CONTINUE ; .)
    {               reduce using rule 159 (jump_statement -> CONTINUE ; .)
    ;               reduce using rule 159 (jump_statement -> CONTINUE ; .)
    IF              reduce using rule 159 (jump_statement -> CONTINUE ; .)
    WHILE           reduce using rule 159 (jump_statement -> CONTINUE ; .)
    FOR             reduce using rule 159 (jump_statement -> CONTINUE ; .)
    CONTINUE        reduce using rule 159 (jump_statement -> CONTINUE ; .)
    BREAK           reduce using rule 159 (jump_statement -> CONTINUE ; .)
    RETURN          reduce using rule 159 (jump_statement -> CONTINUE ; .)
    INC             reduce using rule 159 (jump_statement -> CONTINUE ; .)
    DEC             reduce using rule 159 (jump_statement -> CONTINUE ; .)
    &               reduce using rule 159 (jump_statement -> CONTINUE ; .)
    *               reduce using rule 159 (jump_statement -> CONTINUE ; .)
    +               reduce using rule 159 (jump_statement -> CONTINUE ; .)
    -               reduce using rule 159 (jump_statement -> CONTINUE ; .)
    ~               reduce using rule 159 (jump_statement -> CONTINUE ; .)
    !               reduce using rule 159 (jump_statement -> CONTINUE ; .)
    ID              reduce using rule 159 (jump_statement -> CONTINUE ; .)
    INTEGER         reduce using rule 159 (jump_statement -> CONTINUE ; .)
    STRING          reduce using rule 159 (jump_statement -> CONTINUE ; .)
    TRUE            reduce using rule 159 (jump_statement -> CONTINUE ; .)
    FALSE           reduce using rule 159 (jump_statement -> CONTINUE ; .)
    CHARACTER       reduce using rule 159 (jump_statement -> CONTINUE ; .)
    (               reduce using rule 159 (jump_statement -> CONTINUE ; .)
    ELSE            reduce using rule 159 (jump_statement -> CONTINUE ; .)


state 134

    (160) jump_statement -> BREAK ; .

    }               reduce using rule 160 (jump_statement -> BREAK ; .)
    CIN             reduce using rule 160 (jump_statement -> BREAK ; .)
    COUT            reduce using rule 160 (jump_statement -> BREAK ; .)
    {               reduce using rule 160 (jump_statement -> BREAK ; .)
    ;               reduce using rule 160 (jump_statement -> BREAK ; .)
    IF              reduce using rule 160 (jump_statement -> BREAK ; .)
    WHILE           reduce using rule 160 (jump_statement -> BREAK ; .)
    FOR             reduce using rule 160 (jump_statement -> BREAK ; .)
    CONTINUE        reduce using rule 160 (jump_statement -> BREAK ; .)
    BREAK           reduce using rule 160 (jump_statement -> BREAK ; .)
    RETURN          reduce using rule 160 (jump_statement -> BREAK ; .)
    INC             reduce using rule 160 (jump_statement -> BREAK ; .)
    DEC             reduce using rule 160 (jump_statement -> BREAK ; .)
    &               reduce using rule 160 (jump_statement -> BREAK ; .)
    *               reduce using rule 160 (jump_statement -> BREAK ; .)
    +               reduce using rule 160 (jump_statement -> BREAK ; .)
    -               reduce using rule 160 (jump_statement -> BREAK ; .)
    ~               reduce using rule 160 (jump_statement -> BREAK ; .)
    !               reduce using rule 160 (jump_statement -> BREAK ; .)
    ID              reduce using rule 160 (jump_statement -> BREAK ; .)
    INTEGER         reduce using rule 160 (jump_statement -> BREAK ; .)
    STRING          reduce using rule 160 (jump_statement -> BREAK ; .)
    TRUE            reduce using rule 160 (jump_statement -> BREAK ; .)
    FALSE           reduce using rule 160 (jump_statement -> BREAK ; .)
    CHARACTER       reduce using rule 160 (jump_statement -> BREAK ; .)
    (               reduce using rule 160 (jump_statement -> BREAK ; .)
    ELSE            reduce using rule 160 (jump_statement -> BREAK ; .)


state 135

    (161) jump_statement -> RETURN ; .

    }               reduce using rule 161 (jump_statement -> RETURN ; .)
    CIN             reduce using rule 161 (jump_statement -> RETURN ; .)
    COUT            reduce using rule 161 (jump_statement -> RETURN ; .)
    {               reduce using rule 161 (jump_statement -> RETURN ; .)
    ;               reduce using rule 161 (jump_statement -> RETURN ; .)
    IF              reduce using rule 161 (jump_statement -> RETURN ; .)
    WHILE           reduce using rule 161 (jump_statement -> RETURN ; .)
    FOR             reduce using rule 161 (jump_statement -> RETURN ; .)
    CONTINUE        reduce using rule 161 (jump_statement -> RETURN ; .)
    BREAK           reduce using rule 161 (jump_statement -> RETURN ; .)
    RETURN          reduce using rule 161 (jump_statement -> RETURN ; .)
    INC             reduce using rule 161 (jump_statement -> RETURN ; .)
    DEC             reduce using rule 161 (jump_statement -> RETURN ; .)
    &               reduce using rule 161 (jump_statement -> RETURN ; .)
    *               reduce using rule 161 (jump_statement -> RETURN ; .)
    +               reduce using rule 161 (jump_statement -> RETURN ; .)
    -               reduce using rule 161 (jump_statement -> RETURN ; .)
    ~               reduce using rule 161 (jump_statement -> RETURN ; .)
    !               reduce using rule 161 (jump_statement -> RETURN ; .)
    ID              reduce using rule 161 (jump_statement -> RETURN ; .)
    INTEGER         reduce using rule 161 (jump_statement -> RETURN ; .)
    STRING          reduce using rule 161 (jump_statement -> RETURN ; .)
    TRUE            reduce using rule 161 (jump_statement -> RETURN ; .)
    FALSE           reduce using rule 161 (jump_statement -> RETURN ; .)
    CHARACTER       reduce using rule 161 (jump_statement -> RETURN ; .)
    (               reduce using rule 161 (jump_statement -> RETURN ; .)
    ELSE            reduce using rule 161 (jump_statement -> RETURN ; .)


state 136

    (162) jump_statement -> RETURN expression . ;
    (69) expression -> expression . , assignment_expression

    ;               shift and go to state 209
    ,               shift and go to state 125


state 137

    (58) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (57) assignment_expression -> . conditional_expression
    (58) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression

    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90
    (               shift and go to state 62

    unary_expression               shift and go to state 70
    assignment_expression          shift and go to state 210
    conditional_expression         shift and go to state 69
    logical_or_expression          shift and go to state 71
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    cast_expression                shift and go to state 76
    logical_and_expression         shift and go to state 77
    primary_expression             shift and go to state 78
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96

state 138

    (59) assignment_operator -> = .

    INC             reduce using rule 59 (assignment_operator -> = .)
    DEC             reduce using rule 59 (assignment_operator -> = .)
    &               reduce using rule 59 (assignment_operator -> = .)
    *               reduce using rule 59 (assignment_operator -> = .)
    +               reduce using rule 59 (assignment_operator -> = .)
    -               reduce using rule 59 (assignment_operator -> = .)
    ~               reduce using rule 59 (assignment_operator -> = .)
    !               reduce using rule 59 (assignment_operator -> = .)
    ID              reduce using rule 59 (assignment_operator -> = .)
    INTEGER         reduce using rule 59 (assignment_operator -> = .)
    STRING          reduce using rule 59 (assignment_operator -> = .)
    TRUE            reduce using rule 59 (assignment_operator -> = .)
    FALSE           reduce using rule 59 (assignment_operator -> = .)
    CHARACTER       reduce using rule 59 (assignment_operator -> = .)
    (               reduce using rule 59 (assignment_operator -> = .)


state 139

    (60) assignment_operator -> MUL_EQ .

    INC             reduce using rule 60 (assignment_operator -> MUL_EQ .)
    DEC             reduce using rule 60 (assignment_operator -> MUL_EQ .)
    &               reduce using rule 60 (assignment_operator -> MUL_EQ .)
    *               reduce using rule 60 (assignment_operator -> MUL_EQ .)
    +               reduce using rule 60 (assignment_operator -> MUL_EQ .)
    -               reduce using rule 60 (assignment_operator -> MUL_EQ .)
    ~               reduce using rule 60 (assignment_operator -> MUL_EQ .)
    !               reduce using rule 60 (assignment_operator -> MUL_EQ .)
    ID              reduce using rule 60 (assignment_operator -> MUL_EQ .)
    INTEGER         reduce using rule 60 (assignment_operator -> MUL_EQ .)
    STRING          reduce using rule 60 (assignment_operator -> MUL_EQ .)
    TRUE            reduce using rule 60 (assignment_operator -> MUL_EQ .)
    FALSE           reduce using rule 60 (assignment_operator -> MUL_EQ .)
    CHARACTER       reduce using rule 60 (assignment_operator -> MUL_EQ .)
    (               reduce using rule 60 (assignment_operator -> MUL_EQ .)


state 140

    (61) assignment_operator -> DIV_EQ .

    INC             reduce using rule 61 (assignment_operator -> DIV_EQ .)
    DEC             reduce using rule 61 (assignment_operator -> DIV_EQ .)
    &               reduce using rule 61 (assignment_operator -> DIV_EQ .)
    *               reduce using rule 61 (assignment_operator -> DIV_EQ .)
    +               reduce using rule 61 (assignment_operator -> DIV_EQ .)
    -               reduce using rule 61 (assignment_operator -> DIV_EQ .)
    ~               reduce using rule 61 (assignment_operator -> DIV_EQ .)
    !               reduce using rule 61 (assignment_operator -> DIV_EQ .)
    ID              reduce using rule 61 (assignment_operator -> DIV_EQ .)
    INTEGER         reduce using rule 61 (assignment_operator -> DIV_EQ .)
    STRING          reduce using rule 61 (assignment_operator -> DIV_EQ .)
    TRUE            reduce using rule 61 (assignment_operator -> DIV_EQ .)
    FALSE           reduce using rule 61 (assignment_operator -> DIV_EQ .)
    CHARACTER       reduce using rule 61 (assignment_operator -> DIV_EQ .)
    (               reduce using rule 61 (assignment_operator -> DIV_EQ .)


state 141

    (62) assignment_operator -> MOD_EQ .

    INC             reduce using rule 62 (assignment_operator -> MOD_EQ .)
    DEC             reduce using rule 62 (assignment_operator -> MOD_EQ .)
    &               reduce using rule 62 (assignment_operator -> MOD_EQ .)
    *               reduce using rule 62 (assignment_operator -> MOD_EQ .)
    +               reduce using rule 62 (assignment_operator -> MOD_EQ .)
    -               reduce using rule 62 (assignment_operator -> MOD_EQ .)
    ~               reduce using rule 62 (assignment_operator -> MOD_EQ .)
    !               reduce using rule 62 (assignment_operator -> MOD_EQ .)
    ID              reduce using rule 62 (assignment_operator -> MOD_EQ .)
    INTEGER         reduce using rule 62 (assignment_operator -> MOD_EQ .)
    STRING          reduce using rule 62 (assignment_operator -> MOD_EQ .)
    TRUE            reduce using rule 62 (assignment_operator -> MOD_EQ .)
    FALSE           reduce using rule 62 (assignment_operator -> MOD_EQ .)
    CHARACTER       reduce using rule 62 (assignment_operator -> MOD_EQ .)
    (               reduce using rule 62 (assignment_operator -> MOD_EQ .)


state 142

    (63) assignment_operator -> ADD_EQ .

    INC             reduce using rule 63 (assignment_operator -> ADD_EQ .)
    DEC             reduce using rule 63 (assignment_operator -> ADD_EQ .)
    &               reduce using rule 63 (assignment_operator -> ADD_EQ .)
    *               reduce using rule 63 (assignment_operator -> ADD_EQ .)
    +               reduce using rule 63 (assignment_operator -> ADD_EQ .)
    -               reduce using rule 63 (assignment_operator -> ADD_EQ .)
    ~               reduce using rule 63 (assignment_operator -> ADD_EQ .)
    !               reduce using rule 63 (assignment_operator -> ADD_EQ .)
    ID              reduce using rule 63 (assignment_operator -> ADD_EQ .)
    INTEGER         reduce using rule 63 (assignment_operator -> ADD_EQ .)
    STRING          reduce using rule 63 (assignment_operator -> ADD_EQ .)
    TRUE            reduce using rule 63 (assignment_operator -> ADD_EQ .)
    FALSE           reduce using rule 63 (assignment_operator -> ADD_EQ .)
    CHARACTER       reduce using rule 63 (assignment_operator -> ADD_EQ .)
    (               reduce using rule 63 (assignment_operator -> ADD_EQ .)


state 143

    (64) assignment_operator -> SUB_EQ .

    INC             reduce using rule 64 (assignment_operator -> SUB_EQ .)
    DEC             reduce using rule 64 (assignment_operator -> SUB_EQ .)
    &               reduce using rule 64 (assignment_operator -> SUB_EQ .)
    *               reduce using rule 64 (assignment_operator -> SUB_EQ .)
    +               reduce using rule 64 (assignment_operator -> SUB_EQ .)
    -               reduce using rule 64 (assignment_operator -> SUB_EQ .)
    ~               reduce using rule 64 (assignment_operator -> SUB_EQ .)
    !               reduce using rule 64 (assignment_operator -> SUB_EQ .)
    ID              reduce using rule 64 (assignment_operator -> SUB_EQ .)
    INTEGER         reduce using rule 64 (assignment_operator -> SUB_EQ .)
    STRING          reduce using rule 64 (assignment_operator -> SUB_EQ .)
    TRUE            reduce using rule 64 (assignment_operator -> SUB_EQ .)
    FALSE           reduce using rule 64 (assignment_operator -> SUB_EQ .)
    CHARACTER       reduce using rule 64 (assignment_operator -> SUB_EQ .)
    (               reduce using rule 64 (assignment_operator -> SUB_EQ .)


state 144

    (65) assignment_operator -> AND_EQ .

    INC             reduce using rule 65 (assignment_operator -> AND_EQ .)
    DEC             reduce using rule 65 (assignment_operator -> AND_EQ .)
    &               reduce using rule 65 (assignment_operator -> AND_EQ .)
    *               reduce using rule 65 (assignment_operator -> AND_EQ .)
    +               reduce using rule 65 (assignment_operator -> AND_EQ .)
    -               reduce using rule 65 (assignment_operator -> AND_EQ .)
    ~               reduce using rule 65 (assignment_operator -> AND_EQ .)
    !               reduce using rule 65 (assignment_operator -> AND_EQ .)
    ID              reduce using rule 65 (assignment_operator -> AND_EQ .)
    INTEGER         reduce using rule 65 (assignment_operator -> AND_EQ .)
    STRING          reduce using rule 65 (assignment_operator -> AND_EQ .)
    TRUE            reduce using rule 65 (assignment_operator -> AND_EQ .)
    FALSE           reduce using rule 65 (assignment_operator -> AND_EQ .)
    CHARACTER       reduce using rule 65 (assignment_operator -> AND_EQ .)
    (               reduce using rule 65 (assignment_operator -> AND_EQ .)


state 145

    (66) assignment_operator -> XOR_EQ .

    INC             reduce using rule 66 (assignment_operator -> XOR_EQ .)
    DEC             reduce using rule 66 (assignment_operator -> XOR_EQ .)
    &               reduce using rule 66 (assignment_operator -> XOR_EQ .)
    *               reduce using rule 66 (assignment_operator -> XOR_EQ .)
    +               reduce using rule 66 (assignment_operator -> XOR_EQ .)
    -               reduce using rule 66 (assignment_operator -> XOR_EQ .)
    ~               reduce using rule 66 (assignment_operator -> XOR_EQ .)
    !               reduce using rule 66 (assignment_operator -> XOR_EQ .)
    ID              reduce using rule 66 (assignment_operator -> XOR_EQ .)
    INTEGER         reduce using rule 66 (assignment_operator -> XOR_EQ .)
    STRING          reduce using rule 66 (assignment_operator -> XOR_EQ .)
    TRUE            reduce using rule 66 (assignment_operator -> XOR_EQ .)
    FALSE           reduce using rule 66 (assignment_operator -> XOR_EQ .)
    CHARACTER       reduce using rule 66 (assignment_operator -> XOR_EQ .)
    (               reduce using rule 66 (assignment_operator -> XOR_EQ .)


state 146

    (67) assignment_operator -> OR_EQ .

    INC             reduce using rule 67 (assignment_operator -> OR_EQ .)
    DEC             reduce using rule 67 (assignment_operator -> OR_EQ .)
    &               reduce using rule 67 (assignment_operator -> OR_EQ .)
    *               reduce using rule 67 (assignment_operator -> OR_EQ .)
    +               reduce using rule 67 (assignment_operator -> OR_EQ .)
    -               reduce using rule 67 (assignment_operator -> OR_EQ .)
    ~               reduce using rule 67 (assignment_operator -> OR_EQ .)
    !               reduce using rule 67 (assignment_operator -> OR_EQ .)
    ID              reduce using rule 67 (assignment_operator -> OR_EQ .)
    INTEGER         reduce using rule 67 (assignment_operator -> OR_EQ .)
    STRING          reduce using rule 67 (assignment_operator -> OR_EQ .)
    TRUE            reduce using rule 67 (assignment_operator -> OR_EQ .)
    FALSE           reduce using rule 67 (assignment_operator -> OR_EQ .)
    CHARACTER       reduce using rule 67 (assignment_operator -> OR_EQ .)
    (               reduce using rule 67 (assignment_operator -> OR_EQ .)


state 147

    (56) conditional_expression -> logical_or_expression ? . expression : conditional_expression
    (68) expression -> . assignment_expression
    (69) expression -> . expression , assignment_expression
    (57) assignment_expression -> . conditional_expression
    (58) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression

    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90
    (               shift and go to state 62

    logical_or_expression          shift and go to state 71
    expression                     shift and go to state 211
    conditional_expression         shift and go to state 69
    assignment_expression          shift and go to state 68
    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    cast_expression                shift and go to state 76
    logical_and_expression         shift and go to state 77
    primary_expression             shift and go to state 78
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96

state 148

    (54) logical_or_expression -> logical_or_expression OR . logical_and_expression
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )

    (               shift and go to state 102
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90

    logical_and_expression         shift and go to state 212
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96
    cast_expression                shift and go to state 76
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    primary_expression             shift and go to state 78

state 149

    (9) postfix_expression -> postfix_expression [ . expression ]
    (68) expression -> . assignment_expression
    (69) expression -> . expression , assignment_expression
    (57) assignment_expression -> . conditional_expression
    (58) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression

    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90
    (               shift and go to state 62

    postfix_expression             shift and go to state 72
    expression                     shift and go to state 213
    assignment_expression          shift and go to state 68
    conditional_expression         shift and go to state 69
    unary_expression               shift and go to state 70
    logical_or_expression          shift and go to state 71
    unary_operator                 shift and go to state 75
    cast_expression                shift and go to state 76
    logical_and_expression         shift and go to state 77
    primary_expression             shift and go to state 78
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96

state 150

    (10) postfix_expression -> postfix_expression ( . )
    (11) postfix_expression -> postfix_expression ( . argument_expression_list )
    (16) argument_expression_list -> . assignment_expression
    (17) argument_expression_list -> . argument_expression_list , assignment_expression
    (57) assignment_expression -> . conditional_expression
    (58) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression

    )               shift and go to state 214
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90
    (               shift and go to state 62

    postfix_expression             shift and go to state 72
    argument_expression_list       shift and go to state 215
    assignment_expression          shift and go to state 216
    conditional_expression         shift and go to state 69
    unary_expression               shift and go to state 70
    logical_or_expression          shift and go to state 71
    unary_operator                 shift and go to state 75
    cast_expression                shift and go to state 76
    logical_and_expression         shift and go to state 77
    primary_expression             shift and go to state 78
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96

state 151

    (12) postfix_expression -> postfix_expression . . ID

    ID              shift and go to state 217


state 152

    (13) postfix_expression -> postfix_expression PTR . ID

    ID              shift and go to state 218


state 153

    (14) postfix_expression -> postfix_expression INC .

    [               reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    (               reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    .               reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    PTR             reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    INC             reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    DEC             reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    =               reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    MUL_EQ          reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    DIV_EQ          reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    MOD_EQ          reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    ADD_EQ          reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    SUB_EQ          reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    AND_EQ          reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    XOR_EQ          reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    OR_EQ           reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    *               reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    /               reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    %               reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    +               reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    -               reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    <               reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    >               reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    LE              reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    GE              reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    EQUAL           reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    NE              reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    &               reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    ^               reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    |               reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    AND             reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    ?               reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    OR              reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    ;               reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    ,               reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    ]               reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    )               reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    }               reduce using rule 14 (postfix_expression -> postfix_expression INC .)
    :               reduce using rule 14 (postfix_expression -> postfix_expression INC .)


state 154

    (15) postfix_expression -> postfix_expression DEC .

    [               reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    (               reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    .               reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    PTR             reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    INC             reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    DEC             reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    =               reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    MUL_EQ          reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    DIV_EQ          reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    MOD_EQ          reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    ADD_EQ          reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    SUB_EQ          reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    AND_EQ          reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    XOR_EQ          reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    OR_EQ           reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    *               reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    /               reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    %               reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    +               reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    -               reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    <               reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    >               reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    LE              reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    GE              reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    EQUAL           reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    NE              reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    &               reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    ^               reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    |               reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    AND             reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    ?               reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    OR              reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    ;               reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    ,               reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    ]               reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    )               reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    }               reduce using rule 15 (postfix_expression -> postfix_expression DEC .)
    :               reduce using rule 15 (postfix_expression -> postfix_expression DEC .)


state 155

    (19) unary_expression -> INC unary_expression .

    =               reduce using rule 19 (unary_expression -> INC unary_expression .)
    MUL_EQ          reduce using rule 19 (unary_expression -> INC unary_expression .)
    DIV_EQ          reduce using rule 19 (unary_expression -> INC unary_expression .)
    MOD_EQ          reduce using rule 19 (unary_expression -> INC unary_expression .)
    ADD_EQ          reduce using rule 19 (unary_expression -> INC unary_expression .)
    SUB_EQ          reduce using rule 19 (unary_expression -> INC unary_expression .)
    AND_EQ          reduce using rule 19 (unary_expression -> INC unary_expression .)
    XOR_EQ          reduce using rule 19 (unary_expression -> INC unary_expression .)
    OR_EQ           reduce using rule 19 (unary_expression -> INC unary_expression .)
    *               reduce using rule 19 (unary_expression -> INC unary_expression .)
    /               reduce using rule 19 (unary_expression -> INC unary_expression .)
    %               reduce using rule 19 (unary_expression -> INC unary_expression .)
    +               reduce using rule 19 (unary_expression -> INC unary_expression .)
    -               reduce using rule 19 (unary_expression -> INC unary_expression .)
    <               reduce using rule 19 (unary_expression -> INC unary_expression .)
    >               reduce using rule 19 (unary_expression -> INC unary_expression .)
    LE              reduce using rule 19 (unary_expression -> INC unary_expression .)
    GE              reduce using rule 19 (unary_expression -> INC unary_expression .)
    EQUAL           reduce using rule 19 (unary_expression -> INC unary_expression .)
    NE              reduce using rule 19 (unary_expression -> INC unary_expression .)
    &               reduce using rule 19 (unary_expression -> INC unary_expression .)
    ^               reduce using rule 19 (unary_expression -> INC unary_expression .)
    |               reduce using rule 19 (unary_expression -> INC unary_expression .)
    AND             reduce using rule 19 (unary_expression -> INC unary_expression .)
    ?               reduce using rule 19 (unary_expression -> INC unary_expression .)
    OR              reduce using rule 19 (unary_expression -> INC unary_expression .)
    ;               reduce using rule 19 (unary_expression -> INC unary_expression .)
    ,               reduce using rule 19 (unary_expression -> INC unary_expression .)
    ]               reduce using rule 19 (unary_expression -> INC unary_expression .)
    )               reduce using rule 19 (unary_expression -> INC unary_expression .)
    }               reduce using rule 19 (unary_expression -> INC unary_expression .)
    :               reduce using rule 19 (unary_expression -> INC unary_expression .)


state 156

    (7) primary_expression -> ( . expression )
    (68) expression -> . assignment_expression
    (69) expression -> . expression , assignment_expression
    (57) assignment_expression -> . conditional_expression
    (58) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression

    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90
    (               shift and go to state 62

    expression                     shift and go to state 127
    assignment_expression          shift and go to state 68
    conditional_expression         shift and go to state 69
    unary_expression               shift and go to state 70
    logical_or_expression          shift and go to state 71
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    cast_expression                shift and go to state 76
    logical_and_expression         shift and go to state 77
    primary_expression             shift and go to state 78
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96

state 157

    (20) unary_expression -> DEC unary_expression .

    =               reduce using rule 20 (unary_expression -> DEC unary_expression .)
    MUL_EQ          reduce using rule 20 (unary_expression -> DEC unary_expression .)
    DIV_EQ          reduce using rule 20 (unary_expression -> DEC unary_expression .)
    MOD_EQ          reduce using rule 20 (unary_expression -> DEC unary_expression .)
    ADD_EQ          reduce using rule 20 (unary_expression -> DEC unary_expression .)
    SUB_EQ          reduce using rule 20 (unary_expression -> DEC unary_expression .)
    AND_EQ          reduce using rule 20 (unary_expression -> DEC unary_expression .)
    XOR_EQ          reduce using rule 20 (unary_expression -> DEC unary_expression .)
    OR_EQ           reduce using rule 20 (unary_expression -> DEC unary_expression .)
    *               reduce using rule 20 (unary_expression -> DEC unary_expression .)
    /               reduce using rule 20 (unary_expression -> DEC unary_expression .)
    %               reduce using rule 20 (unary_expression -> DEC unary_expression .)
    +               reduce using rule 20 (unary_expression -> DEC unary_expression .)
    -               reduce using rule 20 (unary_expression -> DEC unary_expression .)
    <               reduce using rule 20 (unary_expression -> DEC unary_expression .)
    >               reduce using rule 20 (unary_expression -> DEC unary_expression .)
    LE              reduce using rule 20 (unary_expression -> DEC unary_expression .)
    GE              reduce using rule 20 (unary_expression -> DEC unary_expression .)
    EQUAL           reduce using rule 20 (unary_expression -> DEC unary_expression .)
    NE              reduce using rule 20 (unary_expression -> DEC unary_expression .)
    &               reduce using rule 20 (unary_expression -> DEC unary_expression .)
    ^               reduce using rule 20 (unary_expression -> DEC unary_expression .)
    |               reduce using rule 20 (unary_expression -> DEC unary_expression .)
    AND             reduce using rule 20 (unary_expression -> DEC unary_expression .)
    ?               reduce using rule 20 (unary_expression -> DEC unary_expression .)
    OR              reduce using rule 20 (unary_expression -> DEC unary_expression .)
    ;               reduce using rule 20 (unary_expression -> DEC unary_expression .)
    ,               reduce using rule 20 (unary_expression -> DEC unary_expression .)
    ]               reduce using rule 20 (unary_expression -> DEC unary_expression .)
    )               reduce using rule 20 (unary_expression -> DEC unary_expression .)
    }               reduce using rule 20 (unary_expression -> DEC unary_expression .)
    :               reduce using rule 20 (unary_expression -> DEC unary_expression .)


state 158

    (21) unary_expression -> unary_operator cast_expression .

    =               reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    MUL_EQ          reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    DIV_EQ          reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    MOD_EQ          reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    ADD_EQ          reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    SUB_EQ          reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    AND_EQ          reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    XOR_EQ          reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    OR_EQ           reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    *               reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    /               reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    %               reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    +               reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    -               reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    <               reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    >               reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    LE              reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    GE              reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    EQUAL           reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    NE              reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    &               reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    ^               reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    |               reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    ?               reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    ;               reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    ,               reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    ]               reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    )               reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    }               reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    :               reduce using rule 21 (unary_expression -> unary_operator cast_expression .)


state 159

    (52) logical_and_expression -> logical_and_expression AND . inclusive_or_expression
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )

    (               shift and go to state 102
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90

    inclusive_or_expression        shift and go to state 219
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96
    cast_expression                shift and go to state 76
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    primary_expression             shift and go to state 78

state 160

    (50) inclusive_or_expression -> inclusive_or_expression | . exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )

    (               shift and go to state 102
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90

    exclusive_or_expression        shift and go to state 220
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96
    cast_expression                shift and go to state 76
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    primary_expression             shift and go to state 78

state 161

    (48) exclusive_or_expression -> exclusive_or_expression ^ . and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )

    (               shift and go to state 102
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90

    and_expression                 shift and go to state 221
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96
    cast_expression                shift and go to state 76
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    primary_expression             shift and go to state 78

state 162

    (46) and_expression -> and_expression & . equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )

    (               shift and go to state 102
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90

    equality_expression            shift and go to state 222
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96
    cast_expression                shift and go to state 76
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    primary_expression             shift and go to state 78

state 163

    (43) equality_expression -> equality_expression EQUAL . relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )

    (               shift and go to state 102
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90

    relational_expression          shift and go to state 223
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96
    cast_expression                shift and go to state 76
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    primary_expression             shift and go to state 78

state 164

    (44) equality_expression -> equality_expression NE . relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )

    (               shift and go to state 102
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90

    relational_expression          shift and go to state 224
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96
    cast_expression                shift and go to state 76
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    primary_expression             shift and go to state 78

state 165

    (38) relational_expression -> relational_expression < . additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )

    (               shift and go to state 102
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90

    additive_expression            shift and go to state 225
    multiplicative_expression      shift and go to state 96
    cast_expression                shift and go to state 76
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    primary_expression             shift and go to state 78

state 166

    (39) relational_expression -> relational_expression > . additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )

    (               shift and go to state 102
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90

    additive_expression            shift and go to state 226
    multiplicative_expression      shift and go to state 96
    cast_expression                shift and go to state 76
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    primary_expression             shift and go to state 78

state 167

    (40) relational_expression -> relational_expression LE . additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )

    (               shift and go to state 102
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90

    additive_expression            shift and go to state 227
    multiplicative_expression      shift and go to state 96
    cast_expression                shift and go to state 76
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    primary_expression             shift and go to state 78

state 168

    (41) relational_expression -> relational_expression GE . additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )

    (               shift and go to state 102
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90

    additive_expression            shift and go to state 228
    multiplicative_expression      shift and go to state 96
    cast_expression                shift and go to state 76
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    primary_expression             shift and go to state 78

state 169

    (35) additive_expression -> additive_expression + . multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )

    (               shift and go to state 102
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90

    multiplicative_expression      shift and go to state 229
    cast_expression                shift and go to state 76
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    primary_expression             shift and go to state 78

state 170

    (36) additive_expression -> additive_expression - . multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )

    (               shift and go to state 102
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90

    multiplicative_expression      shift and go to state 230
    cast_expression                shift and go to state 76
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    primary_expression             shift and go to state 78

state 171

    (31) multiplicative_expression -> multiplicative_expression * . cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )

    (               shift and go to state 102
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90

    cast_expression                shift and go to state 231
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    primary_expression             shift and go to state 78

state 172

    (32) multiplicative_expression -> multiplicative_expression / . cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )

    (               shift and go to state 102
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90

    cast_expression                shift and go to state 232
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    primary_expression             shift and go to state 78

state 173

    (33) multiplicative_expression -> multiplicative_expression % . cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )

    (               shift and go to state 102
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90

    cast_expression                shift and go to state 233
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    primary_expression             shift and go to state 78

state 174

    (106) direct_declarator -> direct_declarator [ constant_expression ] .

    [               reduce using rule 106 (direct_declarator -> direct_declarator [ constant_expression ] .)
    (               reduce using rule 106 (direct_declarator -> direct_declarator [ constant_expression ] .)
    {               reduce using rule 106 (direct_declarator -> direct_declarator [ constant_expression ] .)
    VOID            reduce using rule 106 (direct_declarator -> direct_declarator [ constant_expression ] .)
    CHAR            reduce using rule 106 (direct_declarator -> direct_declarator [ constant_expression ] .)
    INT             reduce using rule 106 (direct_declarator -> direct_declarator [ constant_expression ] .)
    BOOL            reduce using rule 106 (direct_declarator -> direct_declarator [ constant_expression ] .)
    STRUCT          reduce using rule 106 (direct_declarator -> direct_declarator [ constant_expression ] .)
    CLASS           reduce using rule 106 (direct_declarator -> direct_declarator [ constant_expression ] .)
    ;               reduce using rule 106 (direct_declarator -> direct_declarator [ constant_expression ] .)
    *               reduce using rule 106 (direct_declarator -> direct_declarator [ constant_expression ] .)
    ID              reduce using rule 106 (direct_declarator -> direct_declarator [ constant_expression ] .)
    =               reduce using rule 106 (direct_declarator -> direct_declarator [ constant_expression ] .)
    ,               reduce using rule 106 (direct_declarator -> direct_declarator [ constant_expression ] .)
    )               reduce using rule 106 (direct_declarator -> direct_declarator [ constant_expression ] .)
    :               reduce using rule 106 (direct_declarator -> direct_declarator [ constant_expression ] .)


state 175

    (108) direct_declarator -> direct_declarator ( parameter_list ) .

    [               reduce using rule 108 (direct_declarator -> direct_declarator ( parameter_list ) .)
    (               reduce using rule 108 (direct_declarator -> direct_declarator ( parameter_list ) .)
    {               reduce using rule 108 (direct_declarator -> direct_declarator ( parameter_list ) .)
    VOID            reduce using rule 108 (direct_declarator -> direct_declarator ( parameter_list ) .)
    CHAR            reduce using rule 108 (direct_declarator -> direct_declarator ( parameter_list ) .)
    INT             reduce using rule 108 (direct_declarator -> direct_declarator ( parameter_list ) .)
    BOOL            reduce using rule 108 (direct_declarator -> direct_declarator ( parameter_list ) .)
    STRUCT          reduce using rule 108 (direct_declarator -> direct_declarator ( parameter_list ) .)
    CLASS           reduce using rule 108 (direct_declarator -> direct_declarator ( parameter_list ) .)
    ;               reduce using rule 108 (direct_declarator -> direct_declarator ( parameter_list ) .)
    *               reduce using rule 108 (direct_declarator -> direct_declarator ( parameter_list ) .)
    ID              reduce using rule 108 (direct_declarator -> direct_declarator ( parameter_list ) .)
    =               reduce using rule 108 (direct_declarator -> direct_declarator ( parameter_list ) .)
    ,               reduce using rule 108 (direct_declarator -> direct_declarator ( parameter_list ) .)
    )               reduce using rule 108 (direct_declarator -> direct_declarator ( parameter_list ) .)
    :               reduce using rule 108 (direct_declarator -> direct_declarator ( parameter_list ) .)


state 176

    (114) parameter_list -> parameter_list , . parameter_declaration
    (115) parameter_declaration -> . declaration_specifiers declarator
    (116) parameter_declaration -> . declaration_specifiers abstract_declarator
    (117) parameter_declaration -> . declaration_specifiers
    (73) declaration_specifiers -> .
    (74) declaration_specifiers -> . type_specifier
    (75) declaration_specifiers -> . type_specifier declaration_specifiers
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . INT
    (83) type_specifier -> . BOOL
    (84) type_specifier -> . struct_specifier
    (85) type_specifier -> . class_definition
    (91) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (86) class_definition -> . CLASS ID { class_member_list }

    *               reduce using rule 73 (declaration_specifiers -> .)
    ID              reduce using rule 73 (declaration_specifiers -> .)
    (               reduce using rule 73 (declaration_specifiers -> .)
    [               reduce using rule 73 (declaration_specifiers -> .)
    )               reduce using rule 73 (declaration_specifiers -> .)
    ,               reduce using rule 73 (declaration_specifiers -> .)
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20

    parameter_declaration          shift and go to state 234
    declaration_specifiers         shift and go to state 108
    type_specifier                 shift and go to state 7
    struct_specifier               shift and go to state 14
    class_definition               shift and go to state 15

state 177

    (109) direct_declarator -> direct_declarator ( identifier_list ) .

    [               reduce using rule 109 (direct_declarator -> direct_declarator ( identifier_list ) .)
    (               reduce using rule 109 (direct_declarator -> direct_declarator ( identifier_list ) .)
    {               reduce using rule 109 (direct_declarator -> direct_declarator ( identifier_list ) .)
    VOID            reduce using rule 109 (direct_declarator -> direct_declarator ( identifier_list ) .)
    CHAR            reduce using rule 109 (direct_declarator -> direct_declarator ( identifier_list ) .)
    INT             reduce using rule 109 (direct_declarator -> direct_declarator ( identifier_list ) .)
    BOOL            reduce using rule 109 (direct_declarator -> direct_declarator ( identifier_list ) .)
    STRUCT          reduce using rule 109 (direct_declarator -> direct_declarator ( identifier_list ) .)
    CLASS           reduce using rule 109 (direct_declarator -> direct_declarator ( identifier_list ) .)
    ;               reduce using rule 109 (direct_declarator -> direct_declarator ( identifier_list ) .)
    *               reduce using rule 109 (direct_declarator -> direct_declarator ( identifier_list ) .)
    ID              reduce using rule 109 (direct_declarator -> direct_declarator ( identifier_list ) .)
    =               reduce using rule 109 (direct_declarator -> direct_declarator ( identifier_list ) .)
    ,               reduce using rule 109 (direct_declarator -> direct_declarator ( identifier_list ) .)
    )               reduce using rule 109 (direct_declarator -> direct_declarator ( identifier_list ) .)
    :               reduce using rule 109 (direct_declarator -> direct_declarator ( identifier_list ) .)


state 178

    (119) identifier_list -> identifier_list , . ID

    ID              shift and go to state 235


state 179

    (115) parameter_declaration -> declaration_specifiers declarator .

    )               reduce using rule 115 (parameter_declaration -> declaration_specifiers declarator .)
    ,               reduce using rule 115 (parameter_declaration -> declaration_specifiers declarator .)


state 180

    (116) parameter_declaration -> declaration_specifiers abstract_declarator .

    )               reduce using rule 116 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    ,               reduce using rule 116 (parameter_declaration -> declaration_specifiers abstract_declarator .)


state 181

    (102) declarator -> pointer . direct_declarator
    (122) abstract_declarator -> pointer .
    (124) abstract_declarator -> pointer . direct_abstract_declarator
    (104) direct_declarator -> . ID
    (105) direct_declarator -> . ( declarator )
    (106) direct_declarator -> . direct_declarator [ constant_expression ]
    (107) direct_declarator -> . direct_declarator [ ]
    (108) direct_declarator -> . direct_declarator ( parameter_list )
    (109) direct_declarator -> . direct_declarator ( identifier_list )
    (110) direct_declarator -> . direct_declarator ( )
    (125) direct_abstract_declarator -> . ( abstract_declarator )
    (126) direct_abstract_declarator -> . [ ]
    (127) direct_abstract_declarator -> . [ constant_expression ]
    (128) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (129) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (130) direct_abstract_declarator -> . ( )
    (131) direct_abstract_declarator -> . ( parameter_list )
    (132) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (133) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_list )

    )               reduce using rule 122 (abstract_declarator -> pointer .)
    ,               reduce using rule 122 (abstract_declarator -> pointer .)
    ID              shift and go to state 17
    (               shift and go to state 183
    [               shift and go to state 184

    direct_declarator              shift and go to state 32
    direct_abstract_declarator     shift and go to state 236

state 182

    (123) abstract_declarator -> direct_abstract_declarator .
    (128) direct_abstract_declarator -> direct_abstract_declarator . [ ]
    (129) direct_abstract_declarator -> direct_abstract_declarator . [ constant_expression ]
    (132) direct_abstract_declarator -> direct_abstract_declarator . ( )
    (133) direct_abstract_declarator -> direct_abstract_declarator . ( parameter_list )

    )               reduce using rule 123 (abstract_declarator -> direct_abstract_declarator .)
    ,               reduce using rule 123 (abstract_declarator -> direct_abstract_declarator .)
    [               shift and go to state 237
    (               shift and go to state 238


state 183

    (105) direct_declarator -> ( . declarator )
    (125) direct_abstract_declarator -> ( . abstract_declarator )
    (130) direct_abstract_declarator -> ( . )
    (131) direct_abstract_declarator -> ( . parameter_list )
    (102) declarator -> . pointer direct_declarator
    (103) declarator -> . direct_declarator
    (122) abstract_declarator -> . pointer
    (123) abstract_declarator -> . direct_abstract_declarator
    (124) abstract_declarator -> . pointer direct_abstract_declarator
    (113) parameter_list -> . parameter_declaration
    (114) parameter_list -> . parameter_list , parameter_declaration
    (111) pointer -> . *
    (112) pointer -> . * pointer
    (104) direct_declarator -> . ID
    (105) direct_declarator -> . ( declarator )
    (106) direct_declarator -> . direct_declarator [ constant_expression ]
    (107) direct_declarator -> . direct_declarator [ ]
    (108) direct_declarator -> . direct_declarator ( parameter_list )
    (109) direct_declarator -> . direct_declarator ( identifier_list )
    (110) direct_declarator -> . direct_declarator ( )
    (125) direct_abstract_declarator -> . ( abstract_declarator )
    (126) direct_abstract_declarator -> . [ ]
    (127) direct_abstract_declarator -> . [ constant_expression ]
    (128) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (129) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (130) direct_abstract_declarator -> . ( )
    (131) direct_abstract_declarator -> . ( parameter_list )
    (132) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (133) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_list )
    (115) parameter_declaration -> . declaration_specifiers declarator
    (116) parameter_declaration -> . declaration_specifiers abstract_declarator
    (117) parameter_declaration -> . declaration_specifiers
    (73) declaration_specifiers -> .
    (74) declaration_specifiers -> . type_specifier
    (75) declaration_specifiers -> . type_specifier declaration_specifiers
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . INT
    (83) type_specifier -> . BOOL
    (84) type_specifier -> . struct_specifier
    (85) type_specifier -> . class_definition
    (91) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (86) class_definition -> . CLASS ID { class_member_list }

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 239
    *               shift and go to state 16
    ID              shift and go to state 17
    (               shift and go to state 183
    [               shift and go to state 184
    ,               reduce using rule 73 (declaration_specifiers -> .)
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20

  ! *               [ reduce using rule 73 (declaration_specifiers -> .) ]
  ! ID              [ reduce using rule 73 (declaration_specifiers -> .) ]
  ! (               [ reduce using rule 73 (declaration_specifiers -> .) ]
  ! [               [ reduce using rule 73 (declaration_specifiers -> .) ]
  ! )               [ reduce using rule 73 (declaration_specifiers -> .) ]

    declarator                     shift and go to state 36
    abstract_declarator            shift and go to state 240
    parameter_list                 shift and go to state 241
    pointer                        shift and go to state 181
    direct_declarator              shift and go to state 9
    direct_abstract_declarator     shift and go to state 182
    parameter_declaration          shift and go to state 106
    declaration_specifiers         shift and go to state 108
    type_specifier                 shift and go to state 7
    struct_specifier               shift and go to state 14
    class_definition               shift and go to state 15

state 184

    (126) direct_abstract_declarator -> [ . ]
    (127) direct_abstract_declarator -> [ . constant_expression ]
    (70) constant_expression -> . conditional_expression
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )

    ]               shift and go to state 242
    (               shift and go to state 102
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90

    constant_expression            shift and go to state 243
    conditional_expression         shift and go to state 100
    logical_or_expression          shift and go to state 71
    logical_and_expression         shift and go to state 77
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96
    cast_expression                shift and go to state 76
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    primary_expression             shift and go to state 78

state 185

    (91) struct_specifier -> STRUCT ID { struct_declaration_list . }
    (93) struct_declaration_list -> struct_declaration_list . struct_declaration
    (94) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (95) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (96) specifier_qualifier_list -> . type_specifier
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . INT
    (83) type_specifier -> . BOOL
    (84) type_specifier -> . struct_specifier
    (85) type_specifier -> . class_definition
    (91) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (86) class_definition -> . CLASS ID { class_member_list }

    }               shift and go to state 244
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20

    struct_declaration             shift and go to state 245
    specifier_qualifier_list       shift and go to state 187
    type_specifier                 shift and go to state 130
    struct_specifier               shift and go to state 14
    class_definition               shift and go to state 15

state 186

    (92) struct_declaration_list -> struct_declaration .

    }               reduce using rule 92 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 92 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 92 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 92 (struct_declaration_list -> struct_declaration .)
    BOOL            reduce using rule 92 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 92 (struct_declaration_list -> struct_declaration .)
    CLASS           reduce using rule 92 (struct_declaration_list -> struct_declaration .)


state 187

    (94) struct_declaration -> specifier_qualifier_list . struct_declarator_list ;
    (97) struct_declarator_list -> . struct_declarator
    (98) struct_declarator_list -> . struct_declarator_list , struct_declarator
    (99) struct_declarator -> . declarator
    (100) struct_declarator -> . : constant_expression
    (101) struct_declarator -> . declarator : constant_expression
    (102) declarator -> . pointer direct_declarator
    (103) declarator -> . direct_declarator
    (111) pointer -> . *
    (112) pointer -> . * pointer
    (104) direct_declarator -> . ID
    (105) direct_declarator -> . ( declarator )
    (106) direct_declarator -> . direct_declarator [ constant_expression ]
    (107) direct_declarator -> . direct_declarator [ ]
    (108) direct_declarator -> . direct_declarator ( parameter_list )
    (109) direct_declarator -> . direct_declarator ( identifier_list )
    (110) direct_declarator -> . direct_declarator ( )

    :               shift and go to state 249
    *               shift and go to state 16
    ID              shift and go to state 17
    (               shift and go to state 18

    struct_declarator_list         shift and go to state 246
    struct_declarator              shift and go to state 247
    declarator                     shift and go to state 248
    pointer                        shift and go to state 8
    direct_declarator              shift and go to state 9

state 188

    (86) class_definition -> CLASS ID { class_member_list . }
    (88) class_member_list -> class_member_list . class_member
    (89) class_member -> . function_definition
    (90) class_member -> . declaration
    (167) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (168) function_definition -> . declaration_specifiers declarator compound_statement
    (169) function_definition -> . declarator declaration_list compound_statement
    (170) function_definition -> . declarator compound_statement
    (71) declaration -> . declaration_specifiers ;
    (72) declaration -> . declaration_specifiers init_declarator_list ;
    (73) declaration_specifiers -> .
    (74) declaration_specifiers -> . type_specifier
    (75) declaration_specifiers -> . type_specifier declaration_specifiers
    (102) declarator -> . pointer direct_declarator
    (103) declarator -> . direct_declarator
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . INT
    (83) type_specifier -> . BOOL
    (84) type_specifier -> . struct_specifier
    (85) type_specifier -> . class_definition
    (111) pointer -> . *
    (112) pointer -> . * pointer
    (104) direct_declarator -> . ID
    (105) direct_declarator -> . ( declarator )
    (106) direct_declarator -> . direct_declarator [ constant_expression ]
    (107) direct_declarator -> . direct_declarator [ ]
    (108) direct_declarator -> . direct_declarator ( parameter_list )
    (109) direct_declarator -> . direct_declarator ( identifier_list )
    (110) direct_declarator -> . direct_declarator ( )
    (91) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (86) class_definition -> . CLASS ID { class_member_list }

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    }               shift and go to state 250
    ;               reduce using rule 73 (declaration_specifiers -> .)
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    *               shift and go to state 16
    ID              shift and go to state 17
    (               shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20

  ! *               [ reduce using rule 73 (declaration_specifiers -> .) ]
  ! ID              [ reduce using rule 73 (declaration_specifiers -> .) ]
  ! (               [ reduce using rule 73 (declaration_specifiers -> .) ]

    class_member                   shift and go to state 251
    function_definition            shift and go to state 190
    declaration                    shift and go to state 191
    declaration_specifiers         shift and go to state 5
    declarator                     shift and go to state 6
    type_specifier                 shift and go to state 7
    pointer                        shift and go to state 8
    direct_declarator              shift and go to state 9
    struct_specifier               shift and go to state 14
    class_definition               shift and go to state 15

state 189

    (87) class_member_list -> class_member .

    }               reduce using rule 87 (class_member_list -> class_member .)
    VOID            reduce using rule 87 (class_member_list -> class_member .)
    CHAR            reduce using rule 87 (class_member_list -> class_member .)
    INT             reduce using rule 87 (class_member_list -> class_member .)
    BOOL            reduce using rule 87 (class_member_list -> class_member .)
    *               reduce using rule 87 (class_member_list -> class_member .)
    ID              reduce using rule 87 (class_member_list -> class_member .)
    (               reduce using rule 87 (class_member_list -> class_member .)
    STRUCT          reduce using rule 87 (class_member_list -> class_member .)
    CLASS           reduce using rule 87 (class_member_list -> class_member .)
    ;               reduce using rule 87 (class_member_list -> class_member .)


state 190

    (89) class_member -> function_definition .

    }               reduce using rule 89 (class_member -> function_definition .)
    VOID            reduce using rule 89 (class_member -> function_definition .)
    CHAR            reduce using rule 89 (class_member -> function_definition .)
    INT             reduce using rule 89 (class_member -> function_definition .)
    BOOL            reduce using rule 89 (class_member -> function_definition .)
    *               reduce using rule 89 (class_member -> function_definition .)
    ID              reduce using rule 89 (class_member -> function_definition .)
    (               reduce using rule 89 (class_member -> function_definition .)
    STRUCT          reduce using rule 89 (class_member -> function_definition .)
    CLASS           reduce using rule 89 (class_member -> function_definition .)
    ;               reduce using rule 89 (class_member -> function_definition .)


state 191

    (90) class_member -> declaration .

    }               reduce using rule 90 (class_member -> declaration .)
    VOID            reduce using rule 90 (class_member -> declaration .)
    CHAR            reduce using rule 90 (class_member -> declaration .)
    INT             reduce using rule 90 (class_member -> declaration .)
    BOOL            reduce using rule 90 (class_member -> declaration .)
    *               reduce using rule 90 (class_member -> declaration .)
    ID              reduce using rule 90 (class_member -> declaration .)
    (               reduce using rule 90 (class_member -> declaration .)
    STRUCT          reduce using rule 90 (class_member -> declaration .)
    CLASS           reduce using rule 90 (class_member -> declaration .)
    ;               reduce using rule 90 (class_member -> declaration .)


state 192

    (135) initializer -> { initializer_list . }
    (136) initializer -> { initializer_list . , }
    (138) initializer_list -> initializer_list . , initializer

    }               shift and go to state 252
    ,               shift and go to state 253


state 193

    (137) initializer_list -> initializer .

    }               reduce using rule 137 (initializer_list -> initializer .)
    ,               reduce using rule 137 (initializer_list -> initializer .)


state 194

    (148) compound_statement -> { declaration_list statement_list } .

    VOID            reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    CHAR            reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    INT             reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    BOOL            reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    *               reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    ID              reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    (               reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    STRUCT          reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    CLASS           reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    $end            reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    ;               reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    }               reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    CIN             reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    COUT            reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    {               reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    IF              reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    WHILE           reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    FOR             reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    CONTINUE        reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    BREAK           reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    RETURN          reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    INC             reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    DEC             reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    &               reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    +               reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    -               reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    ~               reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    !               reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    INTEGER         reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    STRING          reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    TRUE            reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    FALSE           reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    CHARACTER       reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)
    ELSE            reduce using rule 148 (compound_statement -> { declaration_list statement_list } .)


state 195

    (171) input_statement -> CIN IN ID . ;

    ;               shift and go to state 254


state 196

    (172) output_statement -> COUT output_list ; .

    }               reduce using rule 172 (output_statement -> COUT output_list ; .)
    CIN             reduce using rule 172 (output_statement -> COUT output_list ; .)
    COUT            reduce using rule 172 (output_statement -> COUT output_list ; .)
    {               reduce using rule 172 (output_statement -> COUT output_list ; .)
    ;               reduce using rule 172 (output_statement -> COUT output_list ; .)
    IF              reduce using rule 172 (output_statement -> COUT output_list ; .)
    WHILE           reduce using rule 172 (output_statement -> COUT output_list ; .)
    FOR             reduce using rule 172 (output_statement -> COUT output_list ; .)
    CONTINUE        reduce using rule 172 (output_statement -> COUT output_list ; .)
    BREAK           reduce using rule 172 (output_statement -> COUT output_list ; .)
    RETURN          reduce using rule 172 (output_statement -> COUT output_list ; .)
    INC             reduce using rule 172 (output_statement -> COUT output_list ; .)
    DEC             reduce using rule 172 (output_statement -> COUT output_list ; .)
    &               reduce using rule 172 (output_statement -> COUT output_list ; .)
    *               reduce using rule 172 (output_statement -> COUT output_list ; .)
    +               reduce using rule 172 (output_statement -> COUT output_list ; .)
    -               reduce using rule 172 (output_statement -> COUT output_list ; .)
    ~               reduce using rule 172 (output_statement -> COUT output_list ; .)
    !               reduce using rule 172 (output_statement -> COUT output_list ; .)
    ID              reduce using rule 172 (output_statement -> COUT output_list ; .)
    INTEGER         reduce using rule 172 (output_statement -> COUT output_list ; .)
    STRING          reduce using rule 172 (output_statement -> COUT output_list ; .)
    TRUE            reduce using rule 172 (output_statement -> COUT output_list ; .)
    FALSE           reduce using rule 172 (output_statement -> COUT output_list ; .)
    CHARACTER       reduce using rule 172 (output_statement -> COUT output_list ; .)
    (               reduce using rule 172 (output_statement -> COUT output_list ; .)
    ELSE            reduce using rule 172 (output_statement -> COUT output_list ; .)


state 197

    (174) output_list -> output_list OUT . primary_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )

    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90
    (               shift and go to state 156

    primary_expression             shift and go to state 255

state 198

    (173) output_list -> OUT primary_expression .

    ;               reduce using rule 173 (output_list -> OUT primary_expression .)
    OUT             reduce using rule 173 (output_list -> OUT primary_expression .)


state 199

    (69) expression -> expression , assignment_expression .

    ;               reduce using rule 69 (expression -> expression , assignment_expression .)
    ,               reduce using rule 69 (expression -> expression , assignment_expression .)
    )               reduce using rule 69 (expression -> expression , assignment_expression .)
    :               reduce using rule 69 (expression -> expression , assignment_expression .)
    ]               reduce using rule 69 (expression -> expression , assignment_expression .)


state 200

    (155) selection_statement -> IF ( expression . ) statement
    (156) selection_statement -> IF ( expression . ) statement ELSE statement
    (69) expression -> expression . , assignment_expression

    )               shift and go to state 256
    ,               shift and go to state 125


state 201

    (7) primary_expression -> ( expression ) .

    [               reduce using rule 7 (primary_expression -> ( expression ) .)
    (               reduce using rule 7 (primary_expression -> ( expression ) .)
    .               reduce using rule 7 (primary_expression -> ( expression ) .)
    PTR             reduce using rule 7 (primary_expression -> ( expression ) .)
    INC             reduce using rule 7 (primary_expression -> ( expression ) .)
    DEC             reduce using rule 7 (primary_expression -> ( expression ) .)
    =               reduce using rule 7 (primary_expression -> ( expression ) .)
    MUL_EQ          reduce using rule 7 (primary_expression -> ( expression ) .)
    DIV_EQ          reduce using rule 7 (primary_expression -> ( expression ) .)
    MOD_EQ          reduce using rule 7 (primary_expression -> ( expression ) .)
    ADD_EQ          reduce using rule 7 (primary_expression -> ( expression ) .)
    SUB_EQ          reduce using rule 7 (primary_expression -> ( expression ) .)
    AND_EQ          reduce using rule 7 (primary_expression -> ( expression ) .)
    XOR_EQ          reduce using rule 7 (primary_expression -> ( expression ) .)
    OR_EQ           reduce using rule 7 (primary_expression -> ( expression ) .)
    *               reduce using rule 7 (primary_expression -> ( expression ) .)
    /               reduce using rule 7 (primary_expression -> ( expression ) .)
    %               reduce using rule 7 (primary_expression -> ( expression ) .)
    +               reduce using rule 7 (primary_expression -> ( expression ) .)
    -               reduce using rule 7 (primary_expression -> ( expression ) .)
    <               reduce using rule 7 (primary_expression -> ( expression ) .)
    >               reduce using rule 7 (primary_expression -> ( expression ) .)
    LE              reduce using rule 7 (primary_expression -> ( expression ) .)
    GE              reduce using rule 7 (primary_expression -> ( expression ) .)
    EQUAL           reduce using rule 7 (primary_expression -> ( expression ) .)
    NE              reduce using rule 7 (primary_expression -> ( expression ) .)
    &               reduce using rule 7 (primary_expression -> ( expression ) .)
    ^               reduce using rule 7 (primary_expression -> ( expression ) .)
    |               reduce using rule 7 (primary_expression -> ( expression ) .)
    AND             reduce using rule 7 (primary_expression -> ( expression ) .)
    ?               reduce using rule 7 (primary_expression -> ( expression ) .)
    OR              reduce using rule 7 (primary_expression -> ( expression ) .)
    ;               reduce using rule 7 (primary_expression -> ( expression ) .)
    ,               reduce using rule 7 (primary_expression -> ( expression ) .)
    ]               reduce using rule 7 (primary_expression -> ( expression ) .)
    )               reduce using rule 7 (primary_expression -> ( expression ) .)
    }               reduce using rule 7 (primary_expression -> ( expression ) .)
    :               reduce using rule 7 (primary_expression -> ( expression ) .)
    OUT             reduce using rule 7 (primary_expression -> ( expression ) .)


state 202

    (29) cast_expression -> ( type_name ) . cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )

    (               shift and go to state 102
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90

    cast_expression                shift and go to state 257
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    primary_expression             shift and go to state 78

state 203

    (121) type_name -> specifier_qualifier_list abstract_declarator .

    )               reduce using rule 121 (type_name -> specifier_qualifier_list abstract_declarator .)


state 204

    (122) abstract_declarator -> pointer .
    (124) abstract_declarator -> pointer . direct_abstract_declarator
    (125) direct_abstract_declarator -> . ( abstract_declarator )
    (126) direct_abstract_declarator -> . [ ]
    (127) direct_abstract_declarator -> . [ constant_expression ]
    (128) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (129) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (130) direct_abstract_declarator -> . ( )
    (131) direct_abstract_declarator -> . ( parameter_list )
    (132) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (133) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_list )

    )               reduce using rule 122 (abstract_declarator -> pointer .)
    (               shift and go to state 205
    [               shift and go to state 184

    direct_abstract_declarator     shift and go to state 236

state 205

    (125) direct_abstract_declarator -> ( . abstract_declarator )
    (130) direct_abstract_declarator -> ( . )
    (131) direct_abstract_declarator -> ( . parameter_list )
    (122) abstract_declarator -> . pointer
    (123) abstract_declarator -> . direct_abstract_declarator
    (124) abstract_declarator -> . pointer direct_abstract_declarator
    (113) parameter_list -> . parameter_declaration
    (114) parameter_list -> . parameter_list , parameter_declaration
    (111) pointer -> . *
    (112) pointer -> . * pointer
    (125) direct_abstract_declarator -> . ( abstract_declarator )
    (126) direct_abstract_declarator -> . [ ]
    (127) direct_abstract_declarator -> . [ constant_expression ]
    (128) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (129) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (130) direct_abstract_declarator -> . ( )
    (131) direct_abstract_declarator -> . ( parameter_list )
    (132) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (133) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_list )
    (115) parameter_declaration -> . declaration_specifiers declarator
    (116) parameter_declaration -> . declaration_specifiers abstract_declarator
    (117) parameter_declaration -> . declaration_specifiers
    (73) declaration_specifiers -> .
    (74) declaration_specifiers -> . type_specifier
    (75) declaration_specifiers -> . type_specifier declaration_specifiers
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . INT
    (83) type_specifier -> . BOOL
    (84) type_specifier -> . struct_specifier
    (85) type_specifier -> . class_definition
    (91) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (86) class_definition -> . CLASS ID { class_member_list }

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 239
    *               shift and go to state 16
    (               shift and go to state 205
    [               shift and go to state 184
    ID              reduce using rule 73 (declaration_specifiers -> .)
    ,               reduce using rule 73 (declaration_specifiers -> .)
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20

  ! *               [ reduce using rule 73 (declaration_specifiers -> .) ]
  ! (               [ reduce using rule 73 (declaration_specifiers -> .) ]
  ! [               [ reduce using rule 73 (declaration_specifiers -> .) ]
  ! )               [ reduce using rule 73 (declaration_specifiers -> .) ]

    abstract_declarator            shift and go to state 240
    parameter_list                 shift and go to state 241
    pointer                        shift and go to state 204
    direct_abstract_declarator     shift and go to state 182
    parameter_declaration          shift and go to state 106
    declaration_specifiers         shift and go to state 108
    type_specifier                 shift and go to state 7
    struct_specifier               shift and go to state 14
    class_definition               shift and go to state 15

state 206

    (95) specifier_qualifier_list -> type_specifier specifier_qualifier_list .

    *               reduce using rule 95 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    (               reduce using rule 95 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    [               reduce using rule 95 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    )               reduce using rule 95 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    :               reduce using rule 95 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    ID              reduce using rule 95 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)


state 207

    (157) iteration_statement -> WHILE ( expression . ) statement
    (69) expression -> expression . , assignment_expression

    )               shift and go to state 258
    ,               shift and go to state 125


state 208

    (158) iteration_statement -> FOR ( expression_statement . expression_statement expression ) statement
    (153) expression_statement -> . ;
    (154) expression_statement -> . expression ;
    (68) expression -> . assignment_expression
    (69) expression -> . expression , assignment_expression
    (57) assignment_expression -> . conditional_expression
    (58) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression

    ;               shift and go to state 56
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90
    (               shift and go to state 62

    expression_statement           shift and go to state 259
    expression                     shift and go to state 60
    assignment_expression          shift and go to state 68
    conditional_expression         shift and go to state 69
    unary_expression               shift and go to state 70
    logical_or_expression          shift and go to state 71
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    cast_expression                shift and go to state 76
    logical_and_expression         shift and go to state 77
    primary_expression             shift and go to state 78
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96

state 209

    (162) jump_statement -> RETURN expression ; .

    }               reduce using rule 162 (jump_statement -> RETURN expression ; .)
    CIN             reduce using rule 162 (jump_statement -> RETURN expression ; .)
    COUT            reduce using rule 162 (jump_statement -> RETURN expression ; .)
    {               reduce using rule 162 (jump_statement -> RETURN expression ; .)
    ;               reduce using rule 162 (jump_statement -> RETURN expression ; .)
    IF              reduce using rule 162 (jump_statement -> RETURN expression ; .)
    WHILE           reduce using rule 162 (jump_statement -> RETURN expression ; .)
    FOR             reduce using rule 162 (jump_statement -> RETURN expression ; .)
    CONTINUE        reduce using rule 162 (jump_statement -> RETURN expression ; .)
    BREAK           reduce using rule 162 (jump_statement -> RETURN expression ; .)
    RETURN          reduce using rule 162 (jump_statement -> RETURN expression ; .)
    INC             reduce using rule 162 (jump_statement -> RETURN expression ; .)
    DEC             reduce using rule 162 (jump_statement -> RETURN expression ; .)
    &               reduce using rule 162 (jump_statement -> RETURN expression ; .)
    *               reduce using rule 162 (jump_statement -> RETURN expression ; .)
    +               reduce using rule 162 (jump_statement -> RETURN expression ; .)
    -               reduce using rule 162 (jump_statement -> RETURN expression ; .)
    ~               reduce using rule 162 (jump_statement -> RETURN expression ; .)
    !               reduce using rule 162 (jump_statement -> RETURN expression ; .)
    ID              reduce using rule 162 (jump_statement -> RETURN expression ; .)
    INTEGER         reduce using rule 162 (jump_statement -> RETURN expression ; .)
    STRING          reduce using rule 162 (jump_statement -> RETURN expression ; .)
    TRUE            reduce using rule 162 (jump_statement -> RETURN expression ; .)
    FALSE           reduce using rule 162 (jump_statement -> RETURN expression ; .)
    CHARACTER       reduce using rule 162 (jump_statement -> RETURN expression ; .)
    (               reduce using rule 162 (jump_statement -> RETURN expression ; .)
    ELSE            reduce using rule 162 (jump_statement -> RETURN expression ; .)


state 210

    (58) assignment_expression -> unary_expression assignment_operator assignment_expression .

    ;               reduce using rule 58 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    ,               reduce using rule 58 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    )               reduce using rule 58 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    }               reduce using rule 58 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    :               reduce using rule 58 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    ]               reduce using rule 58 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 211

    (56) conditional_expression -> logical_or_expression ? expression . : conditional_expression
    (69) expression -> expression . , assignment_expression

    :               shift and go to state 260
    ,               shift and go to state 125


state 212

    (54) logical_or_expression -> logical_or_expression OR logical_and_expression .
    (52) logical_and_expression -> logical_and_expression . AND inclusive_or_expression

    ?               reduce using rule 54 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    OR              reduce using rule 54 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ;               reduce using rule 54 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ,               reduce using rule 54 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ]               reduce using rule 54 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    )               reduce using rule 54 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    }               reduce using rule 54 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    :               reduce using rule 54 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    AND             shift and go to state 159


state 213

    (9) postfix_expression -> postfix_expression [ expression . ]
    (69) expression -> expression . , assignment_expression

    ]               shift and go to state 261
    ,               shift and go to state 125


state 214

    (10) postfix_expression -> postfix_expression ( ) .

    [               reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    (               reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    .               reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    PTR             reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    INC             reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    DEC             reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    =               reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    MUL_EQ          reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    DIV_EQ          reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    MOD_EQ          reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    ADD_EQ          reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    SUB_EQ          reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    AND_EQ          reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    XOR_EQ          reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    OR_EQ           reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    *               reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    /               reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    %               reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    +               reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    -               reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    <               reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    >               reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    LE              reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    GE              reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    EQUAL           reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    NE              reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    &               reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    ^               reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    |               reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    AND             reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    ?               reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    OR              reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    ;               reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    ,               reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    ]               reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    )               reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    }               reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)
    :               reduce using rule 10 (postfix_expression -> postfix_expression ( ) .)


state 215

    (11) postfix_expression -> postfix_expression ( argument_expression_list . )
    (17) argument_expression_list -> argument_expression_list . , assignment_expression

    )               shift and go to state 262
    ,               shift and go to state 263


state 216

    (16) argument_expression_list -> assignment_expression .

    )               reduce using rule 16 (argument_expression_list -> assignment_expression .)
    ,               reduce using rule 16 (argument_expression_list -> assignment_expression .)


state 217

    (12) postfix_expression -> postfix_expression . ID .

    [               reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    (               reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    .               reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    PTR             reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    INC             reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    DEC             reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    =               reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    MUL_EQ          reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    DIV_EQ          reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    MOD_EQ          reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    ADD_EQ          reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    SUB_EQ          reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    AND_EQ          reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    XOR_EQ          reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    OR_EQ           reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    *               reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    /               reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    %               reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    +               reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    -               reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    <               reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    >               reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    LE              reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    GE              reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    EQUAL           reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    NE              reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    &               reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    ^               reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    |               reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    AND             reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    ?               reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    OR              reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    ;               reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    ,               reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    ]               reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    )               reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    }               reduce using rule 12 (postfix_expression -> postfix_expression . ID .)
    :               reduce using rule 12 (postfix_expression -> postfix_expression . ID .)


state 218

    (13) postfix_expression -> postfix_expression PTR ID .

    [               reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    (               reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    .               reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    PTR             reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    INC             reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    DEC             reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    =               reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    MUL_EQ          reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    DIV_EQ          reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    MOD_EQ          reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    ADD_EQ          reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    SUB_EQ          reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    AND_EQ          reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    XOR_EQ          reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    OR_EQ           reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    *               reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    /               reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    %               reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    +               reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    -               reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    <               reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    >               reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    LE              reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    GE              reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    EQUAL           reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    NE              reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    &               reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    ^               reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    |               reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    AND             reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    ?               reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    OR              reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    ;               reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    ,               reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    ]               reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    )               reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    }               reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)
    :               reduce using rule 13 (postfix_expression -> postfix_expression PTR ID .)


state 219

    (52) logical_and_expression -> logical_and_expression AND inclusive_or_expression .
    (50) inclusive_or_expression -> inclusive_or_expression . | exclusive_or_expression

    AND             reduce using rule 52 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    ?               reduce using rule 52 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    OR              reduce using rule 52 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    ;               reduce using rule 52 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    ,               reduce using rule 52 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    ]               reduce using rule 52 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    )               reduce using rule 52 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    }               reduce using rule 52 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    :               reduce using rule 52 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    |               shift and go to state 160


state 220

    (50) inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .
    (48) exclusive_or_expression -> exclusive_or_expression . ^ and_expression

    |               reduce using rule 50 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    AND             reduce using rule 50 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ?               reduce using rule 50 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    OR              reduce using rule 50 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ;               reduce using rule 50 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ,               reduce using rule 50 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ]               reduce using rule 50 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    )               reduce using rule 50 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    }               reduce using rule 50 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    :               reduce using rule 50 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ^               shift and go to state 161


state 221

    (48) exclusive_or_expression -> exclusive_or_expression ^ and_expression .
    (46) and_expression -> and_expression . & equality_expression

    ^               reduce using rule 48 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    |               reduce using rule 48 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    AND             reduce using rule 48 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ?               reduce using rule 48 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    OR              reduce using rule 48 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ;               reduce using rule 48 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ,               reduce using rule 48 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ]               reduce using rule 48 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    )               reduce using rule 48 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    }               reduce using rule 48 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    :               reduce using rule 48 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    &               shift and go to state 162


state 222

    (46) and_expression -> and_expression & equality_expression .
    (43) equality_expression -> equality_expression . EQUAL relational_expression
    (44) equality_expression -> equality_expression . NE relational_expression

    &               reduce using rule 46 (and_expression -> and_expression & equality_expression .)
    ^               reduce using rule 46 (and_expression -> and_expression & equality_expression .)
    |               reduce using rule 46 (and_expression -> and_expression & equality_expression .)
    AND             reduce using rule 46 (and_expression -> and_expression & equality_expression .)
    ?               reduce using rule 46 (and_expression -> and_expression & equality_expression .)
    OR              reduce using rule 46 (and_expression -> and_expression & equality_expression .)
    ;               reduce using rule 46 (and_expression -> and_expression & equality_expression .)
    ,               reduce using rule 46 (and_expression -> and_expression & equality_expression .)
    ]               reduce using rule 46 (and_expression -> and_expression & equality_expression .)
    )               reduce using rule 46 (and_expression -> and_expression & equality_expression .)
    }               reduce using rule 46 (and_expression -> and_expression & equality_expression .)
    :               reduce using rule 46 (and_expression -> and_expression & equality_expression .)
    EQUAL           shift and go to state 163
    NE              shift and go to state 164


state 223

    (43) equality_expression -> equality_expression EQUAL relational_expression .
    (38) relational_expression -> relational_expression . < additive_expression
    (39) relational_expression -> relational_expression . > additive_expression
    (40) relational_expression -> relational_expression . LE additive_expression
    (41) relational_expression -> relational_expression . GE additive_expression

    EQUAL           reduce using rule 43 (equality_expression -> equality_expression EQUAL relational_expression .)
    NE              reduce using rule 43 (equality_expression -> equality_expression EQUAL relational_expression .)
    &               reduce using rule 43 (equality_expression -> equality_expression EQUAL relational_expression .)
    ^               reduce using rule 43 (equality_expression -> equality_expression EQUAL relational_expression .)
    |               reduce using rule 43 (equality_expression -> equality_expression EQUAL relational_expression .)
    AND             reduce using rule 43 (equality_expression -> equality_expression EQUAL relational_expression .)
    ?               reduce using rule 43 (equality_expression -> equality_expression EQUAL relational_expression .)
    OR              reduce using rule 43 (equality_expression -> equality_expression EQUAL relational_expression .)
    ;               reduce using rule 43 (equality_expression -> equality_expression EQUAL relational_expression .)
    ,               reduce using rule 43 (equality_expression -> equality_expression EQUAL relational_expression .)
    ]               reduce using rule 43 (equality_expression -> equality_expression EQUAL relational_expression .)
    )               reduce using rule 43 (equality_expression -> equality_expression EQUAL relational_expression .)
    }               reduce using rule 43 (equality_expression -> equality_expression EQUAL relational_expression .)
    :               reduce using rule 43 (equality_expression -> equality_expression EQUAL relational_expression .)
    <               shift and go to state 165
    >               shift and go to state 166
    LE              shift and go to state 167
    GE              shift and go to state 168


state 224

    (44) equality_expression -> equality_expression NE relational_expression .
    (38) relational_expression -> relational_expression . < additive_expression
    (39) relational_expression -> relational_expression . > additive_expression
    (40) relational_expression -> relational_expression . LE additive_expression
    (41) relational_expression -> relational_expression . GE additive_expression

    EQUAL           reduce using rule 44 (equality_expression -> equality_expression NE relational_expression .)
    NE              reduce using rule 44 (equality_expression -> equality_expression NE relational_expression .)
    &               reduce using rule 44 (equality_expression -> equality_expression NE relational_expression .)
    ^               reduce using rule 44 (equality_expression -> equality_expression NE relational_expression .)
    |               reduce using rule 44 (equality_expression -> equality_expression NE relational_expression .)
    AND             reduce using rule 44 (equality_expression -> equality_expression NE relational_expression .)
    ?               reduce using rule 44 (equality_expression -> equality_expression NE relational_expression .)
    OR              reduce using rule 44 (equality_expression -> equality_expression NE relational_expression .)
    ;               reduce using rule 44 (equality_expression -> equality_expression NE relational_expression .)
    ,               reduce using rule 44 (equality_expression -> equality_expression NE relational_expression .)
    ]               reduce using rule 44 (equality_expression -> equality_expression NE relational_expression .)
    )               reduce using rule 44 (equality_expression -> equality_expression NE relational_expression .)
    }               reduce using rule 44 (equality_expression -> equality_expression NE relational_expression .)
    :               reduce using rule 44 (equality_expression -> equality_expression NE relational_expression .)
    <               shift and go to state 165
    >               shift and go to state 166
    LE              shift and go to state 167
    GE              shift and go to state 168


state 225

    (38) relational_expression -> relational_expression < additive_expression .
    (35) additive_expression -> additive_expression . + multiplicative_expression
    (36) additive_expression -> additive_expression . - multiplicative_expression

    <               reduce using rule 38 (relational_expression -> relational_expression < additive_expression .)
    >               reduce using rule 38 (relational_expression -> relational_expression < additive_expression .)
    LE              reduce using rule 38 (relational_expression -> relational_expression < additive_expression .)
    GE              reduce using rule 38 (relational_expression -> relational_expression < additive_expression .)
    EQUAL           reduce using rule 38 (relational_expression -> relational_expression < additive_expression .)
    NE              reduce using rule 38 (relational_expression -> relational_expression < additive_expression .)
    &               reduce using rule 38 (relational_expression -> relational_expression < additive_expression .)
    ^               reduce using rule 38 (relational_expression -> relational_expression < additive_expression .)
    |               reduce using rule 38 (relational_expression -> relational_expression < additive_expression .)
    AND             reduce using rule 38 (relational_expression -> relational_expression < additive_expression .)
    ?               reduce using rule 38 (relational_expression -> relational_expression < additive_expression .)
    OR              reduce using rule 38 (relational_expression -> relational_expression < additive_expression .)
    ;               reduce using rule 38 (relational_expression -> relational_expression < additive_expression .)
    ,               reduce using rule 38 (relational_expression -> relational_expression < additive_expression .)
    ]               reduce using rule 38 (relational_expression -> relational_expression < additive_expression .)
    )               reduce using rule 38 (relational_expression -> relational_expression < additive_expression .)
    }               reduce using rule 38 (relational_expression -> relational_expression < additive_expression .)
    :               reduce using rule 38 (relational_expression -> relational_expression < additive_expression .)
    +               shift and go to state 169
    -               shift and go to state 170


state 226

    (39) relational_expression -> relational_expression > additive_expression .
    (35) additive_expression -> additive_expression . + multiplicative_expression
    (36) additive_expression -> additive_expression . - multiplicative_expression

    <               reduce using rule 39 (relational_expression -> relational_expression > additive_expression .)
    >               reduce using rule 39 (relational_expression -> relational_expression > additive_expression .)
    LE              reduce using rule 39 (relational_expression -> relational_expression > additive_expression .)
    GE              reduce using rule 39 (relational_expression -> relational_expression > additive_expression .)
    EQUAL           reduce using rule 39 (relational_expression -> relational_expression > additive_expression .)
    NE              reduce using rule 39 (relational_expression -> relational_expression > additive_expression .)
    &               reduce using rule 39 (relational_expression -> relational_expression > additive_expression .)
    ^               reduce using rule 39 (relational_expression -> relational_expression > additive_expression .)
    |               reduce using rule 39 (relational_expression -> relational_expression > additive_expression .)
    AND             reduce using rule 39 (relational_expression -> relational_expression > additive_expression .)
    ?               reduce using rule 39 (relational_expression -> relational_expression > additive_expression .)
    OR              reduce using rule 39 (relational_expression -> relational_expression > additive_expression .)
    ;               reduce using rule 39 (relational_expression -> relational_expression > additive_expression .)
    ,               reduce using rule 39 (relational_expression -> relational_expression > additive_expression .)
    ]               reduce using rule 39 (relational_expression -> relational_expression > additive_expression .)
    )               reduce using rule 39 (relational_expression -> relational_expression > additive_expression .)
    }               reduce using rule 39 (relational_expression -> relational_expression > additive_expression .)
    :               reduce using rule 39 (relational_expression -> relational_expression > additive_expression .)
    +               shift and go to state 169
    -               shift and go to state 170


state 227

    (40) relational_expression -> relational_expression LE additive_expression .
    (35) additive_expression -> additive_expression . + multiplicative_expression
    (36) additive_expression -> additive_expression . - multiplicative_expression

    <               reduce using rule 40 (relational_expression -> relational_expression LE additive_expression .)
    >               reduce using rule 40 (relational_expression -> relational_expression LE additive_expression .)
    LE              reduce using rule 40 (relational_expression -> relational_expression LE additive_expression .)
    GE              reduce using rule 40 (relational_expression -> relational_expression LE additive_expression .)
    EQUAL           reduce using rule 40 (relational_expression -> relational_expression LE additive_expression .)
    NE              reduce using rule 40 (relational_expression -> relational_expression LE additive_expression .)
    &               reduce using rule 40 (relational_expression -> relational_expression LE additive_expression .)
    ^               reduce using rule 40 (relational_expression -> relational_expression LE additive_expression .)
    |               reduce using rule 40 (relational_expression -> relational_expression LE additive_expression .)
    AND             reduce using rule 40 (relational_expression -> relational_expression LE additive_expression .)
    ?               reduce using rule 40 (relational_expression -> relational_expression LE additive_expression .)
    OR              reduce using rule 40 (relational_expression -> relational_expression LE additive_expression .)
    ;               reduce using rule 40 (relational_expression -> relational_expression LE additive_expression .)
    ,               reduce using rule 40 (relational_expression -> relational_expression LE additive_expression .)
    ]               reduce using rule 40 (relational_expression -> relational_expression LE additive_expression .)
    )               reduce using rule 40 (relational_expression -> relational_expression LE additive_expression .)
    }               reduce using rule 40 (relational_expression -> relational_expression LE additive_expression .)
    :               reduce using rule 40 (relational_expression -> relational_expression LE additive_expression .)
    +               shift and go to state 169
    -               shift and go to state 170


state 228

    (41) relational_expression -> relational_expression GE additive_expression .
    (35) additive_expression -> additive_expression . + multiplicative_expression
    (36) additive_expression -> additive_expression . - multiplicative_expression

    <               reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    >               reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    LE              reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    GE              reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    EQUAL           reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    NE              reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    &               reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    ^               reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    |               reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    AND             reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    ?               reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    OR              reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    ;               reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    ,               reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    ]               reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    )               reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    }               reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    :               reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    +               shift and go to state 169
    -               shift and go to state 170


state 229

    (35) additive_expression -> additive_expression + multiplicative_expression .
    (31) multiplicative_expression -> multiplicative_expression . * cast_expression
    (32) multiplicative_expression -> multiplicative_expression . / cast_expression
    (33) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 35 (additive_expression -> additive_expression + multiplicative_expression .)
    -               reduce using rule 35 (additive_expression -> additive_expression + multiplicative_expression .)
    <               reduce using rule 35 (additive_expression -> additive_expression + multiplicative_expression .)
    >               reduce using rule 35 (additive_expression -> additive_expression + multiplicative_expression .)
    LE              reduce using rule 35 (additive_expression -> additive_expression + multiplicative_expression .)
    GE              reduce using rule 35 (additive_expression -> additive_expression + multiplicative_expression .)
    EQUAL           reduce using rule 35 (additive_expression -> additive_expression + multiplicative_expression .)
    NE              reduce using rule 35 (additive_expression -> additive_expression + multiplicative_expression .)
    &               reduce using rule 35 (additive_expression -> additive_expression + multiplicative_expression .)
    ^               reduce using rule 35 (additive_expression -> additive_expression + multiplicative_expression .)
    |               reduce using rule 35 (additive_expression -> additive_expression + multiplicative_expression .)
    AND             reduce using rule 35 (additive_expression -> additive_expression + multiplicative_expression .)
    ?               reduce using rule 35 (additive_expression -> additive_expression + multiplicative_expression .)
    OR              reduce using rule 35 (additive_expression -> additive_expression + multiplicative_expression .)
    ;               reduce using rule 35 (additive_expression -> additive_expression + multiplicative_expression .)
    ,               reduce using rule 35 (additive_expression -> additive_expression + multiplicative_expression .)
    ]               reduce using rule 35 (additive_expression -> additive_expression + multiplicative_expression .)
    )               reduce using rule 35 (additive_expression -> additive_expression + multiplicative_expression .)
    }               reduce using rule 35 (additive_expression -> additive_expression + multiplicative_expression .)
    :               reduce using rule 35 (additive_expression -> additive_expression + multiplicative_expression .)
    *               shift and go to state 171
    /               shift and go to state 172
    %               shift and go to state 173


state 230

    (36) additive_expression -> additive_expression - multiplicative_expression .
    (31) multiplicative_expression -> multiplicative_expression . * cast_expression
    (32) multiplicative_expression -> multiplicative_expression . / cast_expression
    (33) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 36 (additive_expression -> additive_expression - multiplicative_expression .)
    -               reduce using rule 36 (additive_expression -> additive_expression - multiplicative_expression .)
    <               reduce using rule 36 (additive_expression -> additive_expression - multiplicative_expression .)
    >               reduce using rule 36 (additive_expression -> additive_expression - multiplicative_expression .)
    LE              reduce using rule 36 (additive_expression -> additive_expression - multiplicative_expression .)
    GE              reduce using rule 36 (additive_expression -> additive_expression - multiplicative_expression .)
    EQUAL           reduce using rule 36 (additive_expression -> additive_expression - multiplicative_expression .)
    NE              reduce using rule 36 (additive_expression -> additive_expression - multiplicative_expression .)
    &               reduce using rule 36 (additive_expression -> additive_expression - multiplicative_expression .)
    ^               reduce using rule 36 (additive_expression -> additive_expression - multiplicative_expression .)
    |               reduce using rule 36 (additive_expression -> additive_expression - multiplicative_expression .)
    AND             reduce using rule 36 (additive_expression -> additive_expression - multiplicative_expression .)
    ?               reduce using rule 36 (additive_expression -> additive_expression - multiplicative_expression .)
    OR              reduce using rule 36 (additive_expression -> additive_expression - multiplicative_expression .)
    ;               reduce using rule 36 (additive_expression -> additive_expression - multiplicative_expression .)
    ,               reduce using rule 36 (additive_expression -> additive_expression - multiplicative_expression .)
    ]               reduce using rule 36 (additive_expression -> additive_expression - multiplicative_expression .)
    )               reduce using rule 36 (additive_expression -> additive_expression - multiplicative_expression .)
    }               reduce using rule 36 (additive_expression -> additive_expression - multiplicative_expression .)
    :               reduce using rule 36 (additive_expression -> additive_expression - multiplicative_expression .)
    *               shift and go to state 171
    /               shift and go to state 172
    %               shift and go to state 173


state 231

    (31) multiplicative_expression -> multiplicative_expression * cast_expression .

    *               reduce using rule 31 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    /               reduce using rule 31 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    %               reduce using rule 31 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    +               reduce using rule 31 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    -               reduce using rule 31 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    <               reduce using rule 31 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    >               reduce using rule 31 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    LE              reduce using rule 31 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    GE              reduce using rule 31 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    EQUAL           reduce using rule 31 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    NE              reduce using rule 31 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    &               reduce using rule 31 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ^               reduce using rule 31 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    |               reduce using rule 31 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    AND             reduce using rule 31 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ?               reduce using rule 31 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    OR              reduce using rule 31 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ;               reduce using rule 31 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ,               reduce using rule 31 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ]               reduce using rule 31 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    )               reduce using rule 31 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    }               reduce using rule 31 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    :               reduce using rule 31 (multiplicative_expression -> multiplicative_expression * cast_expression .)


state 232

    (32) multiplicative_expression -> multiplicative_expression / cast_expression .

    *               reduce using rule 32 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    /               reduce using rule 32 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    %               reduce using rule 32 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    +               reduce using rule 32 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    -               reduce using rule 32 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    <               reduce using rule 32 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    >               reduce using rule 32 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    LE              reduce using rule 32 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    GE              reduce using rule 32 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    EQUAL           reduce using rule 32 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    NE              reduce using rule 32 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    &               reduce using rule 32 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ^               reduce using rule 32 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    |               reduce using rule 32 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    AND             reduce using rule 32 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ?               reduce using rule 32 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    OR              reduce using rule 32 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ;               reduce using rule 32 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ,               reduce using rule 32 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ]               reduce using rule 32 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    )               reduce using rule 32 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    }               reduce using rule 32 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    :               reduce using rule 32 (multiplicative_expression -> multiplicative_expression / cast_expression .)


state 233

    (33) multiplicative_expression -> multiplicative_expression % cast_expression .

    *               reduce using rule 33 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    /               reduce using rule 33 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    %               reduce using rule 33 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    +               reduce using rule 33 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    -               reduce using rule 33 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    <               reduce using rule 33 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    >               reduce using rule 33 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    LE              reduce using rule 33 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    GE              reduce using rule 33 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    EQUAL           reduce using rule 33 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    NE              reduce using rule 33 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    &               reduce using rule 33 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ^               reduce using rule 33 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    |               reduce using rule 33 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    AND             reduce using rule 33 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ?               reduce using rule 33 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    OR              reduce using rule 33 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ;               reduce using rule 33 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ,               reduce using rule 33 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ]               reduce using rule 33 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    )               reduce using rule 33 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    }               reduce using rule 33 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    :               reduce using rule 33 (multiplicative_expression -> multiplicative_expression % cast_expression .)


state 234

    (114) parameter_list -> parameter_list , parameter_declaration .

    )               reduce using rule 114 (parameter_list -> parameter_list , parameter_declaration .)
    ,               reduce using rule 114 (parameter_list -> parameter_list , parameter_declaration .)


state 235

    (119) identifier_list -> identifier_list , ID .

    )               reduce using rule 119 (identifier_list -> identifier_list , ID .)
    ,               reduce using rule 119 (identifier_list -> identifier_list , ID .)


state 236

    (124) abstract_declarator -> pointer direct_abstract_declarator .
    (128) direct_abstract_declarator -> direct_abstract_declarator . [ ]
    (129) direct_abstract_declarator -> direct_abstract_declarator . [ constant_expression ]
    (132) direct_abstract_declarator -> direct_abstract_declarator . ( )
    (133) direct_abstract_declarator -> direct_abstract_declarator . ( parameter_list )

    )               reduce using rule 124 (abstract_declarator -> pointer direct_abstract_declarator .)
    ,               reduce using rule 124 (abstract_declarator -> pointer direct_abstract_declarator .)
    [               shift and go to state 237
    (               shift and go to state 238


state 237

    (128) direct_abstract_declarator -> direct_abstract_declarator [ . ]
    (129) direct_abstract_declarator -> direct_abstract_declarator [ . constant_expression ]
    (70) constant_expression -> . conditional_expression
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )

    ]               shift and go to state 264
    (               shift and go to state 102
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90

    constant_expression            shift and go to state 265
    conditional_expression         shift and go to state 100
    logical_or_expression          shift and go to state 71
    logical_and_expression         shift and go to state 77
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96
    cast_expression                shift and go to state 76
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    primary_expression             shift and go to state 78

state 238

    (132) direct_abstract_declarator -> direct_abstract_declarator ( . )
    (133) direct_abstract_declarator -> direct_abstract_declarator ( . parameter_list )
    (113) parameter_list -> . parameter_declaration
    (114) parameter_list -> . parameter_list , parameter_declaration
    (115) parameter_declaration -> . declaration_specifiers declarator
    (116) parameter_declaration -> . declaration_specifiers abstract_declarator
    (117) parameter_declaration -> . declaration_specifiers
    (73) declaration_specifiers -> .
    (74) declaration_specifiers -> . type_specifier
    (75) declaration_specifiers -> . type_specifier declaration_specifiers
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . INT
    (83) type_specifier -> . BOOL
    (84) type_specifier -> . struct_specifier
    (85) type_specifier -> . class_definition
    (91) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (86) class_definition -> . CLASS ID { class_member_list }

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 266
    *               reduce using rule 73 (declaration_specifiers -> .)
    ID              reduce using rule 73 (declaration_specifiers -> .)
    (               reduce using rule 73 (declaration_specifiers -> .)
    [               reduce using rule 73 (declaration_specifiers -> .)
    ,               reduce using rule 73 (declaration_specifiers -> .)
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20

  ! )               [ reduce using rule 73 (declaration_specifiers -> .) ]

    parameter_list                 shift and go to state 267
    parameter_declaration          shift and go to state 106
    declaration_specifiers         shift and go to state 108
    type_specifier                 shift and go to state 7
    struct_specifier               shift and go to state 14
    class_definition               shift and go to state 15

state 239

    (130) direct_abstract_declarator -> ( ) .

    [               reduce using rule 130 (direct_abstract_declarator -> ( ) .)
    (               reduce using rule 130 (direct_abstract_declarator -> ( ) .)
    )               reduce using rule 130 (direct_abstract_declarator -> ( ) .)
    ,               reduce using rule 130 (direct_abstract_declarator -> ( ) .)


state 240

    (125) direct_abstract_declarator -> ( abstract_declarator . )

    )               shift and go to state 268


state 241

    (131) direct_abstract_declarator -> ( parameter_list . )
    (114) parameter_list -> parameter_list . , parameter_declaration

    )               shift and go to state 269
    ,               shift and go to state 176


state 242

    (126) direct_abstract_declarator -> [ ] .

    [               reduce using rule 126 (direct_abstract_declarator -> [ ] .)
    (               reduce using rule 126 (direct_abstract_declarator -> [ ] .)
    )               reduce using rule 126 (direct_abstract_declarator -> [ ] .)
    ,               reduce using rule 126 (direct_abstract_declarator -> [ ] .)


state 243

    (127) direct_abstract_declarator -> [ constant_expression . ]

    ]               shift and go to state 270


state 244

    (91) struct_specifier -> STRUCT ID { struct_declaration_list } .

    VOID            reduce using rule 91 (struct_specifier -> STRUCT ID { struct_declaration_list } .)
    CHAR            reduce using rule 91 (struct_specifier -> STRUCT ID { struct_declaration_list } .)
    INT             reduce using rule 91 (struct_specifier -> STRUCT ID { struct_declaration_list } .)
    BOOL            reduce using rule 91 (struct_specifier -> STRUCT ID { struct_declaration_list } .)
    STRUCT          reduce using rule 91 (struct_specifier -> STRUCT ID { struct_declaration_list } .)
    CLASS           reduce using rule 91 (struct_specifier -> STRUCT ID { struct_declaration_list } .)
    ;               reduce using rule 91 (struct_specifier -> STRUCT ID { struct_declaration_list } .)
    *               reduce using rule 91 (struct_specifier -> STRUCT ID { struct_declaration_list } .)
    ID              reduce using rule 91 (struct_specifier -> STRUCT ID { struct_declaration_list } .)
    (               reduce using rule 91 (struct_specifier -> STRUCT ID { struct_declaration_list } .)
    [               reduce using rule 91 (struct_specifier -> STRUCT ID { struct_declaration_list } .)
    )               reduce using rule 91 (struct_specifier -> STRUCT ID { struct_declaration_list } .)
    ,               reduce using rule 91 (struct_specifier -> STRUCT ID { struct_declaration_list } .)
    :               reduce using rule 91 (struct_specifier -> STRUCT ID { struct_declaration_list } .)


state 245

    (93) struct_declaration_list -> struct_declaration_list struct_declaration .

    }               reduce using rule 93 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 93 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 93 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 93 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    BOOL            reduce using rule 93 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 93 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CLASS           reduce using rule 93 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 246

    (94) struct_declaration -> specifier_qualifier_list struct_declarator_list . ;
    (98) struct_declarator_list -> struct_declarator_list . , struct_declarator

    ;               shift and go to state 271
    ,               shift and go to state 272


state 247

    (97) struct_declarator_list -> struct_declarator .

    ;               reduce using rule 97 (struct_declarator_list -> struct_declarator .)
    ,               reduce using rule 97 (struct_declarator_list -> struct_declarator .)


state 248

    (99) struct_declarator -> declarator .
    (101) struct_declarator -> declarator . : constant_expression

    ;               reduce using rule 99 (struct_declarator -> declarator .)
    ,               reduce using rule 99 (struct_declarator -> declarator .)
    :               shift and go to state 273


state 249

    (100) struct_declarator -> : . constant_expression
    (70) constant_expression -> . conditional_expression
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )

    (               shift and go to state 102
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90

    constant_expression            shift and go to state 274
    conditional_expression         shift and go to state 100
    logical_or_expression          shift and go to state 71
    logical_and_expression         shift and go to state 77
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96
    cast_expression                shift and go to state 76
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    primary_expression             shift and go to state 78

state 250

    (86) class_definition -> CLASS ID { class_member_list } .

    VOID            reduce using rule 86 (class_definition -> CLASS ID { class_member_list } .)
    CHAR            reduce using rule 86 (class_definition -> CLASS ID { class_member_list } .)
    INT             reduce using rule 86 (class_definition -> CLASS ID { class_member_list } .)
    BOOL            reduce using rule 86 (class_definition -> CLASS ID { class_member_list } .)
    STRUCT          reduce using rule 86 (class_definition -> CLASS ID { class_member_list } .)
    CLASS           reduce using rule 86 (class_definition -> CLASS ID { class_member_list } .)
    ;               reduce using rule 86 (class_definition -> CLASS ID { class_member_list } .)
    *               reduce using rule 86 (class_definition -> CLASS ID { class_member_list } .)
    ID              reduce using rule 86 (class_definition -> CLASS ID { class_member_list } .)
    (               reduce using rule 86 (class_definition -> CLASS ID { class_member_list } .)
    [               reduce using rule 86 (class_definition -> CLASS ID { class_member_list } .)
    )               reduce using rule 86 (class_definition -> CLASS ID { class_member_list } .)
    ,               reduce using rule 86 (class_definition -> CLASS ID { class_member_list } .)
    :               reduce using rule 86 (class_definition -> CLASS ID { class_member_list } .)


state 251

    (88) class_member_list -> class_member_list class_member .

    }               reduce using rule 88 (class_member_list -> class_member_list class_member .)
    VOID            reduce using rule 88 (class_member_list -> class_member_list class_member .)
    CHAR            reduce using rule 88 (class_member_list -> class_member_list class_member .)
    INT             reduce using rule 88 (class_member_list -> class_member_list class_member .)
    BOOL            reduce using rule 88 (class_member_list -> class_member_list class_member .)
    *               reduce using rule 88 (class_member_list -> class_member_list class_member .)
    ID              reduce using rule 88 (class_member_list -> class_member_list class_member .)
    (               reduce using rule 88 (class_member_list -> class_member_list class_member .)
    STRUCT          reduce using rule 88 (class_member_list -> class_member_list class_member .)
    CLASS           reduce using rule 88 (class_member_list -> class_member_list class_member .)
    ;               reduce using rule 88 (class_member_list -> class_member_list class_member .)


state 252

    (135) initializer -> { initializer_list } .

    ;               reduce using rule 135 (initializer -> { initializer_list } .)
    ,               reduce using rule 135 (initializer -> { initializer_list } .)
    }               reduce using rule 135 (initializer -> { initializer_list } .)


state 253

    (136) initializer -> { initializer_list , . }
    (138) initializer_list -> initializer_list , . initializer
    (134) initializer -> . assignment_expression
    (135) initializer -> . { initializer_list }
    (136) initializer -> . { initializer_list , }
    (57) assignment_expression -> . conditional_expression
    (58) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression

    }               shift and go to state 275
    {               shift and go to state 115
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90
    (               shift and go to state 62

    initializer                    shift and go to state 276
    assignment_expression          shift and go to state 114
    conditional_expression         shift and go to state 69
    unary_expression               shift and go to state 70
    logical_or_expression          shift and go to state 71
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    cast_expression                shift and go to state 76
    logical_and_expression         shift and go to state 77
    primary_expression             shift and go to state 78
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96

state 254

    (171) input_statement -> CIN IN ID ; .

    }               reduce using rule 171 (input_statement -> CIN IN ID ; .)
    CIN             reduce using rule 171 (input_statement -> CIN IN ID ; .)
    COUT            reduce using rule 171 (input_statement -> CIN IN ID ; .)
    {               reduce using rule 171 (input_statement -> CIN IN ID ; .)
    ;               reduce using rule 171 (input_statement -> CIN IN ID ; .)
    IF              reduce using rule 171 (input_statement -> CIN IN ID ; .)
    WHILE           reduce using rule 171 (input_statement -> CIN IN ID ; .)
    FOR             reduce using rule 171 (input_statement -> CIN IN ID ; .)
    CONTINUE        reduce using rule 171 (input_statement -> CIN IN ID ; .)
    BREAK           reduce using rule 171 (input_statement -> CIN IN ID ; .)
    RETURN          reduce using rule 171 (input_statement -> CIN IN ID ; .)
    INC             reduce using rule 171 (input_statement -> CIN IN ID ; .)
    DEC             reduce using rule 171 (input_statement -> CIN IN ID ; .)
    &               reduce using rule 171 (input_statement -> CIN IN ID ; .)
    *               reduce using rule 171 (input_statement -> CIN IN ID ; .)
    +               reduce using rule 171 (input_statement -> CIN IN ID ; .)
    -               reduce using rule 171 (input_statement -> CIN IN ID ; .)
    ~               reduce using rule 171 (input_statement -> CIN IN ID ; .)
    !               reduce using rule 171 (input_statement -> CIN IN ID ; .)
    ID              reduce using rule 171 (input_statement -> CIN IN ID ; .)
    INTEGER         reduce using rule 171 (input_statement -> CIN IN ID ; .)
    STRING          reduce using rule 171 (input_statement -> CIN IN ID ; .)
    TRUE            reduce using rule 171 (input_statement -> CIN IN ID ; .)
    FALSE           reduce using rule 171 (input_statement -> CIN IN ID ; .)
    CHARACTER       reduce using rule 171 (input_statement -> CIN IN ID ; .)
    (               reduce using rule 171 (input_statement -> CIN IN ID ; .)
    ELSE            reduce using rule 171 (input_statement -> CIN IN ID ; .)


state 255

    (174) output_list -> output_list OUT primary_expression .

    ;               reduce using rule 174 (output_list -> output_list OUT primary_expression .)
    OUT             reduce using rule 174 (output_list -> output_list OUT primary_expression .)


state 256

    (155) selection_statement -> IF ( expression ) . statement
    (156) selection_statement -> IF ( expression ) . statement ELSE statement
    (139) statement -> . input_statement
    (140) statement -> . output_statement
    (141) statement -> . compound_statement
    (142) statement -> . expression_statement
    (143) statement -> . selection_statement
    (144) statement -> . iteration_statement
    (145) statement -> . jump_statement
    (171) input_statement -> . CIN IN ID ;
    (172) output_statement -> . COUT output_list ;
    (146) compound_statement -> . { statement_list }
    (147) compound_statement -> . { declaration_list }
    (148) compound_statement -> . { declaration_list statement_list }
    (153) expression_statement -> . ;
    (154) expression_statement -> . expression ;
    (155) selection_statement -> . IF ( expression ) statement
    (156) selection_statement -> . IF ( expression ) statement ELSE statement
    (157) iteration_statement -> . WHILE ( expression ) statement
    (158) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (159) jump_statement -> . CONTINUE ;
    (160) jump_statement -> . BREAK ;
    (161) jump_statement -> . RETURN ;
    (162) jump_statement -> . RETURN expression ;
    (68) expression -> . assignment_expression
    (69) expression -> . expression , assignment_expression
    (57) assignment_expression -> . conditional_expression
    (58) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression

    CIN             shift and go to state 57
    COUT            shift and go to state 59
    {               shift and go to state 29
    ;               shift and go to state 56
    IF              shift and go to state 61
    WHILE           shift and go to state 63
    FOR             shift and go to state 64
    CONTINUE        shift and go to state 65
    BREAK           shift and go to state 66
    RETURN          shift and go to state 67
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90
    (               shift and go to state 62

    expression                     shift and go to state 60
    statement                      shift and go to state 277
    input_statement                shift and go to state 49
    output_statement               shift and go to state 50
    compound_statement             shift and go to state 51
    expression_statement           shift and go to state 52
    selection_statement            shift and go to state 53
    iteration_statement            shift and go to state 54
    jump_statement                 shift and go to state 55
    assignment_expression          shift and go to state 68
    conditional_expression         shift and go to state 69
    unary_expression               shift and go to state 70
    logical_or_expression          shift and go to state 71
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    cast_expression                shift and go to state 76
    logical_and_expression         shift and go to state 77
    primary_expression             shift and go to state 78
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96

state 257

    (29) cast_expression -> ( type_name ) cast_expression .

    *               reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)
    /               reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)
    %               reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)
    +               reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)
    -               reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)
    <               reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)
    >               reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)
    LE              reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)
    GE              reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)
    EQUAL           reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)
    NE              reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)
    &               reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)
    ^               reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)
    |               reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)
    AND             reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)
    ?               reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)
    OR              reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)
    ;               reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)
    ,               reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)
    ]               reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)
    )               reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)
    =               reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)
    MUL_EQ          reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)
    DIV_EQ          reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)
    MOD_EQ          reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)
    ADD_EQ          reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)
    SUB_EQ          reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)
    AND_EQ          reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)
    XOR_EQ          reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)
    OR_EQ           reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)
    }               reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)
    :               reduce using rule 29 (cast_expression -> ( type_name ) cast_expression .)


state 258

    (157) iteration_statement -> WHILE ( expression ) . statement
    (139) statement -> . input_statement
    (140) statement -> . output_statement
    (141) statement -> . compound_statement
    (142) statement -> . expression_statement
    (143) statement -> . selection_statement
    (144) statement -> . iteration_statement
    (145) statement -> . jump_statement
    (171) input_statement -> . CIN IN ID ;
    (172) output_statement -> . COUT output_list ;
    (146) compound_statement -> . { statement_list }
    (147) compound_statement -> . { declaration_list }
    (148) compound_statement -> . { declaration_list statement_list }
    (153) expression_statement -> . ;
    (154) expression_statement -> . expression ;
    (155) selection_statement -> . IF ( expression ) statement
    (156) selection_statement -> . IF ( expression ) statement ELSE statement
    (157) iteration_statement -> . WHILE ( expression ) statement
    (158) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (159) jump_statement -> . CONTINUE ;
    (160) jump_statement -> . BREAK ;
    (161) jump_statement -> . RETURN ;
    (162) jump_statement -> . RETURN expression ;
    (68) expression -> . assignment_expression
    (69) expression -> . expression , assignment_expression
    (57) assignment_expression -> . conditional_expression
    (58) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression

    CIN             shift and go to state 57
    COUT            shift and go to state 59
    {               shift and go to state 29
    ;               shift and go to state 56
    IF              shift and go to state 61
    WHILE           shift and go to state 63
    FOR             shift and go to state 64
    CONTINUE        shift and go to state 65
    BREAK           shift and go to state 66
    RETURN          shift and go to state 67
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90
    (               shift and go to state 62

    expression                     shift and go to state 60
    statement                      shift and go to state 278
    input_statement                shift and go to state 49
    output_statement               shift and go to state 50
    compound_statement             shift and go to state 51
    expression_statement           shift and go to state 52
    selection_statement            shift and go to state 53
    iteration_statement            shift and go to state 54
    jump_statement                 shift and go to state 55
    assignment_expression          shift and go to state 68
    conditional_expression         shift and go to state 69
    unary_expression               shift and go to state 70
    logical_or_expression          shift and go to state 71
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    cast_expression                shift and go to state 76
    logical_and_expression         shift and go to state 77
    primary_expression             shift and go to state 78
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96

state 259

    (158) iteration_statement -> FOR ( expression_statement expression_statement . expression ) statement
    (68) expression -> . assignment_expression
    (69) expression -> . expression , assignment_expression
    (57) assignment_expression -> . conditional_expression
    (58) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression

    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90
    (               shift and go to state 62

    expression                     shift and go to state 279
    assignment_expression          shift and go to state 68
    conditional_expression         shift and go to state 69
    unary_expression               shift and go to state 70
    logical_or_expression          shift and go to state 71
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    cast_expression                shift and go to state 76
    logical_and_expression         shift and go to state 77
    primary_expression             shift and go to state 78
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96

state 260

    (56) conditional_expression -> logical_or_expression ? expression : . conditional_expression
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )

    (               shift and go to state 102
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90

    logical_or_expression          shift and go to state 71
    conditional_expression         shift and go to state 280
    logical_and_expression         shift and go to state 77
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96
    cast_expression                shift and go to state 76
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    primary_expression             shift and go to state 78

state 261

    (9) postfix_expression -> postfix_expression [ expression ] .

    [               reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    (               reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    .               reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    PTR             reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    INC             reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    DEC             reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    =               reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    MUL_EQ          reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    DIV_EQ          reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    MOD_EQ          reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    ADD_EQ          reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    SUB_EQ          reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    AND_EQ          reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    XOR_EQ          reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    OR_EQ           reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    *               reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    /               reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    %               reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    +               reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    -               reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    <               reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    >               reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    LE              reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    GE              reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    EQUAL           reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    NE              reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    &               reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    ^               reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    |               reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    AND             reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    ?               reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    OR              reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    ;               reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    ,               reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    ]               reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    )               reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    }               reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)
    :               reduce using rule 9 (postfix_expression -> postfix_expression [ expression ] .)


state 262

    (11) postfix_expression -> postfix_expression ( argument_expression_list ) .

    [               reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    (               reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    .               reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    PTR             reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    INC             reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    DEC             reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    =               reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    MUL_EQ          reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    DIV_EQ          reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    MOD_EQ          reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ADD_EQ          reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    SUB_EQ          reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    AND_EQ          reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    XOR_EQ          reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    OR_EQ           reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    *               reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    /               reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    %               reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    +               reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    -               reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    <               reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    >               reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    LE              reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    GE              reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    EQUAL           reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    NE              reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    &               reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ^               reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    |               reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    AND             reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ?               reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    OR              reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ;               reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ,               reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ]               reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    )               reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    }               reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    :               reduce using rule 11 (postfix_expression -> postfix_expression ( argument_expression_list ) .)


state 263

    (17) argument_expression_list -> argument_expression_list , . assignment_expression
    (57) assignment_expression -> . conditional_expression
    (58) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression

    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90
    (               shift and go to state 62

    assignment_expression          shift and go to state 281
    conditional_expression         shift and go to state 69
    unary_expression               shift and go to state 70
    logical_or_expression          shift and go to state 71
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    cast_expression                shift and go to state 76
    logical_and_expression         shift and go to state 77
    primary_expression             shift and go to state 78
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96

state 264

    (128) direct_abstract_declarator -> direct_abstract_declarator [ ] .

    [               reduce using rule 128 (direct_abstract_declarator -> direct_abstract_declarator [ ] .)
    (               reduce using rule 128 (direct_abstract_declarator -> direct_abstract_declarator [ ] .)
    )               reduce using rule 128 (direct_abstract_declarator -> direct_abstract_declarator [ ] .)
    ,               reduce using rule 128 (direct_abstract_declarator -> direct_abstract_declarator [ ] .)


state 265

    (129) direct_abstract_declarator -> direct_abstract_declarator [ constant_expression . ]

    ]               shift and go to state 282


state 266

    (132) direct_abstract_declarator -> direct_abstract_declarator ( ) .

    [               reduce using rule 132 (direct_abstract_declarator -> direct_abstract_declarator ( ) .)
    (               reduce using rule 132 (direct_abstract_declarator -> direct_abstract_declarator ( ) .)
    )               reduce using rule 132 (direct_abstract_declarator -> direct_abstract_declarator ( ) .)
    ,               reduce using rule 132 (direct_abstract_declarator -> direct_abstract_declarator ( ) .)


state 267

    (133) direct_abstract_declarator -> direct_abstract_declarator ( parameter_list . )
    (114) parameter_list -> parameter_list . , parameter_declaration

    )               shift and go to state 283
    ,               shift and go to state 176


state 268

    (125) direct_abstract_declarator -> ( abstract_declarator ) .

    [               reduce using rule 125 (direct_abstract_declarator -> ( abstract_declarator ) .)
    (               reduce using rule 125 (direct_abstract_declarator -> ( abstract_declarator ) .)
    )               reduce using rule 125 (direct_abstract_declarator -> ( abstract_declarator ) .)
    ,               reduce using rule 125 (direct_abstract_declarator -> ( abstract_declarator ) .)


state 269

    (131) direct_abstract_declarator -> ( parameter_list ) .

    [               reduce using rule 131 (direct_abstract_declarator -> ( parameter_list ) .)
    (               reduce using rule 131 (direct_abstract_declarator -> ( parameter_list ) .)
    )               reduce using rule 131 (direct_abstract_declarator -> ( parameter_list ) .)
    ,               reduce using rule 131 (direct_abstract_declarator -> ( parameter_list ) .)


state 270

    (127) direct_abstract_declarator -> [ constant_expression ] .

    [               reduce using rule 127 (direct_abstract_declarator -> [ constant_expression ] .)
    (               reduce using rule 127 (direct_abstract_declarator -> [ constant_expression ] .)
    )               reduce using rule 127 (direct_abstract_declarator -> [ constant_expression ] .)
    ,               reduce using rule 127 (direct_abstract_declarator -> [ constant_expression ] .)


state 271

    (94) struct_declaration -> specifier_qualifier_list struct_declarator_list ; .

    }               reduce using rule 94 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    VOID            reduce using rule 94 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    CHAR            reduce using rule 94 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    INT             reduce using rule 94 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    BOOL            reduce using rule 94 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    STRUCT          reduce using rule 94 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    CLASS           reduce using rule 94 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)


state 272

    (98) struct_declarator_list -> struct_declarator_list , . struct_declarator
    (99) struct_declarator -> . declarator
    (100) struct_declarator -> . : constant_expression
    (101) struct_declarator -> . declarator : constant_expression
    (102) declarator -> . pointer direct_declarator
    (103) declarator -> . direct_declarator
    (111) pointer -> . *
    (112) pointer -> . * pointer
    (104) direct_declarator -> . ID
    (105) direct_declarator -> . ( declarator )
    (106) direct_declarator -> . direct_declarator [ constant_expression ]
    (107) direct_declarator -> . direct_declarator [ ]
    (108) direct_declarator -> . direct_declarator ( parameter_list )
    (109) direct_declarator -> . direct_declarator ( identifier_list )
    (110) direct_declarator -> . direct_declarator ( )

    :               shift and go to state 249
    *               shift and go to state 16
    ID              shift and go to state 17
    (               shift and go to state 18

    struct_declarator              shift and go to state 284
    declarator                     shift and go to state 248
    pointer                        shift and go to state 8
    direct_declarator              shift and go to state 9

state 273

    (101) struct_declarator -> declarator : . constant_expression
    (70) constant_expression -> . conditional_expression
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )

    (               shift and go to state 102
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90

    constant_expression            shift and go to state 285
    conditional_expression         shift and go to state 100
    logical_or_expression          shift and go to state 71
    logical_and_expression         shift and go to state 77
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96
    cast_expression                shift and go to state 76
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    primary_expression             shift and go to state 78

state 274

    (100) struct_declarator -> : constant_expression .

    ;               reduce using rule 100 (struct_declarator -> : constant_expression .)
    ,               reduce using rule 100 (struct_declarator -> : constant_expression .)


state 275

    (136) initializer -> { initializer_list , } .

    ;               reduce using rule 136 (initializer -> { initializer_list , } .)
    ,               reduce using rule 136 (initializer -> { initializer_list , } .)
    }               reduce using rule 136 (initializer -> { initializer_list , } .)


state 276

    (138) initializer_list -> initializer_list , initializer .

    }               reduce using rule 138 (initializer_list -> initializer_list , initializer .)
    ,               reduce using rule 138 (initializer_list -> initializer_list , initializer .)


state 277

    (155) selection_statement -> IF ( expression ) statement .
    (156) selection_statement -> IF ( expression ) statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    }               reduce using rule 155 (selection_statement -> IF ( expression ) statement .)
    CIN             reduce using rule 155 (selection_statement -> IF ( expression ) statement .)
    COUT            reduce using rule 155 (selection_statement -> IF ( expression ) statement .)
    {               reduce using rule 155 (selection_statement -> IF ( expression ) statement .)
    ;               reduce using rule 155 (selection_statement -> IF ( expression ) statement .)
    IF              reduce using rule 155 (selection_statement -> IF ( expression ) statement .)
    WHILE           reduce using rule 155 (selection_statement -> IF ( expression ) statement .)
    FOR             reduce using rule 155 (selection_statement -> IF ( expression ) statement .)
    CONTINUE        reduce using rule 155 (selection_statement -> IF ( expression ) statement .)
    BREAK           reduce using rule 155 (selection_statement -> IF ( expression ) statement .)
    RETURN          reduce using rule 155 (selection_statement -> IF ( expression ) statement .)
    INC             reduce using rule 155 (selection_statement -> IF ( expression ) statement .)
    DEC             reduce using rule 155 (selection_statement -> IF ( expression ) statement .)
    &               reduce using rule 155 (selection_statement -> IF ( expression ) statement .)
    *               reduce using rule 155 (selection_statement -> IF ( expression ) statement .)
    +               reduce using rule 155 (selection_statement -> IF ( expression ) statement .)
    -               reduce using rule 155 (selection_statement -> IF ( expression ) statement .)
    ~               reduce using rule 155 (selection_statement -> IF ( expression ) statement .)
    !               reduce using rule 155 (selection_statement -> IF ( expression ) statement .)
    ID              reduce using rule 155 (selection_statement -> IF ( expression ) statement .)
    INTEGER         reduce using rule 155 (selection_statement -> IF ( expression ) statement .)
    STRING          reduce using rule 155 (selection_statement -> IF ( expression ) statement .)
    TRUE            reduce using rule 155 (selection_statement -> IF ( expression ) statement .)
    FALSE           reduce using rule 155 (selection_statement -> IF ( expression ) statement .)
    CHARACTER       reduce using rule 155 (selection_statement -> IF ( expression ) statement .)
    (               reduce using rule 155 (selection_statement -> IF ( expression ) statement .)
    ELSE            shift and go to state 286

  ! ELSE            [ reduce using rule 155 (selection_statement -> IF ( expression ) statement .) ]


state 278

    (157) iteration_statement -> WHILE ( expression ) statement .

    }               reduce using rule 157 (iteration_statement -> WHILE ( expression ) statement .)
    CIN             reduce using rule 157 (iteration_statement -> WHILE ( expression ) statement .)
    COUT            reduce using rule 157 (iteration_statement -> WHILE ( expression ) statement .)
    {               reduce using rule 157 (iteration_statement -> WHILE ( expression ) statement .)
    ;               reduce using rule 157 (iteration_statement -> WHILE ( expression ) statement .)
    IF              reduce using rule 157 (iteration_statement -> WHILE ( expression ) statement .)
    WHILE           reduce using rule 157 (iteration_statement -> WHILE ( expression ) statement .)
    FOR             reduce using rule 157 (iteration_statement -> WHILE ( expression ) statement .)
    CONTINUE        reduce using rule 157 (iteration_statement -> WHILE ( expression ) statement .)
    BREAK           reduce using rule 157 (iteration_statement -> WHILE ( expression ) statement .)
    RETURN          reduce using rule 157 (iteration_statement -> WHILE ( expression ) statement .)
    INC             reduce using rule 157 (iteration_statement -> WHILE ( expression ) statement .)
    DEC             reduce using rule 157 (iteration_statement -> WHILE ( expression ) statement .)
    &               reduce using rule 157 (iteration_statement -> WHILE ( expression ) statement .)
    *               reduce using rule 157 (iteration_statement -> WHILE ( expression ) statement .)
    +               reduce using rule 157 (iteration_statement -> WHILE ( expression ) statement .)
    -               reduce using rule 157 (iteration_statement -> WHILE ( expression ) statement .)
    ~               reduce using rule 157 (iteration_statement -> WHILE ( expression ) statement .)
    !               reduce using rule 157 (iteration_statement -> WHILE ( expression ) statement .)
    ID              reduce using rule 157 (iteration_statement -> WHILE ( expression ) statement .)
    INTEGER         reduce using rule 157 (iteration_statement -> WHILE ( expression ) statement .)
    STRING          reduce using rule 157 (iteration_statement -> WHILE ( expression ) statement .)
    TRUE            reduce using rule 157 (iteration_statement -> WHILE ( expression ) statement .)
    FALSE           reduce using rule 157 (iteration_statement -> WHILE ( expression ) statement .)
    CHARACTER       reduce using rule 157 (iteration_statement -> WHILE ( expression ) statement .)
    (               reduce using rule 157 (iteration_statement -> WHILE ( expression ) statement .)
    ELSE            reduce using rule 157 (iteration_statement -> WHILE ( expression ) statement .)


state 279

    (158) iteration_statement -> FOR ( expression_statement expression_statement expression . ) statement
    (69) expression -> expression . , assignment_expression

    )               shift and go to state 287
    ,               shift and go to state 125


state 280

    (56) conditional_expression -> logical_or_expression ? expression : conditional_expression .

    ;               reduce using rule 56 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    ,               reduce using rule 56 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    ]               reduce using rule 56 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    )               reduce using rule 56 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    }               reduce using rule 56 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    :               reduce using rule 56 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)


state 281

    (17) argument_expression_list -> argument_expression_list , assignment_expression .

    )               reduce using rule 17 (argument_expression_list -> argument_expression_list , assignment_expression .)
    ,               reduce using rule 17 (argument_expression_list -> argument_expression_list , assignment_expression .)


state 282

    (129) direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] .

    [               reduce using rule 129 (direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] .)
    (               reduce using rule 129 (direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] .)
    )               reduce using rule 129 (direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] .)
    ,               reduce using rule 129 (direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] .)


state 283

    (133) direct_abstract_declarator -> direct_abstract_declarator ( parameter_list ) .

    [               reduce using rule 133 (direct_abstract_declarator -> direct_abstract_declarator ( parameter_list ) .)
    (               reduce using rule 133 (direct_abstract_declarator -> direct_abstract_declarator ( parameter_list ) .)
    )               reduce using rule 133 (direct_abstract_declarator -> direct_abstract_declarator ( parameter_list ) .)
    ,               reduce using rule 133 (direct_abstract_declarator -> direct_abstract_declarator ( parameter_list ) .)


state 284

    (98) struct_declarator_list -> struct_declarator_list , struct_declarator .

    ;               reduce using rule 98 (struct_declarator_list -> struct_declarator_list , struct_declarator .)
    ,               reduce using rule 98 (struct_declarator_list -> struct_declarator_list , struct_declarator .)


state 285

    (101) struct_declarator -> declarator : constant_expression .

    ;               reduce using rule 101 (struct_declarator -> declarator : constant_expression .)
    ,               reduce using rule 101 (struct_declarator -> declarator : constant_expression .)


state 286

    (156) selection_statement -> IF ( expression ) statement ELSE . statement
    (139) statement -> . input_statement
    (140) statement -> . output_statement
    (141) statement -> . compound_statement
    (142) statement -> . expression_statement
    (143) statement -> . selection_statement
    (144) statement -> . iteration_statement
    (145) statement -> . jump_statement
    (171) input_statement -> . CIN IN ID ;
    (172) output_statement -> . COUT output_list ;
    (146) compound_statement -> . { statement_list }
    (147) compound_statement -> . { declaration_list }
    (148) compound_statement -> . { declaration_list statement_list }
    (153) expression_statement -> . ;
    (154) expression_statement -> . expression ;
    (155) selection_statement -> . IF ( expression ) statement
    (156) selection_statement -> . IF ( expression ) statement ELSE statement
    (157) iteration_statement -> . WHILE ( expression ) statement
    (158) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (159) jump_statement -> . CONTINUE ;
    (160) jump_statement -> . BREAK ;
    (161) jump_statement -> . RETURN ;
    (162) jump_statement -> . RETURN expression ;
    (68) expression -> . assignment_expression
    (69) expression -> . expression , assignment_expression
    (57) assignment_expression -> . conditional_expression
    (58) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression

    CIN             shift and go to state 57
    COUT            shift and go to state 59
    {               shift and go to state 29
    ;               shift and go to state 56
    IF              shift and go to state 61
    WHILE           shift and go to state 63
    FOR             shift and go to state 64
    CONTINUE        shift and go to state 65
    BREAK           shift and go to state 66
    RETURN          shift and go to state 67
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90
    (               shift and go to state 62

    expression                     shift and go to state 60
    statement                      shift and go to state 288
    input_statement                shift and go to state 49
    output_statement               shift and go to state 50
    compound_statement             shift and go to state 51
    expression_statement           shift and go to state 52
    selection_statement            shift and go to state 53
    iteration_statement            shift and go to state 54
    jump_statement                 shift and go to state 55
    assignment_expression          shift and go to state 68
    conditional_expression         shift and go to state 69
    unary_expression               shift and go to state 70
    logical_or_expression          shift and go to state 71
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    cast_expression                shift and go to state 76
    logical_and_expression         shift and go to state 77
    primary_expression             shift and go to state 78
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96

state 287

    (158) iteration_statement -> FOR ( expression_statement expression_statement expression ) . statement
    (139) statement -> . input_statement
    (140) statement -> . output_statement
    (141) statement -> . compound_statement
    (142) statement -> . expression_statement
    (143) statement -> . selection_statement
    (144) statement -> . iteration_statement
    (145) statement -> . jump_statement
    (171) input_statement -> . CIN IN ID ;
    (172) output_statement -> . COUT output_list ;
    (146) compound_statement -> . { statement_list }
    (147) compound_statement -> . { declaration_list }
    (148) compound_statement -> . { declaration_list statement_list }
    (153) expression_statement -> . ;
    (154) expression_statement -> . expression ;
    (155) selection_statement -> . IF ( expression ) statement
    (156) selection_statement -> . IF ( expression ) statement ELSE statement
    (157) iteration_statement -> . WHILE ( expression ) statement
    (158) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (159) jump_statement -> . CONTINUE ;
    (160) jump_statement -> . BREAK ;
    (161) jump_statement -> . RETURN ;
    (162) jump_statement -> . RETURN expression ;
    (68) expression -> . assignment_expression
    (69) expression -> . expression , assignment_expression
    (57) assignment_expression -> . conditional_expression
    (58) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) conditional_expression -> . logical_or_expression
    (56) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC unary_expression
    (20) unary_expression -> . DEC unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (53) logical_or_expression -> . logical_and_expression
    (54) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . postfix_expression [ expression ]
    (10) postfix_expression -> . postfix_expression ( )
    (11) postfix_expression -> . postfix_expression ( argument_expression_list )
    (12) postfix_expression -> . postfix_expression . ID
    (13) postfix_expression -> . postfix_expression PTR ID
    (14) postfix_expression -> . postfix_expression INC
    (15) postfix_expression -> . postfix_expression DEC
    (22) unary_operator -> . &
    (23) unary_operator -> . *
    (24) unary_operator -> . +
    (25) unary_operator -> . -
    (26) unary_operator -> . ~
    (27) unary_operator -> . !
    (51) logical_and_expression -> . inclusive_or_expression
    (52) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INTEGER
    (3) primary_expression -> . STRING
    (4) primary_expression -> . TRUE
    (5) primary_expression -> . FALSE
    (6) primary_expression -> . CHARACTER
    (7) primary_expression -> . ( expression )
    (49) inclusive_or_expression -> . exclusive_or_expression
    (50) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (47) exclusive_or_expression -> . and_expression
    (48) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQUAL relational_expression
    (44) equality_expression -> . equality_expression NE relational_expression
    (37) relational_expression -> . additive_expression
    (38) relational_expression -> . relational_expression < additive_expression
    (39) relational_expression -> . relational_expression > additive_expression
    (40) relational_expression -> . relational_expression LE additive_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (34) additive_expression -> . multiplicative_expression
    (35) additive_expression -> . additive_expression + multiplicative_expression
    (36) additive_expression -> . additive_expression - multiplicative_expression
    (30) multiplicative_expression -> . cast_expression
    (31) multiplicative_expression -> . multiplicative_expression * cast_expression
    (32) multiplicative_expression -> . multiplicative_expression / cast_expression
    (33) multiplicative_expression -> . multiplicative_expression % cast_expression
    (28) cast_expression -> . unary_expression
    (29) cast_expression -> . ( type_name ) cast_expression

    CIN             shift and go to state 57
    COUT            shift and go to state 59
    {               shift and go to state 29
    ;               shift and go to state 56
    IF              shift and go to state 61
    WHILE           shift and go to state 63
    FOR             shift and go to state 64
    CONTINUE        shift and go to state 65
    BREAK           shift and go to state 66
    RETURN          shift and go to state 67
    INC             shift and go to state 73
    DEC             shift and go to state 74
    &               shift and go to state 79
    *               shift and go to state 80
    +               shift and go to state 81
    -               shift and go to state 82
    ~               shift and go to state 83
    !               shift and go to state 84
    ID              shift and go to state 58
    INTEGER         shift and go to state 86
    STRING          shift and go to state 87
    TRUE            shift and go to state 88
    FALSE           shift and go to state 89
    CHARACTER       shift and go to state 90
    (               shift and go to state 62

    expression_statement           shift and go to state 52
    expression                     shift and go to state 60
    statement                      shift and go to state 289
    input_statement                shift and go to state 49
    output_statement               shift and go to state 50
    compound_statement             shift and go to state 51
    selection_statement            shift and go to state 53
    iteration_statement            shift and go to state 54
    jump_statement                 shift and go to state 55
    assignment_expression          shift and go to state 68
    conditional_expression         shift and go to state 69
    unary_expression               shift and go to state 70
    logical_or_expression          shift and go to state 71
    postfix_expression             shift and go to state 72
    unary_operator                 shift and go to state 75
    cast_expression                shift and go to state 76
    logical_and_expression         shift and go to state 77
    primary_expression             shift and go to state 78
    inclusive_or_expression        shift and go to state 85
    exclusive_or_expression        shift and go to state 91
    and_expression                 shift and go to state 92
    equality_expression            shift and go to state 93
    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 96

state 288

    (156) selection_statement -> IF ( expression ) statement ELSE statement .

    }               reduce using rule 156 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CIN             reduce using rule 156 (selection_statement -> IF ( expression ) statement ELSE statement .)
    COUT            reduce using rule 156 (selection_statement -> IF ( expression ) statement ELSE statement .)
    {               reduce using rule 156 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ;               reduce using rule 156 (selection_statement -> IF ( expression ) statement ELSE statement .)
    IF              reduce using rule 156 (selection_statement -> IF ( expression ) statement ELSE statement .)
    WHILE           reduce using rule 156 (selection_statement -> IF ( expression ) statement ELSE statement .)
    FOR             reduce using rule 156 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CONTINUE        reduce using rule 156 (selection_statement -> IF ( expression ) statement ELSE statement .)
    BREAK           reduce using rule 156 (selection_statement -> IF ( expression ) statement ELSE statement .)
    RETURN          reduce using rule 156 (selection_statement -> IF ( expression ) statement ELSE statement .)
    INC             reduce using rule 156 (selection_statement -> IF ( expression ) statement ELSE statement .)
    DEC             reduce using rule 156 (selection_statement -> IF ( expression ) statement ELSE statement .)
    &               reduce using rule 156 (selection_statement -> IF ( expression ) statement ELSE statement .)
    *               reduce using rule 156 (selection_statement -> IF ( expression ) statement ELSE statement .)
    +               reduce using rule 156 (selection_statement -> IF ( expression ) statement ELSE statement .)
    -               reduce using rule 156 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ~               reduce using rule 156 (selection_statement -> IF ( expression ) statement ELSE statement .)
    !               reduce using rule 156 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ID              reduce using rule 156 (selection_statement -> IF ( expression ) statement ELSE statement .)
    INTEGER         reduce using rule 156 (selection_statement -> IF ( expression ) statement ELSE statement .)
    STRING          reduce using rule 156 (selection_statement -> IF ( expression ) statement ELSE statement .)
    TRUE            reduce using rule 156 (selection_statement -> IF ( expression ) statement ELSE statement .)
    FALSE           reduce using rule 156 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CHARACTER       reduce using rule 156 (selection_statement -> IF ( expression ) statement ELSE statement .)
    (               reduce using rule 156 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ELSE            reduce using rule 156 (selection_statement -> IF ( expression ) statement ELSE statement .)


state 289

    (158) iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .

    }               reduce using rule 158 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CIN             reduce using rule 158 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    COUT            reduce using rule 158 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    {               reduce using rule 158 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ;               reduce using rule 158 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    IF              reduce using rule 158 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    WHILE           reduce using rule 158 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    FOR             reduce using rule 158 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CONTINUE        reduce using rule 158 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    BREAK           reduce using rule 158 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    RETURN          reduce using rule 158 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    INC             reduce using rule 158 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    DEC             reduce using rule 158 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    &               reduce using rule 158 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    *               reduce using rule 158 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    +               reduce using rule 158 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    -               reduce using rule 158 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ~               reduce using rule 158 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    !               reduce using rule 158 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ID              reduce using rule 158 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    INTEGER         reduce using rule 158 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    STRING          reduce using rule 158 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    TRUE            reduce using rule 158 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    FALSE           reduce using rule 158 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CHARACTER       reduce using rule 158 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    (               reduce using rule 158 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ELSE            reduce using rule 158 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for * in state 0 resolved as shift
WARNING: shift/reduce conflict for ID in state 0 resolved as shift
WARNING: shift/reduce conflict for ( in state 0 resolved as shift
WARNING: shift/reduce conflict for * in state 1 resolved as shift
WARNING: shift/reduce conflict for ID in state 1 resolved as shift
WARNING: shift/reduce conflict for ( in state 1 resolved as shift
WARNING: shift/reduce conflict for ( in state 9 resolved as shift
WARNING: shift/reduce conflict for ; in state 29 resolved as shift
WARNING: shift/reduce conflict for * in state 29 resolved as shift
WARNING: shift/reduce conflict for ID in state 29 resolved as shift
WARNING: shift/reduce conflict for ( in state 29 resolved as shift
WARNING: shift/reduce conflict for ( in state 32 resolved as shift
WARNING: shift/reduce conflict for ID in state 34 resolved as shift
WARNING: shift/reduce conflict for ) in state 34 resolved as shift
WARNING: shift/reduce conflict for ; in state 47 resolved as shift
WARNING: shift/reduce conflict for * in state 47 resolved as shift
WARNING: shift/reduce conflict for ID in state 47 resolved as shift
WARNING: shift/reduce conflict for ( in state 47 resolved as shift
WARNING: shift/reduce conflict for * in state 111 resolved as shift
WARNING: shift/reduce conflict for ID in state 111 resolved as shift
WARNING: shift/reduce conflict for ( in state 111 resolved as shift
WARNING: shift/reduce conflict for * in state 183 resolved as shift
WARNING: shift/reduce conflict for ID in state 183 resolved as shift
WARNING: shift/reduce conflict for ( in state 183 resolved as shift
WARNING: shift/reduce conflict for [ in state 183 resolved as shift
WARNING: shift/reduce conflict for ) in state 183 resolved as shift
WARNING: shift/reduce conflict for * in state 188 resolved as shift
WARNING: shift/reduce conflict for ID in state 188 resolved as shift
WARNING: shift/reduce conflict for ( in state 188 resolved as shift
WARNING: shift/reduce conflict for * in state 205 resolved as shift
WARNING: shift/reduce conflict for ( in state 205 resolved as shift
WARNING: shift/reduce conflict for [ in state 205 resolved as shift
WARNING: shift/reduce conflict for ) in state 205 resolved as shift
WARNING: shift/reduce conflict for ) in state 238 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 277 resolved as shift
WARNING: reduce/reduce conflict in state 7 resolved using rule (declaration_specifiers -> <empty>)
WARNING: rejected rule (declaration_specifiers -> type_specifier) in state 7
WARNING: reduce/reduce conflict in state 22 resolved using rule (declaration_specifiers -> <empty>)
WARNING: rejected rule (init_declarator -> declarator) in state 22
WARNING: Rule (declaration_specifiers -> type_specifier) is never reduced
